[
  {
    "objectID": "schedule.html",
    "href": "schedule.html",
    "title": "Schedule",
    "section": "",
    "text": "Week\nDate\nTopic\nSlides\nLab\nAssignment\n\n\n\n\n1\n8/29\nIntroduction to Data Science and R\nSlides\nLab\n\n\n\n2\n9/5\nVersion Control & Reproducible Research\nSlides\nLab\n\n\n\n3\n9/12\nExploratory data analysis\nSlides\nLab\nHW1\n\n\n4\n9/19\nData visualization\nSlides\nLab\n\n\n\n5\n9/26\nData Cleaning and Wrangling\nSlides\nLab\nHW2\n\n\n6\n10/3\nText Mining & Sentiment Analysis\nSlides\nLab\n\n\n\n\n10/10\nNO CLASS - FALL RECESS\n\n\nMidterm\n\n\n7\n10/17\nScraping, APIs, and Regular Expressions\nSlides\nLab\n\n\n\n8\n10/24\nEfficiency and High Performance Computing\nSlides\nLab\nHW3\n\n\n9\n10/31\nSQL and Managing Big Data\nSlides\nLab\n\n\n\n10\n11/7\nInteractive Visualization & Effective Data Communication I\nSlides\nLab\nHW4\n\n\n11\n11/14\nInteractive Visualization & Effective Data Communication II\nSlides\nLab\n\n\n\n12\n11/21\nNonparametric Statistics\nSlides\n\nFinal\n\n\n\n11/28\nNO CLASS - THANKSGIVING\n\n\n\n\n\n13\n12/5\nFinal Project Workshop"
  },
  {
    "objectID": "syllabus.html",
    "href": "syllabus.html",
    "title": "Syllabus",
    "section": "",
    "text": "Term: Fall 2025\nTime: Friday 9am - 12:55pm\nLocation: SSB 114\nUnits: 4"
  },
  {
    "objectID": "syllabus.html#pm-566-introduction-to-health-data-science",
    "href": "syllabus.html#pm-566-introduction-to-health-data-science",
    "title": "Syllabus",
    "section": "",
    "text": "Term: Fall 2025\nTime: Friday 9am - 12:55pm\nLocation: SSB 114\nUnits: 4"
  },
  {
    "objectID": "syllabus.html#course-overview",
    "href": "syllabus.html#course-overview",
    "title": "Syllabus",
    "section": "Course Overview",
    "text": "Course Overview\nThis course serves as an introduction to data science with a focus on the acquisition and analysis of real-life data. Students will learn the tools needed to:\n\nCreate usable and reproducible datasets by accessing, scraping, and cleaning data\nConduct exploratory data analysis and visualization\nIdentify scientific questions that can be answered with a given dataset\nWrite functional code in the R programming language, build basic apps, and construct a website"
  },
  {
    "objectID": "syllabus.html#learning-objectives",
    "href": "syllabus.html#learning-objectives",
    "title": "Syllabus",
    "section": "Learning Objectives",
    "text": "Learning Objectives\nThrough this course, students will become familiar with the techniques used in data science and apply them to health-related datasets. Students will learn:\n\nProgramming in R and associated tools including Quarto, Git, and SQL\nData visualization – selecting appropriate plots to gain insight from data\nData collection – web scraping, data wrangling, and database management\nExploratory data analysis – generating hypotheses while building intuition and understanding of a dataset\nBasic computational algorithms, including simulation strategies\nBuilding interactive tools and websites\n\nPrerequisite(s): None\nRecommended Preparation: Familiarity with programming, particularly in the R language"
  },
  {
    "objectID": "syllabus.html#course-slides",
    "href": "syllabus.html#course-slides",
    "title": "Syllabus",
    "section": "Course Slides",
    "text": "Course Slides\nLecture slides presented in class are available on the course website: https://uscbiostats.github.io/PM566/."
  },
  {
    "objectID": "syllabus.html#technological-proficiency-and-hardwaresoftware-required",
    "href": "syllabus.html#technological-proficiency-and-hardwaresoftware-required",
    "title": "Syllabus",
    "section": "Technological Proficiency and Hardware/Software Required",
    "text": "Technological Proficiency and Hardware/Software Required\nThe R language (http://cran.r-project.org) will be used throughout the semester and we recommend using the R Studio IDE for coding (https://posit.co/download/rstudio-desktop/). Additionally, if they do not already have one, students will be required to create a GitHub account (https://github.com/)."
  },
  {
    "objectID": "syllabus.html#readings-and-supplementary-materials",
    "href": "syllabus.html#readings-and-supplementary-materials",
    "title": "Syllabus",
    "section": "Readings and Supplementary Materials",
    "text": "Readings and Supplementary Materials\nThere are no required readings for this course."
  },
  {
    "objectID": "syllabus.html#supplementary-references",
    "href": "syllabus.html#supplementary-references",
    "title": "Syllabus",
    "section": "Supplementary References",
    "text": "Supplementary References\n\nR Programming for Data Science, 2019. Roger Peng. https://bookdown.org/rdpeng/rprogdatascience/\nR for Data Science, 2017. Garrett Grolemund and Hadley Wickham. http://r4ds.had.co.nz/\nExploratory Data Analysis with R, 2020. Roger Peng. https://bookdown.org/rdpeng/exdata/\nMastering Software Development in R, 2017. Roger Peng, Sean Kross, Brooke Anderson. https://bookdown.org/rdpeng/RProgDA/\nR Packages, 2023. Hadley Wickham and Jennifer Bryan. https://r-pkgs.org/\nModern Data Science with R, 2023. Benjamin S. Baumer, Daniel T. Kaplan, and Nicholas J. Horton. https://mdsr-book.github.io/mdsr3e/"
  },
  {
    "objectID": "syllabus.html#description-and-assessment-of-assignments",
    "href": "syllabus.html#description-and-assessment-of-assignments",
    "title": "Syllabus",
    "section": "Description and Assessment of Assignments",
    "text": "Description and Assessment of Assignments\nLabs: There will be weekly lab assignments which are graded for completion. Each week, there will be class time devoted to working on that week’s lab. Completing the weekly labs will count as part of the overall grade.\nHomework: There will be 4 assignments given throughout the semester, approximately every 2 weeks. Students may discuss the problems with one another, however, individual solutions must be submitted and copying will not be tolerated.\nStudents may earn extra credit on Homework by submitting their own data visualization for the weekly Tidy Tuesday dataset presented in class. Each week, a student can earn 5 points of extra credit, up to a total of 50 for the semester (equivalent to half of one homework assignment).\nMidterm Project: The midterm project will be to perform a thorough exploratory analysis and write a report with preliminary findings using a real-world dataset of your choosing. The source code and PDF report will be uploaded to GitHub.\nFinal Project: The final project will be to write a report for an analysis applied to a real-world dataset of your choosing and to create a website that includes interactive visualizations to display the data and results. The source code, website files, and PDF report will be uploaded to GitHub."
  },
  {
    "objectID": "syllabus.html#grading-breakdown",
    "href": "syllabus.html#grading-breakdown",
    "title": "Syllabus",
    "section": "Grading Breakdown",
    "text": "Grading Breakdown\n\n\n\nAssignment\n% of Grade\n\n\n\n\nLabs\n10%\n\n\nHomework (4)\n30%\n\n\nMidterm Project\n25%\n\n\nFinal Project\n35%\n\n\nTOTAL\n100%"
  },
  {
    "objectID": "syllabus.html#assignment-submission-policy",
    "href": "syllabus.html#assignment-submission-policy",
    "title": "Syllabus",
    "section": "Assignment Submission Policy",
    "text": "Assignment Submission Policy\nAll assignments must be completed in Quarto (or R Markdown) and submitted through the GitHub Issues page for the course. Late assignments will be penalized by 20% for each day past the due date, up to 5 days late, except when verifiable extenuating circumstances can be demonstrated."
  },
  {
    "objectID": "syllabus.html#schedule",
    "href": "syllabus.html#schedule",
    "title": "Syllabus",
    "section": "Schedule",
    "text": "Schedule\nAs the weeks go by, consult the Schedule Page for more information on weekly topics, problem sets, readings, and other materials. The schedule is likely to change as we go. Links to readings, assignments, and other materials from class will be posted on that page."
  },
  {
    "objectID": "syllabus.html#academic-integrity",
    "href": "syllabus.html#academic-integrity",
    "title": "Syllabus",
    "section": "Academic Integrity",
    "text": "Academic Integrity\nThe University of Southern California is foremost a learning community committed to fostering successful scholars and researchers dedicated to the pursuit of knowledge and the transmission of ideas. Academic misconduct is in contrast to the university’s mission to educate students through a broad array of first-rank academic, professional, and extracurricular programs and includes any act of dishonesty in the submission of academic work (either in draft or final form).\nThis course will follow the expectations for academic integrity as stated in the USC Student Handbook. All students are expected to submit assignments that are original work and prepared specifically for the course/section in this academic term. You may not submit work written by others or “recycle” work prepared for other courses without obtaining written permission from the instructor(s). Students suspected of engaging in academic misconduct will be reported to the Office of Academic Integrity.\nOther violations of academic misconduct include, but are not limited to, cheating, plagiarism, fabrication (e.g., falsifying data), knowingly assisting others in acts of academic dishonesty, and any act that gains or is intended to gain an unfair academic advantage.\nThe impact of academic dishonesty is far-reaching and is considered a serious offense against the university and could result in outcomes such as failure on the assignment, failure in the course, suspension, or even expulsion from the university.\nFor more information about academic integrity see the student handbook or the Office of Academic Integrity’s website, and university policies on Research and Scholarship Misconduct.\n\nStatement on the use of Artificial Intelligence\nGenerative artificial intelligence (AI) may be used under the direction and rules specified by the course instructor in specific circumstances as outlined in the syllabus. The student is responsible for the quality and content of all written assignments. Unless otherwise indicated by the course instructor, generative AI may be used to create an initial literature review, document outline and/or to organize material toward a first draft of a class paper, proofreading, or grammatical accuracy; however the final content of the written document and critical thinking of the ideas presented in the document must represent the student’s individual work and ideas learned through course content and/or research conducted from sources outside of the generative AI system. The student must include an annotation on all materials submitted that explicitly documents how AI was used to generate the document and properly reference both the sources and the AI tools such as ChatGPT (OpenAI, 2023). The student must review the information in the document and edit for accuracy, completeness, proper grammar, and demonstrate that the wording accurately reflects the student’s understanding and purpose in writing the text. Students should be aware that text generated solely from AI generators may include factual errors, bias, and may contain incomplete or inaccurate reference information, in addition to furthering appropriating knowledge produced by historically marginalized scholars without proper crediting. If you have any questions on whether a specific AI tool is allowed for any aspect of your work in this class, please ask your instructor for guidance. Failure to ensure agreement with your instructor on use of AI, prior to doing so, may result in a zero score. (NOTE: instructors have sophisticated tools to determine AI plagiarism.)"
  },
  {
    "objectID": "syllabus.html#students-and-disability-accommodations",
    "href": "syllabus.html#students-and-disability-accommodations",
    "title": "Syllabus",
    "section": "Students and Disability Accommodations:",
    "text": "Students and Disability Accommodations:\nUSC welcomes students with disabilities into all of the University’s educational programs. The Office of Student Accessibility Services (OSAS) is responsible for the determination of appropriate accommodations for students who encounter disability-related barriers. Once a student has completed the OSAS process (registration, initial appointment, and submitted documentation) and accommodations are determined to be reasonable and appropriate, a Letter of Accommodation (LOA) will be available to generate for each course. The LOA must be given to each course instructor by the student and followed up with a discussion. This should be done as early in the semester as possible as accommodations are not retroactive. More information can be found at http://osas.usc.edu. You may contact OSAS at (213) 740-0776 or via email at osasfrontdesk@usc.edu."
  },
  {
    "objectID": "syllabus.html#support-systems",
    "href": "syllabus.html#support-systems",
    "title": "Syllabus",
    "section": "Support Systems:",
    "text": "Support Systems:\nCounseling and Mental Health - (213) 740-9355 – 24/7 on call\nhttps://studenthealth.usc.edu/counseling/\nFree and confidential mental health treatment for students, including short-term psychotherapy, group counseling, stress fitness workshops, and crisis intervention.\nNational Suicide Prevention Lifeline - dial 988 – 24/7 on call\nhttp://www.suicidepreventionlifeline.org\nProvides free and confidential emotional support to people in suicidal crisis or emotional distress 24 hours a day, 7 days a week.\nRelationship and Sexual Violence Prevention Services (RSVP) - (213) 740-9355(WELL), press “0” after hours – 24/7 on call\nhttps://studenthealth.usc.edu/sexual-assault\nFree and confidential therapy services, workshops, and training for situations related to gender-based harm.\nOffice for Equity, Equal Opportunity, and Title IX (EEO-TIX) - (213) 740-5086\nhttp://eeotix.usc.edu\nInformation about how to get help or help someone affected by harassment or discrimination, rights of protected classes, reporting options, and additional resources for students, faculty, staff, visitors, and applicants.\nReporting Incidents of Bias or Harassment - (213) 740-5086 or (213) 821-8298\nhttp://usc-advocate.symplicity.com/care_report\nAvenue to report incidents of bias, hate crimes, and microaggressions to the Office for Equity, Equal Opportunity, and Title for appropriate investigation, supportive measures, and response.\nThe Office of Student Accessibility Services (OSAS) - (213) 740-0776\nhttp://osas.usc.edu\nOSAS ensures equal access for students with disabilities through providing academic accommodations and auxiliary aids in accordance with federal laws and university policy.\nUSC Campus Support and Intervention - (213) 821-4710\nhttp://campussupport.usc.edu\nAssists students and families in resolving complex personal, financial, and academic issues adversely affecting their success as a student.\nDiversity, Equity and Inclusion - (213) 740-2101\nhttp://diversity.usc.edu\nInformation on events, programs and training, the Provost’s Diversity and Inclusion Council, Diversity Liaisons for each academic school, chronology, participation, and various resources for students.\nUSC Emergency - UPC: (213) 740-4321, HSC: (323) 442-1000 – 24/7 on call\nhttp://dps.usc.edu, http://emergency.usc.edu\nEmergency assistance and avenue to report a crime. Latest updates regarding safety, including ways in which instruction will be continued if an officially declared emergency makes travel to campus infeasible.\nUSC Department of Public Safety - UPC: (213) 740-6000, HSC: (323) 442-1200 – 24/7 on call\nhttp://dps.usc.edu\nNon-emergency assistance or information.\nOffice of the Ombuds - (213) 821-9556 (UPC) / (323-442-0382 (HSC)\nhttp://ombuds.usc.edu\nA safe and confidential place to share your USC-related issues with a University Ombuds who will work with you to explore options or paths to manage your concern.\nOccupational Therapy Faculty Practice - (323) 442-3340 or\notfp@med.usc.edu, http://chan.usc.edu/otfp\nConfidential Lifestyle Redesign services for USC students to support health promoting habits and routines that enhance quality of life and academic performance."
  },
  {
    "objectID": "slides/week03.html#acknowledgment",
    "href": "slides/week03.html#acknowledgment",
    "title": "Exploratory Data Analysis",
    "section": "Acknowledgment",
    "text": "Acknowledgment\nThese slides were originally developed by Meredith Franklin. They have been modified by George G. Vega Yon and Kelly Street."
  },
  {
    "objectID": "slides/week03.html#exploratory-data-analysis",
    "href": "slides/week03.html#exploratory-data-analysis",
    "title": "Exploratory Data Analysis",
    "section": "Exploratory Data Analysis",
    "text": "Exploratory Data Analysis\n\nExploratory data analysis is the process of becoming familiar with a dataset\nIt should be the first step in your analysis pipeline\nIt involves:\n\nchecking data (import issues, outliers, missing values, data errors)\ncleaning data\nsummary statistics of key variables (univariate and bivariate)\nbasic plots and graphs"
  },
  {
    "objectID": "slides/week03.html#exploratory-data-analysis-1",
    "href": "slides/week03.html#exploratory-data-analysis-1",
    "title": "Exploratory Data Analysis",
    "section": "Exploratory Data Analysis",
    "text": "Exploratory Data Analysis\n\nSince our eyes and brains are not wired to detect patterns in large data tables filled with text and numbers, communication about data […] rarely comes in the form of raw data or code output. Instead, data and data-driven results are usually either summarized (e.g., using an average/mean) and presented in small summary tables or they are presented visually in the form of graphs, in which shape, distance, color, and size can be used to represent the magnitudes of (and relationships between) the values within our data.\n\n\nViridical Data Science, Yu and Barter"
  },
  {
    "objectID": "slides/week03.html#the-tidyverse-model",
    "href": "slides/week03.html#the-tidyverse-model",
    "title": "Exploratory Data Analysis",
    "section": "The Tidyverse Model",
    "text": "The Tidyverse Model\n\nLoosely, EDA encompasses the Import -&gt; Tidy -&gt; Transform -&gt; Visualize steps. Basically it is everything before we do modeling, prediction or inference.\nEDA may involve some statistical summaries, but it does not include formal statistical analysis."
  },
  {
    "objectID": "slides/week03.html#eda-checklist",
    "href": "slides/week03.html#eda-checklist",
    "title": "Exploratory Data Analysis",
    "section": "EDA Checklist",
    "text": "EDA Checklist\nThe goal of EDA is to better understand your data. Let’s use the checklist:\n\nRead in the data\nCheck the size of the data\nExamine the variables and their types\nLook at the top and bottom of the data\nVisualize the distributions of key variables\nCheck your expectations\nValidate with an external source\nFormulate a (simple) question\nTry the easy solution first\nChallenge your solution\n\n(adapted from Exploratory Data Analysis with R by Roger D. Peng)"
  },
  {
    "objectID": "slides/week03.html#case-study",
    "href": "slides/week03.html#case-study",
    "title": "Exploratory Data Analysis",
    "section": "Case study",
    "text": "Case study\nWe are going to use a dataset created from the National Center for Environmental Information (https://www.ncei.noaa.gov/). The data are 2019 hourly measurements from weather stations across the continental U.S."
  },
  {
    "objectID": "slides/week03.html#formulate-a-question",
    "href": "slides/week03.html#formulate-a-question",
    "title": "Exploratory Data Analysis",
    "section": "Formulate a Question",
    "text": "Formulate a Question\nIt is a good idea to first have a question such as:\n\nWhich weather stations reported the hottest and coldest daily temperatures?\nWhat day of the month was on average the hottest?\nIs there correlation between temperature and humidity in my dataset?"
  },
  {
    "objectID": "slides/week03.html#read-in-the-data",
    "href": "slides/week03.html#read-in-the-data",
    "title": "Exploratory Data Analysis",
    "section": "Read in the Data",
    "text": "Read in the Data\nThere are several ways to read in data (some depend on the type of data you have):\n\nread.table or read.csv in base R for delimited files\nreadRDS if you have a .rds dataset (this is a handy, compressed way of saving R objects)\nread_csv, read_csv2, read_delim, read_fwf from library(readr) that is part of the tidyverse\nreadxl() from library(readxl) for .xls and .xlsx files\nread_sas, read_spss, read_stata from library(haven)\nfread from library(data.table) for efficiently importing large datasets that are regular delimited files"
  },
  {
    "objectID": "slides/week03.html#read-in-the-data-1",
    "href": "slides/week03.html#read-in-the-data-1",
    "title": "Exploratory Data Analysis",
    "section": "Read in the Data",
    "text": "Read in the Data\nThere are plenty of ways to do these tasks, but we will focus on base R.\nSince our data is stored as a (gzipped) CSV file, we could load it into R with read.csv, but we will use the more flexible read.table. I have it stored locally, but we will see how to load it straight from GitHub in the lab.\n\nmet &lt;- read.table('../data/met_all.gz',\n                  header = TRUE, sep = ',')\n\nWe specify that the first line contains column names by setting header = TRUE and we indicate that commas are used to separate the different values (rather than tabs, spaces, etc.) by setting sep = ','."
  },
  {
    "objectID": "slides/week03.html#working-with-data.frames",
    "href": "slides/week03.html#working-with-data.frames",
    "title": "Exploratory Data Analysis",
    "section": "Working with data.frames",
    "text": "Working with data.frames\nThis gave as a data.frame object, which is a standard R format for cleaned, rectangular data. Each row represents an observation and each column represents a variable.\nAs we have seen, you can access particular parts of the data.frame by subsetting with the square brackets, [,]. For example, you can pull out the 2nd, 3rd, and 4th elements of the 1st column of our met dataset with met[2:4, 1].\nYou can also pull out specific columns by name, using the $ operator. Since the first column is called USAFID, we could access the same subset as above with met$USAFID[2:4] (notice that there is no comma here, because we have already subset down to a single variable).\nTo see the list of names for the dataset, you can use names(met) or colnames(met). To see the top few rows of the dataset, use head(met)."
  },
  {
    "objectID": "slides/week03.html#check-the-data",
    "href": "slides/week03.html#check-the-data",
    "title": "Exploratory Data Analysis",
    "section": "Check the data",
    "text": "Check the data\nWe should check the dimensions of the data set. This can be done several ways:\n\ndim(met)\n\n[1] 2377343      30\n\nnrow(met)\n\n[1] 2377343\n\nncol(met)\n\n[1] 30"
  },
  {
    "objectID": "slides/week03.html#check-the-data-1",
    "href": "slides/week03.html#check-the-data-1",
    "title": "Exploratory Data Analysis",
    "section": "Check the data",
    "text": "Check the data\n\nWe see that there are 2,377,343 records of hourly temperature in August 2019 from all of the weather stations in the US. The data set has 30 variables.\nWe should also check the top and bottom of the dataset to check for any irregularities. Use head(met) and tail(met) for this.\nNext we can take a deeper dive into the contents of the data with str()"
  },
  {
    "objectID": "slides/week03.html#check-variables",
    "href": "slides/week03.html#check-variables",
    "title": "Exploratory Data Analysis",
    "section": "Check variables",
    "text": "Check variables\n\nstr(met)\n\n'data.frame':   2377343 obs. of  30 variables:\n $ USAFID           : int  690150 690150 690150 690150 690150 690150 690150 690150 690150 690150 ...\n $ WBAN             : int  93121 93121 93121 93121 93121 93121 93121 93121 93121 93121 ...\n $ year             : int  2019 2019 2019 2019 2019 2019 2019 2019 2019 2019 ...\n $ month            : int  8 8 8 8 8 8 8 8 8 8 ...\n $ day              : int  1 1 1 1 1 1 1 1 1 1 ...\n $ hour             : int  0 1 2 3 4 5 6 7 8 9 ...\n $ min              : int  56 56 56 56 56 56 56 56 56 56 ...\n $ lat              : num  34.3 34.3 34.3 34.3 34.3 34.3 34.3 34.3 34.3 34.3 ...\n $ lon              : num  -116 -116 -116 -116 -116 ...\n $ elev             : int  696 696 696 696 696 696 696 696 696 696 ...\n $ wind.dir         : int  220 230 230 210 120 NA 320 10 320 350 ...\n $ wind.dir.qc      : chr  \"5\" \"5\" \"5\" \"5\" ...\n $ wind.type.code   : chr  \"N\" \"N\" \"N\" \"N\" ...\n $ wind.sp          : num  5.7 8.2 6.7 5.1 2.1 0 1.5 2.1 2.6 1.5 ...\n $ wind.sp.qc       : chr  \"5\" \"5\" \"5\" \"5\" ...\n $ ceiling.ht       : int  22000 22000 22000 22000 22000 22000 22000 22000 22000 22000 ...\n $ ceiling.ht.qc    : int  5 5 5 5 5 5 5 5 5 5 ...\n $ ceiling.ht.method: chr  \"9\" \"9\" \"9\" \"9\" ...\n $ sky.cond         : chr  \"N\" \"N\" \"N\" \"N\" ...\n $ vis.dist         : int  16093 16093 16093 16093 16093 16093 16093 16093 16093 16093 ...\n $ vis.dist.qc      : chr  \"5\" \"5\" \"5\" \"5\" ...\n $ vis.var          : chr  \"N\" \"N\" \"N\" \"N\" ...\n $ vis.var.qc       : chr  \"5\" \"5\" \"5\" \"5\" ...\n $ temp             : num  37.2 35.6 34.4 33.3 32.8 31.1 29.4 28.9 27.2 26.7 ...\n $ temp.qc          : chr  \"5\" \"5\" \"5\" \"5\" ...\n $ dew.point        : num  10.6 10.6 7.2 5 5 5.6 6.1 6.7 7.8 7.8 ...\n $ dew.point.qc     : chr  \"5\" \"5\" \"5\" \"5\" ...\n $ atm.press        : num  1010 1010 1011 1012 1013 ...\n $ atm.press.qc     : int  5 5 5 5 5 5 5 5 5 5 ...\n $ rh               : num  19.9 21.8 18.5 16.9 17.4 ..."
  },
  {
    "objectID": "slides/week03.html#check-variables-1",
    "href": "slides/week03.html#check-variables-1",
    "title": "Exploratory Data Analysis",
    "section": "Check variables",
    "text": "Check variables\n\nFirst, we see that str() gives us the class of the data, which in this case is a data.frame, as well as the dimensions of the data\nWe also see the variable names and their type (integer, numeric, character, etc.)\nWe can identify major problems with the data at this stage (e.g. a variable that has all missing values)"
  },
  {
    "objectID": "slides/week03.html#check-variables-2",
    "href": "slides/week03.html#check-variables-2",
    "title": "Exploratory Data Analysis",
    "section": "Check variables",
    "text": "Check variables\nWe can get summary statistics on our data.frame using summary().\n\nsummary(met[,8:13])\n\n      lat             lon               elev           wind.dir     \n Min.   :24.55   Min.   :-124.29   Min.   : -13.0   Min.   :  3     \n 1st Qu.:33.97   1st Qu.: -98.02   1st Qu.: 101.0   1st Qu.:120     \n Median :38.35   Median : -91.71   Median : 252.0   Median :180     \n Mean   :37.94   Mean   : -92.15   Mean   : 415.8   Mean   :185     \n 3rd Qu.:41.94   3rd Qu.: -82.99   3rd Qu.: 400.0   3rd Qu.:260     \n Max.   :48.94   Max.   : -68.31   Max.   :9999.0   Max.   :360     \n                                                    NA's   :785290  \n wind.dir.qc        wind.type.code    \n Length:2377343     Length:2377343    \n Class :character   Class :character  \n Mode  :character   Mode  :character"
  },
  {
    "objectID": "slides/week03.html#check-variables-more-closely",
    "href": "slides/week03.html#check-variables-more-closely",
    "title": "Exploratory Data Analysis",
    "section": "Check variables more closely",
    "text": "Check variables more closely\nWe know that we are supposed to have hourly measurements of weather data for the month of August 2019 for the entire US. We should check that we have all of these components. Let’s check:\n\nthe year\nthe month\nthe hours\nthe range of locations (latitude and longitude)"
  },
  {
    "objectID": "slides/week03.html#check-variables-more-closely-1",
    "href": "slides/week03.html#check-variables-more-closely-1",
    "title": "Exploratory Data Analysis",
    "section": "Check variables more closely",
    "text": "Check variables more closely\nWe can generate tables and/or barplots for integer variables:\n\ntable(met$hour)\n\n\n     0      1      2      3      4      5      6      7      8      9     10 \n 99434  93482  93770  96703 110504 112128 106235 101985 100310 102915 101880 \n    11     12     13     14     15     16     17     18     19     20     21 \n100470 103605  97004  96507  97635  94942  94184 100179  94604  94928  96070 \n    22     23 \n 94046  93823 \n\ntable(met$month)\n\n\n      8 \n2377343"
  },
  {
    "objectID": "slides/week03.html#check-variables-more-closely-2",
    "href": "slides/week03.html#check-variables-more-closely-2",
    "title": "Exploratory Data Analysis",
    "section": "Check variables more closely",
    "text": "Check variables more closely\nWe can generate tables and/or barplots for integer variables:\n\nbarplot(table(met$hour))"
  },
  {
    "objectID": "slides/week03.html#check-variables-more-closely-3",
    "href": "slides/week03.html#check-variables-more-closely-3",
    "title": "Exploratory Data Analysis",
    "section": "Check variables more closely",
    "text": "Check variables more closely\nFor numeric variables we should do a summary to see the quantiles, min, max, and mean.\n\ntable(met$year)\n\n\n   2019 \n2377343 \n\nsummary(met$lat)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  24.55   33.97   38.35   37.94   41.94   48.94 \n\nsummary(met$lon)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n-124.29  -98.02  -91.71  -92.15  -82.99  -68.31"
  },
  {
    "objectID": "slides/week03.html#check-variables-more-closely-4",
    "href": "slides/week03.html#check-variables-more-closely-4",
    "title": "Exploratory Data Analysis",
    "section": "Check variables more closely",
    "text": "Check variables more closely\nWe can visualize these distributions with a histogram.\n\nlayout(matrix(1:2, nrow=1))\nhist(met$lat)\nhist(met$lon)\n\n\n\n\n\n\n\nlayout(1)"
  },
  {
    "objectID": "slides/week03.html#check-variables-more-closely-5",
    "href": "slides/week03.html#check-variables-more-closely-5",
    "title": "Exploratory Data Analysis",
    "section": "Check variables more closely",
    "text": "Check variables more closely\nIf we return to our initial question, what weather stations reported the hottest and coldest temperatures, we should take a closer look at our key variable, temperature (temp)\n\nsummary(met$temp)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n -40.00   19.60   23.50   23.59   27.80   56.00   60089 \n\nhist(met$temp)\n\n\nIt looks like the temperatures are in Celsius. A temperature of -40 in August is really cold, we should see if this is an implausible value."
  },
  {
    "objectID": "slides/week03.html#check-variables-more-closely-6",
    "href": "slides/week03.html#check-variables-more-closely-6",
    "title": "Exploratory Data Analysis",
    "section": "Check variables more closely",
    "text": "Check variables more closely\nIt also looks like there is a lot of missing data, encoded by NA values. Let’s check the proportion of missingness by tallying up whether or not every temperature reading is an NA. This will give us a vector of TRUE/FALSE values and then we can take the mean (average), because R automatically interprets TRUE as 1 and FALSE as 0 for mathematical functions.\n\nmean(is.na(met$temp))\n\n[1] 0.0252757\n\n\n2.5% of the data are missing, which is not a huge amount."
  },
  {
    "objectID": "slides/week03.html#check-variables-more-closely-7",
    "href": "slides/week03.html#check-variables-more-closely-7",
    "title": "Exploratory Data Analysis",
    "section": "Check variables more closely",
    "text": "Check variables more closely\nIn our data.frame we can easily subset the data and select certain columns. Here, we select all observations with a temperature of -40C and a specific subset of the variables:\n\nmet_ss &lt;- met[met$temp == -40.00, c('hour','lat','lon','elev','wind.sp')]\n\ndim(met_ss)\n\n[1] 60125     5\n\nsummary(met_ss)\n\n      hour            lat             lon              elev      \n Min.   : 0.00   Min.   :29.12   Min.   :-89.55   Min.   :36     \n 1st Qu.: 2.75   1st Qu.:29.12   1st Qu.:-89.55   1st Qu.:36     \n Median : 5.50   Median :29.12   Median :-89.55   Median :36     \n Mean   : 5.50   Mean   :29.12   Mean   :-89.55   Mean   :36     \n 3rd Qu.: 8.25   3rd Qu.:29.12   3rd Qu.:-89.55   3rd Qu.:36     \n Max.   :11.00   Max.   :29.12   Max.   :-89.55   Max.   :36     \n NA's   :60089   NA's   :60089   NA's   :60089    NA's   :60089  \n    wind.sp     \n Min.   : NA    \n 1st Qu.: NA    \n Median : NA    \n Mean   :NaN    \n 3rd Qu.: NA    \n Max.   : NA    \n NA's   :60125"
  },
  {
    "objectID": "slides/week03.html#check-variables-more-closely-8",
    "href": "slides/week03.html#check-variables-more-closely-8",
    "title": "Exploratory Data Analysis",
    "section": "Check variables more closely",
    "text": "Check variables more closely\nIn dplyr we can do the same thing using filter and select\n\nlibrary(dplyr)\nmet_ss &lt;- filter(met, temp == -40.00) |&gt; \n  select(USAFID, day, hour, lat, lon, elev, wind.sp)\n\ndim(met_ss)\n\n[1] 36  7\n\nsummary(met_ss)\n\n     USAFID            day         hour            lat             lon        \n Min.   :720717   Min.   :1   Min.   : 0.00   Min.   :29.12   Min.   :-89.55  \n 1st Qu.:720717   1st Qu.:1   1st Qu.: 2.75   1st Qu.:29.12   1st Qu.:-89.55  \n Median :720717   Median :1   Median : 5.50   Median :29.12   Median :-89.55  \n Mean   :720717   Mean   :1   Mean   : 5.50   Mean   :29.12   Mean   :-89.55  \n 3rd Qu.:720717   3rd Qu.:1   3rd Qu.: 8.25   3rd Qu.:29.12   3rd Qu.:-89.55  \n Max.   :720717   Max.   :1   Max.   :11.00   Max.   :29.12   Max.   :-89.55  \n                                                                              \n      elev       wind.sp   \n Min.   :36   Min.   : NA  \n 1st Qu.:36   1st Qu.: NA  \n Median :36   Median : NA  \n Mean   :36   Mean   :NaN  \n 3rd Qu.:36   3rd Qu.: NA  \n Max.   :36   Max.   : NA  \n              NA's   :36"
  },
  {
    "objectID": "slides/week03.html#validate-against-an-external-source",
    "href": "slides/week03.html#validate-against-an-external-source",
    "title": "Exploratory Data Analysis",
    "section": "Validate against an external source",
    "text": "Validate against an external source\nWe should check outside sources to make sure that our data makes sense. For example the observation with -40C is suspicious, so we should look up the location of the weather station.\nGo to Google maps and enter the coordinates for the site with -40C (29.12, -89.55)\n\nIt doesn’t make much sense to have a -40C reading in the Gulf of Mexico off the coast of Louisiana!"
  },
  {
    "objectID": "slides/week03.html#data-cleaning",
    "href": "slides/week03.html#data-cleaning",
    "title": "Exploratory Data Analysis",
    "section": "Data cleaning",
    "text": "Data cleaning\nIf we return to our initial question (“Which weather stations reported the hottest and coldest daily temperatures?”), we need to generate a list of weather stations that are ordered from highest to lowest. We can then examine the top and bottom of this new dataset.\nFirst let us remove the aberrant observations and then we’ll sort by temperature.\n\nmet &lt;- met[met$temp &gt; -40, ]\n\nNotice that we do not create a new object, we just overwrite the met object. Once you’re sure that you want to remove certain observations, this is a good way to avoid confusion (otherwise, it is easy to end up with multiple subsets of the data in your R environment with similar names like met, met_ss, met_ss2, met_final, met_FINAL, met_FINAL_REAL, etc.)"
  },
  {
    "objectID": "slides/week03.html#data-cleaning-1",
    "href": "slides/week03.html#data-cleaning-1",
    "title": "Exploratory Data Analysis",
    "section": "Data cleaning",
    "text": "Data cleaning\nWe will also remove any observations with missing temperature values (NA).\nThe is.na() function tells you whether or not a particular value is missing and the ! operator takes the opposite of a TRUE/FALSE value, so in combination, they tell you which observations are not missing.\n\nmet &lt;- met[!is.na(met$temp), ]"
  },
  {
    "objectID": "slides/week03.html#highest-and-lowest",
    "href": "slides/week03.html#highest-and-lowest",
    "title": "Exploratory Data Analysis",
    "section": "Highest and Lowest",
    "text": "Highest and Lowest\n\nhead(met)[,c(1,8:10,24)]\n\n        USAFID    lat    lon elev  temp\n1203053 722817 38.767 -104.3 1838 -17.2\n1203055 722817 38.767 -104.3 1838 -17.2\n1203128 722817 38.767 -104.3 1838 -17.2\n1203129 722817 38.767 -104.3 1838 -17.2\n1203222 722817 38.767 -104.3 1838 -17.2\n1203225 722817 38.767 -104.3 1838 -17.2\n\ntail(met)[,c(1,8:10,24)]\n\n      USAFID    lat      lon elev temp\n42783 720267 38.955 -121.081  467 52.0\n724   690150 34.300 -116.166  696 52.8\n749   690150 34.296 -116.162  625 52.8\n748   690150 34.300 -116.166  696 53.9\n701   690150 34.300 -116.166  696 54.4\n42403 720267 38.955 -121.081  467 56.0"
  },
  {
    "objectID": "slides/week03.html#summary-statistics",
    "href": "slides/week03.html#summary-statistics",
    "title": "Exploratory Data Analysis",
    "section": "Summary statistics",
    "text": "Summary statistics\nThe maximum hourly temperature is 56C at site 720267, and the minimum hourly temperature is -17.2C at site 722817."
  },
  {
    "objectID": "slides/week03.html#summary-statistics-1",
    "href": "slides/week03.html#summary-statistics-1",
    "title": "Exploratory Data Analysis",
    "section": "Summary statistics",
    "text": "Summary statistics\nWe need to transform our data to answer our initial question. Let’s find the daily mean, max, and min temperatures for each weather station in our data.frame. We can do this with the summarize function from the dplyr package. This package is part of the tidyverse, so the syntax is a bit different from what we’ve seen before.\n\nlibrary(dplyr)\nmet_daily &lt;- summarize(met,\n                       temp = mean(temp),\n                       lat = mean(lat),\n                       lon = mean(lon),\n                       elev = mean(elev),\n                       .by = c(USAFID, day))\n\nWhat we’ve done here is told R to summarize the met dataset by the variables USAFID and day, splitting the data into subsets based on those two indexing variables. For each subset (representing a specific station of a specific day), we want the daily average temperature, as well as latitude, longitude, and elevation (though hopefully those don’t change too much over the course of a day!)"
  },
  {
    "objectID": "slides/week03.html#summary-statistics-2",
    "href": "slides/week03.html#summary-statistics-2",
    "title": "Exploratory Data Analysis",
    "section": "Summary statistics",
    "text": "Summary statistics\nBefore we continue, check the relative sizes of the met and met_daily objects. Which one is bigger?"
  },
  {
    "objectID": "slides/week03.html#summary-statistics-3",
    "href": "slides/week03.html#summary-statistics-3",
    "title": "Exploratory Data Analysis",
    "section": "Summary statistics",
    "text": "Summary statistics\nNow we will order our new dataset by the average daily temperature, just as we ordered the old one by observed temperature.\n\nmet_daily &lt;- met_daily[order(met_daily$temp), ]\n\nhead(met_daily)\n\n    USAFID day       temp    lat    lon elev\n2   722817   3 -17.200000 38.767 -104.3 1838\n1   722817   1 -17.133333 38.767 -104.3 1838\n3   722817   6 -17.066667 38.767 -104.3 1838\n164 726130  11   4.278261 44.270  -71.3 1909\n166 726130  31   4.304348 44.270  -71.3 1909\n163 726130  10   4.583333 44.270  -71.3 1909\n\ntail(met_daily)\n\n      USAFID day     temp      lat       lon     elev\n48708 722749   5 40.85714 33.26900 -111.8120 379.0000\n48695 723805   5 40.97500 34.76800 -114.6180 279.0000\n48721 720339  14 41.00000 32.14600 -111.1710 737.0000\n48710 723805   4 41.18333 34.76800 -114.6180 279.0000\n48688 722787   5 41.35714 33.52700 -112.2950 325.0000\n48438 690150  31 41.71667 34.29967 -116.1657 690.0833"
  },
  {
    "objectID": "slides/week03.html#summary-statistics-4",
    "href": "slides/week03.html#summary-statistics-4",
    "title": "Exploratory Data Analysis",
    "section": "Summary statistics",
    "text": "Summary statistics\nThe maximum daily average temperature is 41.7166667 C at site 690150 and the minimum daily average temperature is -17.2C at site 722817."
  },
  {
    "objectID": "slides/week03.html#summary-statistics-5",
    "href": "slides/week03.html#summary-statistics-5",
    "title": "Exploratory Data Analysis",
    "section": "Summary statistics",
    "text": "Summary statistics\nThe code below is similar to our previous example, but doesn’t include the latitude, longitude, and elevation. How would you alter this code to find the daily median, max, or min temperatures for each station?\n\nsummarize(met,\n          temp = mean(temp),\n          .by = c(USAFID, day))\n\n(try it yourself)"
  },
  {
    "objectID": "slides/week03.html#exploratory-graphs",
    "href": "slides/week03.html#exploratory-graphs",
    "title": "Exploratory Data Analysis",
    "section": "Exploratory graphs",
    "text": "Exploratory graphs\nWith exploratory graphs we aim to:\n\ndebug any issues remaining in the data\nunderstand properties of the data\nlook for patterns in the data\ninform modeling strategies\n\nExploratory graphs do not need to be perfect, we will look at presentation ready plots next week."
  },
  {
    "objectID": "slides/week03.html#exploratory-graphs-1",
    "href": "slides/week03.html#exploratory-graphs-1",
    "title": "Exploratory Data Analysis",
    "section": "Exploratory graphs",
    "text": "Exploratory graphs\nExamples of exploratory graphs include:\n\nhistograms\nboxplots\nscatterplots\nsimple maps"
  },
  {
    "objectID": "slides/week03.html#exploratory-graphs-2",
    "href": "slides/week03.html#exploratory-graphs-2",
    "title": "Exploratory Data Analysis",
    "section": "Exploratory Graphs",
    "text": "Exploratory Graphs\nFocusing on the variable of interest, temperature, let’s look at the distribution (after removing -40C)\n\nhist(met$temp)"
  },
  {
    "objectID": "slides/week03.html#exploratory-graphs-3",
    "href": "slides/week03.html#exploratory-graphs-3",
    "title": "Exploratory Data Analysis",
    "section": "Exploratory Graphs",
    "text": "Exploratory Graphs\nLet’s look at the daily data\n\nhist(met_daily$temp)"
  },
  {
    "objectID": "slides/week03.html#exploratory-graphs-4",
    "href": "slides/week03.html#exploratory-graphs-4",
    "title": "Exploratory Data Analysis",
    "section": "Exploratory Graphs",
    "text": "Exploratory Graphs\nA boxplot gives us an idea of the quantiles of the distribution and any outliers\n\nboxplot(met$temp, col = \"blue\")"
  },
  {
    "objectID": "slides/week03.html#exploratory-graphs-5",
    "href": "slides/week03.html#exploratory-graphs-5",
    "title": "Exploratory Data Analysis",
    "section": "Exploratory Graphs",
    "text": "Exploratory Graphs\nLet’s look at the daily data\n\nboxplot(met_daily$temp, col = \"blue\")"
  },
  {
    "objectID": "slides/week03.html#exploratory-graphs-6",
    "href": "slides/week03.html#exploratory-graphs-6",
    "title": "Exploratory Data Analysis",
    "section": "Exploratory Graphs",
    "text": "Exploratory Graphs\nWe know that these data come from US weather stations, so we might have some idea what to expect just from plotting the latitude and longitude (note that we fix the aspect ratio at 1:1 with asp = 1; this prevents the plot from stretching or shrinking to fit the available plotting area):\n\nplot(met_daily$lon, met_daily$lat, asp=1)"
  },
  {
    "objectID": "slides/week03.html#exploratory-graphs-7",
    "href": "slides/week03.html#exploratory-graphs-7",
    "title": "Exploratory Data Analysis",
    "section": "Exploratory Graphs",
    "text": "Exploratory Graphs\nA map will show us where the weather stations are located. First let’s get the unique latitudes and longitudes and see how many meteorological sites there are\n\nmet_stations &lt;- (unique(met[,c(\"lat\",\"lon\")]))  \ndim(met_stations)\n\n[1] 2827    2"
  },
  {
    "objectID": "slides/week03.html#exploratory-graphs-8",
    "href": "slides/week03.html#exploratory-graphs-8",
    "title": "Exploratory Data Analysis",
    "section": "Exploratory Graphs",
    "text": "Exploratory Graphs\nA map will show us where the weather stations are located. First let’s get the unique latitudes and longitudes and see how many meteorological sites there are.\n\nlibrary(leaflet)\nleaflet(met_stations) |&gt; \n  addProviderTiles('CartoDB.Positron') |&gt; \n  addCircles(lat = ~lat, lng = ~lon,\n             opacity = 1, fillOpacity = 1, radius = 400)"
  },
  {
    "objectID": "slides/week03.html#exploratory-graphs-9",
    "href": "slides/week03.html#exploratory-graphs-9",
    "title": "Exploratory Data Analysis",
    "section": "Exploratory Graphs",
    "text": "Exploratory Graphs"
  },
  {
    "objectID": "slides/week03.html#exploratory-graphs-10",
    "href": "slides/week03.html#exploratory-graphs-10",
    "title": "Exploratory Data Analysis",
    "section": "Exploratory Graphs",
    "text": "Exploratory Graphs\nLet’s map the locations of the max and min daily temperatures.\n\nmin &lt;- met_daily[1, ]               # First observation\nmax &lt;- met_daily[nrow(met_daily), ] # Last observation\n\nleaflet() |&gt; \n  addProviderTiles('CartoDB.Positron') |&gt; \n  addCircles(\n    data = min,\n    lat = ~lat, lng = ~lon, popup = \"Min temp.\",\n    opacity = 1, fillOpacity = 1, radius = 400, color = \"blue\"\n    ) |&gt;\n  addCircles(\n    data = max,\n    lat = ~lat, lng = ~lon, popup = \"Max temp.\",\n    opacity=1, fillOpacity=1, radius = 400, color = \"red\"\n    )\n\n(next slide)"
  },
  {
    "objectID": "slides/week03.html#exploratory-graphs-11",
    "href": "slides/week03.html#exploratory-graphs-11",
    "title": "Exploratory Data Analysis",
    "section": "Exploratory Graphs",
    "text": "Exploratory Graphs\nScatterplots help us look at pairwise relationships. Let’s see if there is any trend in temperature with latitude\n\nplot(met_daily$lat, met_daily$temp, pch=16, cex=0.5)\n\n\n\n\n\n\n\n\nThere is a clear decrease in temperatures as you increase in latitude (i.e as you go north)."
  },
  {
    "objectID": "slides/week03.html#exploratory-graphs-12",
    "href": "slides/week03.html#exploratory-graphs-12",
    "title": "Exploratory Data Analysis",
    "section": "Exploratory Graphs",
    "text": "Exploratory Graphs\nWe can add a simple linear regression line to this plot using lm() and abline(). We can also add a title and change the axis labels.\n\nmod &lt;- lm(temp ~ lat, data = met_daily)\nmet_daily[, plot(\n  lat, temp, pch=19, cex=0.5, \n  main = \"Temperature and Latitude\", \n  xlab = \"Latitude\", ylab = \"Temperature (deg C)\")\n  ]\nabline(mod, lwd=2, col=\"red\")\n\n(next slide)"
  },
  {
    "objectID": "slides/week10.html#acknowledgment",
    "href": "slides/week10.html#acknowledgment",
    "title": "Interactive Visualization",
    "section": "Acknowledgment",
    "text": "Acknowledgment\nThese slides were originally developed by Abigail Horn."
  },
  {
    "objectID": "slides/week10.html#what-is-interactive-visualization",
    "href": "slides/week10.html#what-is-interactive-visualization",
    "title": "Interactive Visualization",
    "section": "What is interactive visualization?",
    "text": "What is interactive visualization?\nInteractive visualization involves the creation and sharing of graphical representations of data, model, or results that allow a user to directly manipulate and explore.\nSome example products and packages in R:\n\nInteractive plots (Plotly)\nInteractive maps (plotly, Leaflet)\nInteractive tables (DT)\nDashboards (flexdashboard)\nInteractive applications (shiny)\nWebsites (Static using Quarto, R Markdown, blogdown, Hugo, Jeckyll)"
  },
  {
    "objectID": "slides/week10.html#what-is-interactive-visualization-cont.",
    "href": "slides/week10.html#what-is-interactive-visualization-cont.",
    "title": "Interactive Visualization",
    "section": "What is interactive visualization (cont.)",
    "text": "What is interactive visualization (cont.)\nInteractivity allows users to engage with data / models in a way that static visuals cannot\nFeatures of interactivity include:\n\nIdentify, isolate, and visualize information for extended periods of time\nZoom in and out\nHighlight relevant information\nGet more information\nFilter\nAnimate\nChange parameters"
  },
  {
    "objectID": "slides/week10.html#why-use-interactive-visualization",
    "href": "slides/week10.html#why-use-interactive-visualization",
    "title": "Interactive Visualization",
    "section": "Why use interactive visualization?",
    "text": "Why use interactive visualization?\nInteractive visualization helps with both the exploration and communication parts of the data science process"
  },
  {
    "objectID": "slides/week10.html#interactive-visualization-for-exploratory-data-analysis-eda",
    "href": "slides/week10.html#interactive-visualization-for-exploratory-data-analysis-eda",
    "title": "Interactive Visualization",
    "section": "Interactive Visualization for exploratory data analysis (EDA)",
    "text": "Interactive Visualization for exploratory data analysis (EDA)\nInteractive graphics are well suited to aid the exploration of high-dimensional or otherwise complex data. Interacting with information in a visual way helps to enable insights that wouldn’t be easy or even possible with static graphics, for reasons including:\n\nInvestigate faster: In a true exploratory setting, you have to make lots of visualizations, and investigate lots of follow-up questions, before stumbling across something truly valuable. Interactive visualization can aid in the sense-making process by searching for information quickly without fully specified questions (Unwin and Hofmann 1999)\nIdentifying relationships or structure that would otherwise go missing (J. W. Tukey and Fisherkeller 1973)\nUnderstand or diagnose problems with data, models, or algorithms (Wickham, Cook, and Hofmann 2015)"
  },
  {
    "objectID": "slides/week10.html#interactive-visualization-for-communication",
    "href": "slides/week10.html#interactive-visualization-for-communication",
    "title": "Interactive Visualization",
    "section": "Interactive visualization for communication",
    "text": "Interactive visualization for communication\nInteractive graphics are well suited to communicating high-dimensional or otherwise complex data. Interacting with information in a visual way may help communicating data, models, and results for reasons including:\n\nEngagement with information has been shown to improve the ability to retain information"
  },
  {
    "objectID": "slides/week10.html#interactive-visualization-for-communication-cont.-1",
    "href": "slides/week10.html#interactive-visualization-for-communication-cont.-1",
    "title": "Interactive Visualization",
    "section": "Interactive visualization for communication (cont. 1)",
    "text": "Interactive visualization for communication (cont. 1)"
  },
  {
    "objectID": "slides/week10.html#interactive-visualization-for-communication-cont.-2",
    "href": "slides/week10.html#interactive-visualization-for-communication-cont.-2",
    "title": "Interactive Visualization",
    "section": "Interactive visualization for communication (cont. 2)",
    "text": "Interactive visualization for communication (cont. 2)\n\nAutomate and efficiently share multiple dimensions of data/models/findings or complex analysis tasks\nHelp users to better understand, and make decisions on, data/models/findings\n\n\nEpiModel Shiny app for COVID testing at universities"
  },
  {
    "objectID": "slides/week10.html#interactive-visualization-for-communication-cont.-3",
    "href": "slides/week10.html#interactive-visualization-for-communication-cont.-3",
    "title": "Interactive Visualization",
    "section": "Interactive visualization for communication (cont. 3)",
    "text": "Interactive visualization for communication (cont. 3)\n\nTell a more interesting or engaging story, presenting multiple viewpoints of data\nAllow users to focus on the aspects most important to them, making the user more likely to understand, learn from, remember and appreciate the data\n\n\nMIT Media Lab Atlas of Inequality"
  },
  {
    "objectID": "slides/week10.html#two-classes-on-interactive-visualization-in-data-science",
    "href": "slides/week10.html#two-classes-on-interactive-visualization-in-data-science",
    "title": "Interactive Visualization",
    "section": "Two Classes on Interactive Visualization in Data Science",
    "text": "Two Classes on Interactive Visualization in Data Science\nToday:\n\nCreating interactive graphs with the plotly package and tables with DT\n\nNext week:\n\nCreating a website using RStudio and GitHub Pages\nSharing your interactive graphics\nSurvey other options for sharing interactive graphics (Shiny apps, dashboards)"
  },
  {
    "objectID": "slides/week10.html#what-is-plotly",
    "href": "slides/week10.html#what-is-plotly",
    "title": "Interactive Visualization",
    "section": "What is Plotly?",
    "text": "What is Plotly?\n\n\nPlotly is an open source library for creating and sharing interactive graphics\nIt is powered by the JavaScript graphing library plotly.js and is designed on principles of adding layers\nPlotly can work with several programming languages and applications including R, JavaScript, Python, Matlab, and Excel.\nPlotly for R graphics are based on the htmlwidgets framework, which allows them to work seamlessly inside of larger rmarkdown documents, inside shiny apps, RStudio, Jupyter notebooks, the R prompt, and more."
  },
  {
    "objectID": "slides/week10.html#plot_ly-vs.-ggplotly",
    "href": "slides/week10.html#plot_ly-vs.-ggplotly",
    "title": "Interactive Visualization",
    "section": "plot_ly() vs. ggplotly()",
    "text": "plot_ly() vs. ggplotly()\nThere are two main ways to create a plotly object:\n\nTransforming a ggplot2 object (via ggplotly()) into a plotly object\nDirectly initializing a plotly object with plot_ly()/plot_geo()/plot_mapbox(). This provides a ‘direct’ interface to plotly.js with some additional abstractions to help reduce typing\n\nBoth approaches are powered by plotly.js so many of the same concepts and tools that you learn for one interface can be reused in the other"
  },
  {
    "objectID": "slides/week10.html#plot_ly-function",
    "href": "slides/week10.html#plot_ly-function",
    "title": "Interactive Visualization",
    "section": "plot_ly() function",
    "text": "plot_ly() function\nThe plot_ly() function has numerous arguments that are unique to the R package (e.g., color, stroke, span, symbol, linetype, etc.) and make it easier to encode data variables as visual properties (e.g., color). By default, these arguments map values of a data variable to a visual range defined by the plural form of the argument\n\n(almost) every function anticipates a plotly object as input to its first argument and returns a modified version of that plotly object\nThe layout() function, which modifies layout components of the plotly object, anticipates a plotly object in its first argument and its other arguments add and/or modify various layout components of that object (e.g., the title)"
  },
  {
    "objectID": "slides/week10.html#plot_ly-function-cont.",
    "href": "slides/week10.html#plot_ly-function-cont.",
    "title": "Interactive Visualization",
    "section": "plot_ly() function (cont.)",
    "text": "plot_ly() function (cont.)\n\nA family of add_*() functions (e.g., add_histogram(), add_lines(), add_trace(), etc.) define how to render data into geometric objects by adding a graphical layer to a plot. Layers can be included to add:\n\ndata\naesthetic mappings (e.g., assigning clarity to color)\ngeometric representation (e.g., rectangles, circles, etc.)\nstatistical transformations (e.g., sum, mean, etc.)\npositional adjustments (e.g., dodge, stack, etc.)"
  },
  {
    "objectID": "slides/week10.html#ggplotly",
    "href": "slides/week10.html#ggplotly",
    "title": "Interactive Visualization",
    "section": "ggplotly()",
    "text": "ggplotly()\n\nWe also have the option of working with the ggplotly() function from the plotly package, which can translate ggplot2 to plotly.\nThe essence of this is very straightforward:\n\n\np &lt;- ggplot(*) + geom_*()\nggplotly(p)\n\n\nThis functionality can be really helpful for quickly adding interactivity to your existing ggplot2 workflow."
  },
  {
    "objectID": "slides/week10.html#ggplotly-cont.",
    "href": "slides/week10.html#ggplotly-cont.",
    "title": "Interactive Visualization",
    "section": "ggplotly() (cont.)",
    "text": "ggplotly() (cont.)\n\nggplotly() provides advantages to plot_ly() in particular when it comes to exploring statistical summaries across groups. The ability to quickly generate statistical summaries across groups and map to an interactive plot works for basically any geom (e.g., geom_boxplot(), geom_histogram(), geom_density(), etc.)"
  },
  {
    "objectID": "slides/week10.html#install-plotly",
    "href": "slides/week10.html#install-plotly",
    "title": "Interactive Visualization",
    "section": "Install Plotly",
    "text": "Install Plotly\n\nif(!require(plotly)) install.packages(\"plotly\", repos = \"http://cran.us.r-project.org\")\nlibrary(plotly)"
  },
  {
    "objectID": "slides/week10.html#load-data-for-examples",
    "href": "slides/week10.html#load-data-for-examples",
    "title": "Interactive Visualization",
    "section": "Load data for examples",
    "text": "Load data for examples\nFor examples today we will be using COVID data direct downloaded from the New York Times GitHub repository: https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-states.csv\n\nThis data source provides COVID cases (confirmed infections) and deaths for each US state by date"
  },
  {
    "objectID": "slides/week10.html#load-data-for-examples-cont.-1",
    "href": "slides/week10.html#load-data-for-examples-cont.-1",
    "title": "Interactive Visualization",
    "section": "Load data for examples (cont. 1)",
    "text": "Load data for examples (cont. 1)\nWe have pre-processed this data and added some additional variables in the file \"data/coronavirus_states.csv\"\n\npopulation of each state\nnew_cases: daily change in cases\nnew_deaths: daily change in deaths\nper100k: cases per 100,000 population\ndeathsper100k: deaths per 100,000 population\nnaive_CFR: naive1 Case Fatality Rate (CFR) = deaths / cases, for each state on each date\n\nIn the lab we will preprocess this data together.\n“naive” since calculation of CFR requires more sophisticated modeling to account for time delays between cases and deaths"
  },
  {
    "objectID": "slides/week10.html#load-data-for-examples-cont.-2",
    "href": "slides/week10.html#load-data-for-examples-cont.-2",
    "title": "Interactive Visualization",
    "section": "Load data for examples (cont. 2)",
    "text": "Load data for examples (cont. 2)\n\n# import data\n\ncv_states &lt;- read.csv(\"../data/coronavirus_states.csv\")\n\n# format the date\ncv_states$date &lt;- as.Date(cv_states$date, format=\"%Y-%m-%d\")\n\n# create most recent day data frame\ncv_states_today &lt;- subset(cv_states, date==max(cv_states$date))"
  },
  {
    "objectID": "slides/week10.html#load-data-for-examples-cont.-3",
    "href": "slides/week10.html#load-data-for-examples-cont.-3",
    "title": "Interactive Visualization",
    "section": "Load data for examples (cont. 3)",
    "text": "Load data for examples (cont. 3)\nInspect the data\n\nstr(cv_states)\n\n'data.frame':   13104 obs. of  15 variables:\n $ state             : chr  \"Alabama\" \"Alabama\" \"Alabama\" \"Alabama\" ...\n $ date              : Date, format: \"2020-03-13\" \"2020-03-14\" ...\n $ fips              : int  1 1 1 1 1 1 1 1 1 1 ...\n $ cases             : int  6 12 23 29 39 51 78 106 131 157 ...\n $ deaths            : int  0 0 0 0 0 0 0 0 0 0 ...\n $ population        : int  4779736 4779736 4779736 4779736 4779736 4779736 4779736 4779736 4779736 4779736 ...\n $ new_cases         : int  6 6 11 6 10 12 27 28 25 26 ...\n $ new_deaths        : int  0 0 0 0 0 0 0 0 0 0 ...\n $ days_since_death10: int  0 0 0 0 0 0 0 0 0 0 ...\n $ days_since_case100: int  0 0 0 0 0 0 0 0 1 2 ...\n $ per100k           : num  0.1 0.3 0.5 0.6 0.8 1.1 1.6 2.2 2.7 3.3 ...\n $ newper100k        : num  0.1 0.1 0.2 0.1 0.2 0.3 0.6 0.6 0.5 0.5 ...\n $ deathsper100k     : num  0 0 0 0 0 0 0 0 0 0 ...\n $ newdeathsper100k  : num  0 0 0 0 0 0 0 0 0 0 ...\n $ naive_CFR         : num  0 0 0 0 0 0 0 0 0 0 ..."
  },
  {
    "objectID": "slides/week10.html#load-data-for-examples-cont.-4",
    "href": "slides/week10.html#load-data-for-examples-cont.-4",
    "title": "Interactive Visualization",
    "section": "Load data for examples (cont. 4)",
    "text": "Load data for examples (cont. 4)\nInspect the data\n\n#dim(cv_states)\nsummary(cv_states)\n\n    state                date                 fips           cases       \n Length:13104       Min.   :2020-01-21   Min.   : 1.00   Min.   :     1  \n Class :character   1st Qu.:2020-05-01   1st Qu.:17.00   1st Qu.:  2089  \n Mode  :character   Median :2020-06-29   Median :31.00   Median : 16764  \n                    Mean   :2020-06-28   Mean   :31.87   Mean   : 62365  \n                    3rd Qu.:2020-08-28   3rd Qu.:46.00   3rd Qu.: 70786  \n                    Max.   :2020-10-26   Max.   :78.00   Max.   :916562  \n     deaths           population         new_cases         new_deaths     \n Min.   :    0.00   Min.   :   56882   Min.   :    0.0   Min.   :   0.00  \n 1st Qu.:   51.75   1st Qu.: 1360301   1st Qu.:   45.0   1st Qu.:   0.00  \n Median :  453.50   Median : 3831074   Median :  264.0   Median :   4.00  \n Mean   : 2158.38   Mean   : 5882962   Mean   :  670.6   Mean   :  17.26  \n 3rd Qu.: 2057.00   3rd Qu.: 6547629   3rd Qu.:  770.0   3rd Qu.:  15.00  \n Max.   :33073.00   Max.   :37253956   Max.   :22276.0   Max.   :1877.00  \n days_since_death10 days_since_case100    per100k         newper100k    \n Min.   :  0.00     Min.   :  0.00     Min.   :   0.0   Min.   :  0.00  \n 1st Qu.: 22.00     1st Qu.: 36.00     1st Qu.: 125.2   1st Qu.:  2.50  \n Median : 83.00     Median : 96.00     Median : 623.4   Median :  7.10  \n Mean   : 87.37     Mean   : 98.12     Mean   : 954.1   Mean   : 11.28  \n 3rd Qu.:146.00     3rd Qu.:158.00     3rd Qu.:1563.9   3rd Qu.: 15.30  \n Max.   :237.00     Max.   :233.00     Max.   :5686.4   Max.   :220.40  \n deathsper100k    newdeathsper100k    naive_CFR     \n Min.   :  0.00   Min.   : 0.0000   Min.   : 0.000  \n 1st Qu.:  3.60   1st Qu.: 0.0000   1st Qu.: 1.440  \n Median : 14.90   Median : 0.1000   Median : 2.550  \n Mean   : 29.39   Mean   : 0.2464   Mean   : 3.079  \n 3rd Qu.: 40.00   3rd Qu.: 0.3000   3rd Qu.: 4.330  \n Max.   :185.30   Max.   :21.3000   Max.   :31.250"
  },
  {
    "objectID": "slides/week10.html#basic-scatterplot",
    "href": "slides/week10.html#basic-scatterplot",
    "title": "Interactive Visualization",
    "section": "Basic Scatterplot",
    "text": "Basic Scatterplot\nLet’s start with a scatterplot of population-normalized (per100k) deaths vs. cases on the most recent date from dataframe cv_states_today\n\nSpecify a scatterplot by type = \"scatter\" and mode = 'markers'\nNotice how the arguments for the x and y variables as specified as formulas, with the tilde operator (~)\nUse color to specify an additional data dimension (factor or continuous), and map each level of the dimension to a different color (factor or continuous)\ncolors is used to specify the range of colors\n\n\ncv_states_today |&gt; \n           plot_ly(x = ~deathsper100k, y = ~per100k, \n                   type = 'scatter',\n                   mode = 'markers',\n                   color = ~state,\n                   colors = \"Blues\")"
  },
  {
    "objectID": "slides/week10.html#basic-scatterplot-cont.-1",
    "href": "slides/week10.html#basic-scatterplot-cont.-1",
    "title": "Interactive Visualization",
    "section": "Basic Scatterplot (cont. 1)",
    "text": "Basic Scatterplot (cont. 1)\n\n\n\n\n\n\n\nScatterplot of deaths vs. cases population-normalized (per100k)\nplotly allows us to hover and see the exact \\((x,y)\\) values of each point\nNotice the automatic tooltip that appears when your mouse hovers over each point\nDoubleclick any item in legend to isolate that point in the plot"
  },
  {
    "objectID": "slides/week10.html#scatterplot-size",
    "href": "slides/week10.html#scatterplot-size",
    "title": "Interactive Visualization",
    "section": "Scatterplot: size",
    "text": "Scatterplot: size\n\nYou can add an additional dimension by adjusting the size of each point (also with ~ operator)\n\nSpecify the limits of the size through sizes\nsizemode specifies 'area' or 'diameter'\n\nHere we specify size as mapped to each state’s naive_CFR\n\n\ncv_states_today |&gt; \n           plot_ly(x = ~deathsper100k, y = ~per100k, \n                   type = 'scatter',\n                   mode = 'markers',\n                   color = ~state,\n                   size = ~naive_CFR,\n                   sizes = c(5, 70),\n                   marker = list(sizemode='diameter', opacity=0.5))"
  },
  {
    "objectID": "slides/week10.html#scatterplot-size-cont.",
    "href": "slides/week10.html#scatterplot-size-cont.",
    "title": "Interactive Visualization",
    "section": "Scatterplot: size (cont.)",
    "text": "Scatterplot: size (cont.)\n\n\n\n\n\n\nThe closer to the bottom right corner of the plot, the higher the CFR, and the larger the point’s circle."
  },
  {
    "objectID": "slides/week10.html#hover-information",
    "href": "slides/week10.html#hover-information",
    "title": "Interactive Visualization",
    "section": "Hover information",
    "text": "Hover information\n\nYou can specify what info will appear when hovering using hoverinfo through the text argument (also with ~ operator)\n\nMultiple variables can be included upon hover\nCreate new lines between variables in hoverinfo using sep = \"&lt;br&gt;\"\n\nLet’s add per100k, deathsper100k, and naive_CFR to the hover info:\n\n\ncv_states_today |&gt; \n  plot_ly(x = ~deathsper100k, y = ~per100k, \n          type = 'scatter', mode = 'markers', color = ~state,\n          size = ~naive_CFR, sizes = c(5, 70), marker = list(sizemode='diameter', opacity=0.5),\n          hoverinfo = 'text',\n          text = ~paste( paste(state, \":\", sep=\"\"),\n                         paste(\" Cases per 100k: \", per100k, sep=\"\") ,\n                         paste(\" Deaths per 100k: \", deathsper100k, sep=\"\"),\n                         paste(\" CFR (%): \", naive_CFR,sep=\"\"),\n                         sep = \"&lt;br&gt;\"))"
  },
  {
    "objectID": "slides/week10.html#hover-information-cont.",
    "href": "slides/week10.html#hover-information-cont.",
    "title": "Interactive Visualization",
    "section": "Hover information (cont.)",
    "text": "Hover information (cont.)\n\n\n\n\n\n\nWe can now clearly understand the information being shown in the tooltip"
  },
  {
    "objectID": "slides/week10.html#layout",
    "href": "slides/week10.html#layout",
    "title": "Interactive Visualization",
    "section": "Layout",
    "text": "Layout\n\nSpecify chart labels through layout()\nhovermode = \"compare\" allows comparing multiple points (default is \"closest\")\n\n\ncv_states_today |&gt; \n  plot_ly(x = ~deathsper100k, y = ~per100k, \n          type = 'scatter', mode = 'markers', color = ~state,\n          size = ~naive_CFR, sizes = c(5, 70), marker = list(sizemode='diameter', opacity=0.5),\n          hoverinfo = 'text',\n          text = ~paste( paste(state, \":\", sep=\"\"), \n                    paste(\" Cases per 100k: \", per100k, sep=\"\") ,\n              paste(\" Deaths per 100k: \", deathsper100k, sep=\"\"),\n              paste(\" CFR (%): \", naive_CFR,sep=\"\"), \n              sep = \"&lt;br&gt;\")) |&gt; \n  layout(title = \"Cases, Deaths, and Naive Case Fatality Rate for US States\",\n        yaxis = list(title = \"Cases\"), \n         xaxis = list(title = \"Deaths\"),\n         hovermode = \"compare\")"
  },
  {
    "objectID": "slides/week10.html#layout-cont.",
    "href": "slides/week10.html#layout-cont.",
    "title": "Interactive Visualization",
    "section": "Layout (cont.)",
    "text": "Layout (cont.)"
  },
  {
    "objectID": "slides/week10.html#d-scatterplot",
    "href": "slides/week10.html#d-scatterplot",
    "title": "Interactive Visualization",
    "section": "3D Scatterplot",
    "text": "3D Scatterplot\n\nCan add a 3rd dimension using type = 'scatter3d' (make sure to specify the dimension as z)\n\n\ncv_states_today |&gt; \n  plot_ly(x = ~deathsper100k, y = ~per100k, z = ~population,\n          type = 'scatter3d', mode = 'markers', color = ~state,\n          size = ~naive_CFR, sizes = c(5, 70), marker = list(sizemode='diameter', opacity=0.5),\n          hoverinfo = 'text',\n          text = ~paste( paste(state, \":\", sep=\"\"), \n                    paste(\" Cases per 100k: \", per100k, sep=\"\") ,\n              paste(\" Deaths per 100k: \", deathsper100k, sep=\"\"),\n              paste(\" CFR (%): \", naive_CFR,sep=\"\"), \n              sep = \"&lt;br&gt;\")) |&gt; \n  layout(title = \"Cases, Deaths, and Naive Case Fatality Rate for US States\",\n          yaxis = list(title = \"Cases\"), \n          xaxis = list(title = \"Deaths\"),\n         hovermode = \"compare\")"
  },
  {
    "objectID": "slides/week10.html#d-scatterplot-cont.",
    "href": "slides/week10.html#d-scatterplot-cont.",
    "title": "Interactive Visualization",
    "section": "3D Scatterplot (cont.)",
    "text": "3D Scatterplot (cont.)"
  },
  {
    "objectID": "slides/week10.html#scatterplot-with-ggplotly",
    "href": "slides/week10.html#scatterplot-with-ggplotly",
    "title": "Interactive Visualization",
    "section": "Scatterplot with ggplotly()",
    "text": "Scatterplot with ggplotly()\n\nYou can create a scatterplot with the ggplotly() function in 1 additional line of code\nThe advantage of ggplotly() is that it allows taking advantage of the geom geom_smooth() to see the pattern in the scatter\n\n\nlibrary(ggplot2)\np &lt;- ggplot(cv_states_today, aes(x=deathsper100k, y=per100k, size=naive_CFR)) + \n          geom_point() + geom_smooth()\nggplotly(p)"
  },
  {
    "objectID": "slides/week10.html#scatterplot-with-ggplotly-1",
    "href": "slides/week10.html#scatterplot-with-ggplotly-1",
    "title": "Interactive Visualization",
    "section": "Scatterplot with ggplotly()",
    "text": "Scatterplot with ggplotly()\n\n\n\n\n\n\nThe geom_smooth() helps us to see there is not a clear correlation between cases and deaths relative to population across the states. Note that the geom_smooth() line also appears upon hover."
  },
  {
    "objectID": "slides/week10.html#annotations",
    "href": "slides/week10.html#annotations",
    "title": "Interactive Visualization",
    "section": "Annotations",
    "text": "Annotations\nYou can add annotations to your interactive plot\n\np &lt;- ggplot(cv_states_today, aes(x=deathsper100k, y=per100k, size=naive_CFR)) + geom_point() + geom_smooth()\nfig &lt;- p |&gt;\n  ggplotly(layerData = 2, originalData = F) |&gt;\n  add_fun(function(fig) {\n    fig |&gt; slice(which.max(se)) |&gt;\n      add_segments(x = ~x, xend = ~x, y = ~ymin, yend = ~ymax) |&gt;\n      add_annotations(\"Max uncertainty\")\n  })\nfig &lt;- fig |&gt; add_fun(function(p) {\n    fig |&gt; slice(which.min(se)) |&gt;\n      add_segments(x = ~x, xend = ~x, y = ~ymin, yend = ~ymax) |&gt;\n      add_annotations(\"Min uncertainty\")\n  })"
  },
  {
    "objectID": "slides/week10.html#annotations-1",
    "href": "slides/week10.html#annotations-1",
    "title": "Interactive Visualization",
    "section": "Annotations",
    "text": "Annotations"
  },
  {
    "objectID": "slides/week10.html#line-graph",
    "href": "slides/week10.html#line-graph",
    "title": "Interactive Visualization",
    "section": "Line graph",
    "text": "Line graph\n\nSpecify a line plot using type = \"scatter\" and mode = \"lines\"\nBe sure to specify the feature (column in the data) that distinguishes the lines (normally through color)\n\n\ncv_states |&gt; filter(population&gt;7500000) |&gt; \nplot_ly(x = ~date, y = ~deaths, color = ~state, type = \"scatter\", mode = \"lines\",\n        hoverinfo = 'text',\n        text = ~paste(paste(state, \":\", sep=\"\"), \n                  paste(\"Date: \", date, sep=\"\"),\n                  paste(\" Deaths (total): \", deaths, sep=\"\"), \n                  paste(\" Deaths per 100k: \", deathsper100k, sep=\"\"), sep = \"&lt;br&gt;\"))"
  },
  {
    "objectID": "slides/week10.html#line-graph-cont.",
    "href": "slides/week10.html#line-graph-cont.",
    "title": "Interactive Visualization",
    "section": "Line graph (cont.)",
    "text": "Line graph (cont.)\n\n\n\n\n\n\nDeaths stabilized for New York and New Jersey around the time they started to rise for California, Texas, and Florida. It helps to be able to see the exact values for each date upon hover."
  },
  {
    "objectID": "slides/week10.html#line-graph-ggplotly",
    "href": "slides/week10.html#line-graph-ggplotly",
    "title": "Interactive Visualization",
    "section": "Line graph: ggplotly()",
    "text": "Line graph: ggplotly()\n\nSimply pass a ggplot object to ggplotly() to create an interactive version\nsubplot() can be used to join arrange multiple plots – works similarly to grid.arrange() function from the gridExtra package\n\nCompare the automatic tooltip results for both plots\n\n\n\ng1 = plot_ly(cv_states, x = ~date, y = ~deaths, color = ~state, type = \"scatter\", mode = \"lines\")\ng2 = ggplot(cv_states, aes(x = date, y = cases, color = state)) +\n          geom_line() + geom_point(size = .5, alpha = 0.5)\ng2_plotly &lt;- ggplotly(g2)\nsubplot(g1, g2_plotly)"
  },
  {
    "objectID": "slides/week10.html#line-graph-ggplotly-1",
    "href": "slides/week10.html#line-graph-ggplotly-1",
    "title": "Interactive Visualization",
    "section": "Line graph: ggplotly()",
    "text": "Line graph: ggplotly()"
  },
  {
    "objectID": "slides/week10.html#specifying-text-with-ggplotly",
    "href": "slides/week10.html#specifying-text-with-ggplotly",
    "title": "Interactive Visualization",
    "section": "Specifying text with ggplotly()",
    "text": "Specifying text with ggplotly()\n\nYou can specify the tooltip text in the ggplot() or ggplotly() prompt, but note that the ggplotly() prompt only accepts text in \" \"\n\n\ng1 = ggplot(cv_states, aes(x = date, y = cases, color = state, \n              text=paste(paste(state, \":\", sep=\"\"), \n                         paste(\"Date: \", date, sep=\"\"),\n                    paste(\" Cases (total): \", cases, sep=\"\"),\n                      sep = \"&lt;br&gt;\") )) + \n          geom_line() + geom_point(size = .5, alpha = 0.5) \nggplotly(g1, tooltip = \"text\")"
  },
  {
    "objectID": "slides/week10.html#specifying-text-with-ggplotly-cont.",
    "href": "slides/week10.html#specifying-text-with-ggplotly-cont.",
    "title": "Interactive Visualization",
    "section": "Specifying text with ggplotly() (cont.)",
    "text": "Specifying text with ggplotly() (cont.)"
  },
  {
    "objectID": "slides/week10.html#histograms",
    "href": "slides/week10.html#histograms",
    "title": "Interactive Visualization",
    "section": "Histograms",
    "text": "Histograms\n\nFor plot_ly() use the type = \"histogram\" argument\nNote that list() is used to input keys with multiple values (e.g. xbins)\n\n\ng1 &lt;- cv_states_today |&gt; \n  plot_ly(x = ~new_deaths, type = \"histogram\", xbins = list(size = 1, end=30 ))\ng2 &lt;- cv_states_today |&gt; ggplot( aes(x=new_deaths)) + geom_histogram(binwidth=1)\ng2_plotly &lt;- ggplotly(g2)\nsubplot(g1, g2_plotly)"
  },
  {
    "objectID": "slides/week10.html#histograms-cont.",
    "href": "slides/week10.html#histograms-cont.",
    "title": "Interactive Visualization",
    "section": "Histograms (cont.)",
    "text": "Histograms (cont.)\n         `plot_ly()`                        `ggplotly()`"
  },
  {
    "objectID": "slides/week10.html#heatmap",
    "href": "slides/week10.html#heatmap",
    "title": "Interactive Visualization",
    "section": "Heatmap",
    "text": "Heatmap\n\nHeatmaps are useful for displaying three dimensional data in two dimensions, using color for the third dimension.\nTo create a heatmap from a data frame we first have to create a matrix out of the three dimensions we want to include. We can do this using the pivot_wider() function from tidyr (there are many other options)\nHere we are choosing date, state, and newdeathsper100k to show in our heatmap:\n\n\ncv_states_mat &lt;- cv_states |&gt; \n            select(state, date, newdeathsper100k) |&gt; \n            filter(date&gt;\"2020-03-31\") |&gt; \n            filter(newdeathsper100k &lt; 10)\ncv_states_mat2 &lt;- as.data.frame(pivot_wider(cv_states_mat,\n                                            names_from = state,\n                                            values_from = newdeathsper100k))\nrownames(cv_states_mat2) &lt;- cv_states_mat2$date\ncv_states_mat2$date &lt;- NULL\nhead(cv_states_mat2)"
  },
  {
    "objectID": "slides/week10.html#heatmap-cont.-1",
    "href": "slides/week10.html#heatmap-cont.-1",
    "title": "Interactive Visualization",
    "section": "Heatmap (cont. 1)",
    "text": "Heatmap (cont. 1)\n\nhead(cv_states_mat2)\n\n           Alabama Alaska Arizona Arkansas California Colorado Connecticut\n2020-04-01     0.3    0.0     0.1      0.1        0.1      0.2         0.4\n2020-04-02     0.1    0.0     0.1      0.1        0.1      0.3         0.8\n2020-04-03     0.1    0.0     0.1      0.0        0.1      0.3         0.6\n2020-04-04     0.1    0.1     0.2      0.1        0.1      0.3         0.9\n2020-04-05     0.0    0.1     0.2      0.1        0.1      0.3         0.7\n2020-04-06     0.2    0.0     0.0      0.0        0.1      0.2         0.5\n           Delaware District of Columbia Florida Georgia Guam Hawaii Idaho\n2020-04-01      0.1                  0.3     0.1     0.3  0.6    0.0   0.0\n2020-04-02      0.1                  0.2     0.2     0.2  0.0    0.1   0.0\n2020-04-03      0.2                  0.5     0.1     0.2  0.6    0.1   0.1\n2020-04-04      0.0                  1.0     0.1     0.1  0.0    0.0   0.0\n2020-04-05      0.0                  0.2     0.1     0.1  0.0    0.1   0.0\n2020-04-06      0.1                  0.3     0.2     0.8  0.0    0.1   0.2\n           Illinois Indiana Iowa Kansas Kentucky Louisiana Maine Maryland\n2020-04-01      0.3     0.3  0.1    0.0      0.0       0.8   0.2      0.3\n2020-04-02      0.1     0.2  0.1    0.1      0.3       0.8   0.0      0.1\n2020-04-03      0.4     0.4  0.0    0.2      0.0       1.3   0.2      0.1\n2020-04-04      0.3     0.3  0.0    0.1      0.1       0.9   0.1      0.2\n2020-04-05      0.3     0.2  0.4    0.1      0.1       1.4   0.0      0.2\n2020-04-06      0.2     0.3  0.1    0.1      0.2       0.8   0.0      0.4\n           Massachusetts Michigan Minnesota Mississippi Missouri Montana\n2020-04-01           0.5      0.7       0.1         0.1      0.1     0.0\n2020-04-02           0.5      0.8       0.0         0.1      0.1     0.0\n2020-04-03           0.6      0.6       0.1         0.1      0.1     0.0\n2020-04-04           0.4      0.6       0.0         0.2      0.1     0.1\n2020-04-05           0.2      0.8       0.1         0.3      0.1     0.0\n2020-04-06           0.4      1.1       0.0         0.3      0.1     0.0\n           Nebraska Nevada New Hampshire New Jersey New Mexico New York\n2020-04-01      0.1    0.2           0.1        1.0        0.0      2.5\n2020-04-02      0.1    0.2           0.1        2.1        0.0      2.8\n2020-04-03      0.0    0.2           0.2        1.2        0.1      3.9\n2020-04-04      0.1    0.1           0.2        2.3        0.0      4.2\n2020-04-05      0.0    0.0           0.0        0.8        0.0      4.1\n2020-04-06      0.1    0.4           0.0        1.0        0.0      4.2\n           North Carolina North Dakota Northern Mariana Islands Ohio Oklahoma\n2020-04-01            0.0            0                      1.8  0.1      0.2\n2020-04-02            0.1            0                      0.0  0.1      0.1\n2020-04-03            0.1            0                      0.0  0.1      0.1\n2020-04-04            0.1            0                      0.0  0.1      0.1\n2020-04-05            0.1            0                      0.0  0.1      0.1\n2020-04-06            0.1            0                      0.0  0.2      0.1\n           Oregon Pennsylvania Puerto Rico Rhode Island South Carolina\n2020-04-01    0.0          0.0         0.1          0.2            0.1\n2020-04-02    0.1          0.1         0.0          0.2            0.1\n2020-04-03    0.0          0.1         0.1          0.2            0.1\n2020-04-04    0.1          0.3         0.1          0.3            0.1\n2020-04-05    0.0          0.1         0.1          0.8            0.1\n2020-04-06    0.1          0.1         0.0          0.2            0.1\n           South Dakota Tennessee Texas Utah Vermont Virgin Islands Virginia\n2020-04-01          0.0       0.2   0.0  0.1     0.5            0.0      0.0\n2020-04-02          0.1       0.1   0.1  0.0     0.2            0.0      0.0\n2020-04-03          0.0       0.1   0.1  0.0     0.0            0.0      0.3\n2020-04-04          0.0       0.1   0.1  0.0     0.5            0.0      0.1\n2020-04-05          0.0       0.0   0.0  0.0     0.3            0.0      0.0\n2020-04-06          0.2       0.2   0.1  0.2     0.2            0.9      0.0\n           Washington West Virginia Wisconsin Wyoming\n2020-04-01        0.4           0.1       0.1       0\n2020-04-02        0.3           0.0       0.1       0\n2020-04-03        0.3           0.0       0.2       0\n2020-04-04        0.4           0.0       0.2       0\n2020-04-05        0.4           0.1       0.2       0\n2020-04-06        0.6           0.1       0.2       0"
  },
  {
    "objectID": "slides/week10.html#heatmap-cont.-2",
    "href": "slides/week10.html#heatmap-cont.-2",
    "title": "Interactive Visualization",
    "section": "Heatmap (cont. 2)",
    "text": "Heatmap (cont. 2)\n\nWe can then create a heatmap from the matrix by using the type = \"heatmap\" argument\nIf you want the x and y axes to show specify that with x=colnames(data), y=rownames(data)\nYou can hide or show scale using showscale=T/F\n\n\ndata &lt;- as.matrix(cv_states_mat2)\n\nplot_ly(x=colnames(data), y=rownames(data),\n             z=~data,\n             type=\"heatmap\",\n             showscale=T)"
  },
  {
    "objectID": "slides/week10.html#heatmap-cont.-3",
    "href": "slides/week10.html#heatmap-cont.-3",
    "title": "Interactive Visualization",
    "section": "Heatmap (cont. 3)",
    "text": "Heatmap (cont. 3)\n\n\n\n\n\n\nWe can see when new deaths started to rise and fall for each state. No other state approached the values seen in NY. The hover info conveniently allows us to inspect the exact date and number of new deaths."
  },
  {
    "objectID": "slides/week10.html#d-surface",
    "href": "slides/week10.html#d-surface",
    "title": "Interactive Visualization",
    "section": "3D Surface",
    "text": "3D Surface\nYou can also create a 3D surface out of the matrix using type = \"surface\"\n\nplot_ly(x=colnames(cv_states_mat2), y=rownames(cv_states_mat2),\n             z=~cv_states_mat2,\n             type=\"surface\",\n             showscale=F)"
  },
  {
    "objectID": "slides/week10.html#d-surface-cont.",
    "href": "slides/week10.html#d-surface-cont.",
    "title": "Interactive Visualization",
    "section": "3D Surface (cont.)",
    "text": "3D Surface (cont.)"
  },
  {
    "objectID": "slides/week10.html#choropleth-maps-setup",
    "href": "slides/week10.html#choropleth-maps-setup",
    "title": "Interactive Visualization",
    "section": "Choropleth Maps: Setup",
    "text": "Choropleth Maps: Setup\nChoropleth maps illustrate data across geographic areas by shading regions with different colors. Choropleth maps are easy to make with Plotly though they require more setup compared to other Plotly graphics.\nMaking choropleth maps requires two main types of input:\n\nGeometry information: This can be supplied using:\n\n\nGeoJSON file where each feature has either an id field or some identifying value in properties\nor a built-in geometry within plot_ly: US states and world countries\n\n\nA list of values indexed by feature identifier\n\nThe GeoJSON data is passed to the geojson argument, and the data is passed into the z argument of the choropleth trace"
  },
  {
    "objectID": "slides/week10.html#choropleth-maps-setup-cont.-1",
    "href": "slides/week10.html#choropleth-maps-setup-cont.-1",
    "title": "Interactive Visualization",
    "section": "Choropleth Maps: Setup (cont. 1)",
    "text": "Choropleth Maps: Setup (cont. 1)\n\nLet’s focus on interactively mapping the feature naive_CFR to each of the US states, including their boundaries\nTo use the USA States geometry, set locationmode='USA-states' and provide locations as two-letter state abbreviations\nOur cv_states identifies states by their long names, so we need to transpose to their abbreviations first\n\n\ncv_CFR &lt;- cv_states_today |&gt; select(state, naive_CFR) # select data\n\n# Get state abbreviations and map to state names\nst_crosswalk &lt;- tibble(state = state.name) |&gt;\n   bind_cols(tibble(abb = state.abb)) |&gt; \n   bind_rows(tibble(state = \"District of Columbia\", abb = \"DC\"))\ncv_CFR2 &lt;- left_join(cv_CFR, st_crosswalk, by = \"state\")\ncv_CFR2$state.name &lt;- cv_CFR2$state\ncv_CFR2$state &lt;- cv_CFR2$abb\ncv_CFR2$abb &lt;- NULL"
  },
  {
    "objectID": "slides/week10.html#choropleth-maps-setup-cont.-2",
    "href": "slides/week10.html#choropleth-maps-setup-cont.-2",
    "title": "Interactive Visualization",
    "section": "Choropleth Maps: Setup (cont. 2)",
    "text": "Choropleth Maps: Setup (cont. 2)\n\nHover text can be specified within the data frame (this is true for any plot_ly() object)\n\n\n# Create hover text\ncv_CFR2$hover &lt;- with(cv_CFR, paste(state.name, '&lt;br&gt;', \"CFR:\", naive_CFR))\n\n# Set up mapping details\nset_map_details &lt;- list(\n  scope = 'usa',\n  projection = list(type = 'albers usa'),\n  showlakes = TRUE,\n  lakecolor = toRGB('white')\n)"
  },
  {
    "objectID": "slides/week10.html#choropleth-maps-mapping",
    "href": "slides/week10.html#choropleth-maps-mapping",
    "title": "Interactive Visualization",
    "section": "Choropleth Maps: Mapping",
    "text": "Choropleth Maps: Mapping\n\nRecall: To use the USA States geometry, set locationmode='USA-states'\nSpecify the map projection details inside layout()\n\n\n# Create the map\nfig &lt;- plot_geo(cv_CFR2, locationmode = 'USA-states') |&gt; \n  add_trace(\n    z = ~naive_CFR, \n    text = ~hover, \n    locations = ~state,\n    color = ~naive_CFR, \n    colors = 'Blues'\n  )\nfig &lt;- fig |&gt; colorbar(title = \"CFR\")\nfig &lt;- fig |&gt; layout(\n    title = paste('CFR by State as of', Sys.Date(), '&lt;br&gt;(Hover for value)'),\n    geo = set_map_details\n  )"
  },
  {
    "objectID": "slides/week10.html#choropleth-maps-mapping-cont.",
    "href": "slides/week10.html#choropleth-maps-mapping-cont.",
    "title": "Interactive Visualization",
    "section": "Choropleth Maps: Mapping (cont.)",
    "text": "Choropleth Maps: Mapping (cont.)\n\n\n\n\n\n\nThe northeast was hit hard with high CFRs. It would be interesting to see this map at different time points."
  },
  {
    "objectID": "slides/week10.html#a-note-on-interactive-mapping",
    "href": "slides/week10.html#a-note-on-interactive-mapping",
    "title": "Interactive Visualization",
    "section": "A note on interactive mapping",
    "text": "A note on interactive mapping\n\nThere are in fact 4 different ways to render interactive maps with plotly: plot_geo(), plot_ly(), plot_mapbox(), and via ggplot2’s geom_sf().\nPlotly is a general purpose visualization library and doesn’t offer most fully featured geo-spatial visualization toolkit. If you run into limitations with plotly’s mapping functionality there are many other tools for interactive geospatial visualization in R, including: leaflet, mapview, mapedit, tmap, and mapdeck."
  },
  {
    "objectID": "slides/week10.html#interactive-tables-1",
    "href": "slides/week10.html#interactive-tables-1",
    "title": "Interactive Visualization",
    "section": "Interactive tables",
    "text": "Interactive tables"
  },
  {
    "objectID": "slides/week10.html#saving-and-embedding-html",
    "href": "slides/week10.html#saving-and-embedding-html",
    "title": "Interactive Visualization",
    "section": "Saving and embedding HTML",
    "text": "Saving and embedding HTML\nAny widget made from any htmlwidgets package (e.g., plotly, leaflet, DT, etc.) can be saved as a standalone HTML file via the htmlwidgets::saveWidget() function. By default, it produces a completely self-contained HTML file, meaning that all the necessary JavaScript and CSS dependency files are bundled inside the HTML file.\nIf you want to embed numerous widgets in a larger HTML document, save all the dependency files externally into a single directory. You can do this by setting selfcontained = FALSE and specifying a fixed libdir in saveWidget():\n\nlibrary(htmlwidgets)\np &lt;- plot_ly(x = rnorm(100))\nsaveWidget(p, \"p1.html\", selfcontained = F, libdir = \"lib\")\nsaveWidget(p, \"p2.html\", selfcontained = F, libdir = \"lib\")"
  },
  {
    "objectID": "slides/week10.html#saving-a-static-image",
    "href": "slides/week10.html#saving-a-static-image",
    "title": "Interactive Visualization",
    "section": "Saving a static image",
    "text": "Saving a static image\n\nWith code (convenient if you need to output many static images): Any plotly object can be saved as a static image via the orca() function.\nFrom a browser (convenient if you want to manually post-process an image): By default, the ‘download plot’ icon in the modebar will download to PNG and use the height and width of the plot, but these defaults can be altered via the plot’s configuration, e.g.\n\n\nplot_ly() |&gt;\n  config(\n    toImageButtonOptions = list(\n      format = \"svg\",\n      filename = \"myplot\",\n      width = 600,\n      height = 700\n    )\n  )"
  },
  {
    "objectID": "slides/week10.html#avoid-pitfals",
    "href": "slides/week10.html#avoid-pitfals",
    "title": "Interactive Visualization",
    "section": "Avoid pitfals",
    "text": "Avoid pitfals\n\nDon’t overcomplicate!\nOnly use when adding value!\nSome examples of bad practices: (link)\nAnd just hilariously bad examples: (link)"
  },
  {
    "objectID": "slides/week10.html#more-resources",
    "href": "slides/week10.html#more-resources",
    "title": "Interactive Visualization",
    "section": "More Resources",
    "text": "More Resources\nPlotly\n\nPlolty R Reference\nThe Plotly R API\nThe Plotly R Package on GitHub\nThe Plotly R Cheatsheet\n“Plotly for R” book by Carson Sievert\n\nshiny and dashboards\n\nThe Shiny Website\nR Markdown: The Definitive Guide, Chapter 5: Dashboards (Layout, Components, Shiny)"
  },
  {
    "objectID": "slides/week10.html#more-resources-cont.",
    "href": "slides/week10.html#more-resources-cont.",
    "title": "Interactive Visualization",
    "section": "More Resources (cont.)",
    "text": "More Resources (cont.)\nWebsite development\n\nCreating websites with Quarto\nTutorial: Creating websites in R, Emily C. Zabor\n\nCreating websites with R Markdown: advanced website creation with blogdown, Hugo, Jeckyll\n\nData visualization best practices\n\nData Visualization: A Practical Introduction, Kieran Healy\nFundamentals of Data Visualization, Claus O. Wilke"
  },
  {
    "objectID": "slides/week05.html#todays-goals",
    "href": "slides/week05.html#todays-goals",
    "title": "Week 5: Data Wrangling",
    "section": "Today’s goals",
    "text": "Today’s goals\nWe will learn about how to manipulate data, and in particular,\n\nSelecting variables.\nFiltering data.\nCreating variables.\nSummarize data.\n\nThroughout the session we will see examples using:\n\ndata.table in R,\ndtplyr in R, and\npydatatable\n\nAll with the MET dataset."
  },
  {
    "objectID": "slides/week05.html#disclaimer",
    "href": "slides/week05.html#disclaimer",
    "title": "Week 5: Data Wrangling",
    "section": "Disclaimer",
    "text": "Disclaimer\nThere’s a lot of extraneous information in these slides! While the data.table package and Python both have a lot of useful functionality, we strongly recommend sticking to the base R and tidyverse tools presented here. Slides covering material outside this scope will be marked with an asterisk (*); you should be extremely cautious about using code from those slides!"
  },
  {
    "objectID": "slides/week05.html#data-wrangling-in-r",
    "href": "slides/week05.html#data-wrangling-in-r",
    "title": "Week 5: Data Wrangling",
    "section": "Data wrangling in R",
    "text": "Data wrangling in R\nOverall, you will find the following approaches:\n\nbase R: Use only base R functions.\ndplyr: Using “verbs”.\ndata.table: High-performing (ideal for large data)\ndplyr + data.table = dtplyr: High-performing + dplyr verbs.\n\nOther methods involve, for example, using external tools such as Spark, sparkly.\nWe will be focusing on data.table because of this\nTake a look at this very neat cheat sheet by Erik Petrovski here."
  },
  {
    "objectID": "slides/week05.html#selecting-variables-load-the-packages",
    "href": "slides/week05.html#selecting-variables-load-the-packages",
    "title": "Week 5: Data Wrangling",
    "section": "Selecting variables: Load the packages",
    "text": "Selecting variables: Load the packages\n\nlibrary(data.table)\nlibrary(dtplyr)\nlibrary(dplyr)\nlibrary(ggplot2)\n\nThe dtplyr R package translates dplyr (tidyverse) syntax to data.table, so that we can still use the dplyr verbs while at the same time leveraging the performance of data.table."
  },
  {
    "objectID": "slides/week05.html#loading-the-data",
    "href": "slides/week05.html#loading-the-data",
    "title": "Week 5: Data Wrangling",
    "section": "Loading the data",
    "text": "Loading the data\nThe data that we will be using is an already processed version of the MET dataset. We can download (and load) the data directly in our session using the following commands:\n\n# Where are we getting the data from\nmet_url &lt;- \"https://github.com/USCbiostats/data-science-data/raw/master/02_met/met_all.gz\"\n\n# Downloading the data to a tempfile (so it is destroyed afterwards)\n# you can replace this with, for example, your own data:\ntmp &lt;- tempfile(pattern = \"met\", fileext = \".gz\")\n# tmp &lt;- \"met.gz\"\n\n# We should be downloading this, ONLY IF this was not downloaded already.\n# otherwise is just a waste of time.\nif (!file.exists(tmp)) {\n  download.file(\n    url      = met_url,\n    destfile = tmp,\n    # method   = \"libcurl\", timeout = 1000 (you may need this option)\n  )\n}\n\nNow we can load the data using the read.csv() or fread() functions."
  },
  {
    "objectID": "slides/week05.html#read-the-data",
    "href": "slides/week05.html#read-the-data",
    "title": "Week 5: Data Wrangling",
    "section": "Read the Data",
    "text": "Read the Data\nIn R (base)\n\n# Reading the data\ndat &lt;- read.csv(tmp)\nhead(dat)\n\nIn R (data.table)\n\n# Reading the data\ndat &lt;- fread(tmp)\nhead(dat)\ndat &lt;- as.data.frame(dat)\n\nIn Python\n\nimport datatable as dt\ndat = dt.fread(\"met.gz\")\ndat.head(5)\n\nBefore we continue, let’s learn a bit more on data.table and dtplyr"
  },
  {
    "objectID": "slides/week05.html#data.table-and-dtplyr-data-tables-syntax",
    "href": "slides/week05.html#data.table-and-dtplyr-data-tables-syntax",
    "title": "Week 5: Data Wrangling",
    "section": "* data.table and dtplyr: Data Table’s Syntax",
    "text": "* data.table and dtplyr: Data Table’s Syntax\n\nAs you have seen in previous lectures, in data.table all happens within the square brackets. Here is common way to imagine DT:\n\n\n\nAny time that you see := in j that is “Assignment by reference.” Using = within j only works in some specific cases."
  },
  {
    "objectID": "slides/week05.html#data.table-and-dtplyr-data-tables-syntax-1",
    "href": "slides/week05.html#data.table-and-dtplyr-data-tables-syntax-1",
    "title": "Week 5: Data Wrangling",
    "section": "* data.table and dtplyr: Data Table’s Syntax",
    "text": "* data.table and dtplyr: Data Table’s Syntax\nOperations applied in j are evaluated within the data, meaning that names work as symbols, e.g.,\n\ndata(\"USArrests\")\nUSArrests_dt &lt;- data.table(USArrests)\n# This returns an error\nUSArrests[, Murder]\n# This works fine\nUSArrests_dt[, Murder]\n\nFurthermore, we can do things like this:\n\nUSArrests_dt[, plot(Murder, UrbanPop)]\n\n\nNULL"
  },
  {
    "objectID": "slides/week05.html#data.table-and-dtplyr-lazy-table",
    "href": "slides/week05.html#data.table-and-dtplyr-lazy-table",
    "title": "Week 5: Data Wrangling",
    "section": "* data.table and dtplyr: Lazy table",
    "text": "* data.table and dtplyr: Lazy table\n\nThe dtplyr package provides a way to translate dplyr verbs to data.table syntax.\nThe key lies on the function lazy_dt from dtplyr (see ?dtplyr::lazy_dt).\nThis function creates a wrapper that “points” to a data.table object"
  },
  {
    "objectID": "slides/week05.html#data.table-and-dtplyr-lazy-table-cont.",
    "href": "slides/week05.html#data.table-and-dtplyr-lazy-table-cont.",
    "title": "Week 5: Data Wrangling",
    "section": "* data.table and dtplyr: Lazy table (cont.)",
    "text": "* data.table and dtplyr: Lazy table (cont.)\n\nQuestion: What is the immutable = FALSE option used for?"
  },
  {
    "objectID": "slides/week05.html#selecting-columns",
    "href": "slides/week05.html#selecting-columns",
    "title": "Week 5: Data Wrangling",
    "section": "* Selecting columns",
    "text": "* Selecting columns\nHow can we select the columns USAFID, lat, and lon, using data.table:\n\ndat[, list(USAFID, lat, lon)]\n# dat[, .(USAFID, lat, lon)]       # Alternative 1\n# dat[, c(\"USAFID\", \"lat\", \"lon\")] # Alternative 2\n\nWhat happens if instead of list() you used c()?"
  },
  {
    "objectID": "slides/week05.html#selecting-columns-cont.-1",
    "href": "slides/week05.html#selecting-columns-cont.-1",
    "title": "Week 5: Data Wrangling",
    "section": "Selecting columns (cont. 1)",
    "text": "Selecting columns (cont. 1)\nUsing base R:\n\nhead(\n  dat[, c('USAFID', 'lat', 'lon')]\n)\n\n  USAFID  lat      lon\n1 690150 34.3 -116.166\n2 690150 34.3 -116.166\n3 690150 34.3 -116.166\n4 690150 34.3 -116.166\n5 690150 34.3 -116.166\n6 690150 34.3 -116.166"
  },
  {
    "objectID": "slides/week05.html#selecting-columns-cont.-2",
    "href": "slides/week05.html#selecting-columns-cont.-2",
    "title": "Week 5: Data Wrangling",
    "section": "Selecting columns (cont. 2)",
    "text": "Selecting columns (cont. 2)\nUsing the dplyr::select verb:\n\ndat |&gt; select(USAFID, lat, lon) |&gt; head()\n\n  USAFID  lat      lon\n1 690150 34.3 -116.166\n2 690150 34.3 -116.166\n3 690150 34.3 -116.166\n4 690150 34.3 -116.166\n5 690150 34.3 -116.166\n6 690150 34.3 -116.166"
  },
  {
    "objectID": "slides/week05.html#selecting-columns-cont.-3",
    "href": "slides/week05.html#selecting-columns-cont.-3",
    "title": "Week 5: Data Wrangling",
    "section": "* Selecting columns (cont. 3)",
    "text": "* Selecting columns (cont. 3)\nIn the case of pydatatable\n\ndat[:,[\"USAFID\", \"lat\", \"lon\"]]\n\nWhat happens if instead of [\"USAFID\", \"lat\", \"lon\"] you used {\"USAFID\", \"lat\", \"lon\"} (vector vs set)."
  },
  {
    "objectID": "slides/week05.html#data-filtering-logical-conditions",
    "href": "slides/week05.html#data-filtering-logical-conditions",
    "title": "Week 5: Data Wrangling",
    "section": "Data filtering: Logical conditions",
    "text": "Data filtering: Logical conditions\n\nBased on logical operations, e.g. condition 1 [and|or condition2 [and|or ...]]\nNeed to be aware of ordering and grouping of and and or operators.\nFundamental logical operators:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nx\ny\nNegate!x\nAndx & y\nOrx | y\nXorxor(x, y)\n\n\n\n\ntrue\ntrue\nfalse\ntrue\ntrue\nfalse\n\n\nfalse\ntrue\ntrue\nfalse\ntrue\ntrue\n\n\ntrue\nfalse\nfalse\nfalse\ntrue\ntrue\n\n\nfalse\nfalse\ntrue\nfalse\nfalse\nfalse\n\n\n\n\n\n\nFundamental relational operators, in R: &lt;, &gt;, &lt;=, &gt;=, ==, !=."
  },
  {
    "objectID": "slides/week05.html#questions-1-how-many-ways-can-you-write-an-xor-operator",
    "href": "slides/week05.html#questions-1-how-many-ways-can-you-write-an-xor-operator",
    "title": "Week 5: Data Wrangling",
    "section": "Questions 1: How many ways can you write an XOR operator?",
    "text": "Questions 1: How many ways can you write an XOR operator?\nWrite a function that takes two arguments (x,y) and applies the XOR operator element wise. Here you have a template:\nmyxor &lt;- function(x, y) {\n  res &lt;- logical(length(x))\n  for (i in 1:length(x)) {\n    res[i] &lt;- # do something with x[i] and y[i]\n  }\n  return(res)\n}\nOr if vectorized (which would be better)\nmyxor &lt;- function(x, y) {\n  # INSERT YOUR CODE HERE\n}\nHint 1: Remember that negating (x & y) equals (!x | !y).\nHint 2: Logical operators are a distributive, meaning a * (b + c) = (a * b) + (a + c), where * and + are & or |."
  },
  {
    "objectID": "slides/week05.html#or-in-python",
    "href": "slides/week05.html#or-in-python",
    "title": "Week 5: Data Wrangling",
    "section": "* Or in python",
    "text": "* Or in python\n\n# Loading the libraries\nimport numpy as np\nimport pandas as pa\n\n# Defining the data\nx = [True, True, False, False]\ny = [False, True, True, False]\nans = {\n    'x'   : x,\n    'y'   : y,\n    'and' : np.logical_and(x, y),\n    'or'  : np.logical_or(x, y),\n    'xor' : np.logical_xor(x, y)\n    }\npa.DataFrame(ans)"
  },
  {
    "objectID": "slides/week05.html#or-in-python-bis",
    "href": "slides/week05.html#or-in-python-bis",
    "title": "Week 5: Data Wrangling",
    "section": "* Or in python (bis)",
    "text": "* Or in python (bis)\n\ndef myxor(x,y):\n    return np.logical_or(\n        np.logical_and(x, np.logical_not(y)),\n        np.logical_and(np.logical_not(x), y)\n    )\n\nans['myxor'] = myxor(x,y)\npa.DataFrame(ans)\n\nWe will now see applications using the met dataset"
  },
  {
    "objectID": "slides/week05.html#filtering-subsetting-the-data",
    "href": "slides/week05.html#filtering-subsetting-the-data",
    "title": "Week 5: Data Wrangling",
    "section": "Filtering (subsetting) the data",
    "text": "Filtering (subsetting) the data\nSay we need to select records according to some criteria. For example:\n\nFirst day of the month, and\nAbove latitude 40, and\nElevation outside the range 500 and 1,000.\n\nThe logical expressions would be\n\n(day == 1)\n(lat &gt; 40)\n((elev &lt; 500) | (elev &gt; 1000))\n\nRespectively."
  },
  {
    "objectID": "slides/week05.html#data.table",
    "href": "slides/week05.html#data.table",
    "title": "Week 5: Data Wrangling",
    "section": "* data.table",
    "text": "* data.table\nIn R with data.table:\n\ndat[(day == 1) & (lat &gt; 40) & ((elev &lt; 500) | (elev &gt; 1000))] |&gt;\n  nrow()"
  },
  {
    "objectID": "slides/week05.html#questions-2",
    "href": "slides/week05.html#questions-2",
    "title": "Week 5: Data Wrangling",
    "section": "Questions 2",
    "text": "Questions 2\n\nHow many records have a temperature within 18 and 25?\nSome records have missing values. Count how many records have temp as NA.\nFollowing the previous question, plot a sample of 1,000 pairs of (lat, lon) coordinates for (a) the stations with temp as NA and (b) those with data."
  },
  {
    "objectID": "slides/week05.html#solutions",
    "href": "slides/week05.html#solutions",
    "title": "Week 5: Data Wrangling",
    "section": "Solutions",
    "text": "Solutions\n\n# Question 1\nnrow(dat[dat$temp &lt; 25 & dat$temp &gt; 18, ])\n# dat[temp %between% c(18, 25), .N] \n# dat |&gt; filter(between(temp, 18, 25)) |&gt; nrow()\n\n# Question 2\nnrow(dat[is.na(dat$temp), ])\n# more succinct: sum(is.na(dat$temp))\n\n[1] 968136\n[1] 60089"
  },
  {
    "objectID": "slides/week05.html#solutions-cont.",
    "href": "slides/week05.html#solutions-cont.",
    "title": "Week 5: Data Wrangling",
    "section": "Solutions (cont.)",
    "text": "Solutions (cont.)\n\n# Question 3\n# Drawing a sample\nset.seed(123)\nidx1 &lt;- sample(which(is.na(dat$temp)), 1000)\nidx2 &lt;- sample(which(!is.na(dat$temp)), 1000)\n\n# Visualizing the data\n# make a map of the US, as we did last class\nggplot(map_data(\"state\"), aes(x = long, y = lat)) +\n  geom_map(aes(map_id = region), map = map_data(\"state\"), col = \"lightgrey\", fill = \"gray\") +\n  geom_jitter(\n    data    = dat[c(idx1, idx2), ],\n    mapping = aes(x = lon, y = lat, col = is.na(temp)),\n    inherit.aes = FALSE, alpha = .5, cex = 2\n    )"
  },
  {
    "objectID": "slides/week05.html#creating-variables-data-types",
    "href": "slides/week05.html#creating-variables-data-types",
    "title": "Week 5: Data Wrangling",
    "section": "Creating variables: Data types",
    "text": "Creating variables: Data types\n\nlogical: Bool true/false type, e.g. dead/alive, sick/healthy, good/bad, yes/no, etc.\nstrings: string of characters (letters/symbols), e.g. names, text, etc.\ninteger: Numeric variable with no decimal (discrete), e.g. age, days, counts, etc.\ndouble: Numeric variable with decimals (continuous), e.g. distance, expression level, time.\n\nIn C (and other languages), strings, integers, and doubles may be specified with size, e.g. in python integers can be of 9, 16, and 32 bits. This is relevant when managing large datasets, where saving space can be fundamental (more info)."
  },
  {
    "objectID": "slides/week05.html#creating-variables-special-data-types",
    "href": "slides/week05.html#creating-variables-special-data-types",
    "title": "Week 5: Data Wrangling",
    "section": "Creating variables: Special data types",
    "text": "Creating variables: Special data types\nMost programming languages have special types which are built using basic types. A few examples:\n\ntime: Could be date, date + time, or a combination of both. Usually it has a reference number defined as date 0. In R, the Date class has as reference 1970-01-01, in other words, “days since January 1st, 1970”.\ncategorical: Commonly used to represent strata/levels of variables, e.g. a variable “country” could be represented as a factor, where the data is stored as numbers but has a label.\nordinal: Similar to factor, but it has ordering, e.g. “satisfaction level: 5 very satisfied, …, 1 very unsatisfied”.\n\nOther special data types could be ways to represent missings (usually described as na or NA), or special numeric types, e.g. +-Inf and Undefined (NaN).\nWhen storing/sharing datasets, it is a good practice to do it along a dictionary describing each column data type/format."
  },
  {
    "objectID": "slides/week05.html#questions-3-whats-the-best-way-to-represent-the-following",
    "href": "slides/week05.html#questions-3-whats-the-best-way-to-represent-the-following",
    "title": "Week 5: Data Wrangling",
    "section": "Questions 3: What’s the best way to represent the following",
    "text": "Questions 3: What’s the best way to represent the following\n\n0, 1, 1, 0, 0, 1\nDiabetes type 1, Diabetes type 2, Diabetes type 1, Diabetes type 2\non, off, off, on, on, on\n5, 10, 1, 15, 0, 0, 1\n1.0, 2.0, 10.0, 6.0\nhigh, low, medium, medium, high\n-1, 1, -1, -1, 1,\n.2, 1.5, .8, \\(\\pi\\)\n\\(\\pi\\), \\(\\exp{1}\\), \\(\\pi\\), \\(\\pi\\)"
  },
  {
    "objectID": "slides/week05.html#variable-creation",
    "href": "slides/week05.html#variable-creation",
    "title": "Week 5: Data Wrangling",
    "section": "Variable creation",
    "text": "Variable creation\nIf we wanted to create two variables, elev^2 and the scaled version of wind.sp by it’s standard error, we could do the following\n\ndat$elev2 &lt;- dat$elev^2\ndat$windsp_scaled &lt;- dat$wind.sp / sd(dat$wind.sp, na.rm = TRUE)"
  },
  {
    "objectID": "slides/week05.html#variable-creation-cont.-1",
    "href": "slides/week05.html#variable-creation-cont.-1",
    "title": "Week 5: Data Wrangling",
    "section": "Variable creation (cont. 1)",
    "text": "Variable creation (cont. 1)\nWith the verb dplyr::mutate():\n\ndat |&gt;\n  mutate(\n    elev2         = elev ^ 2,\n    windsp_scaled = wind.sp / sd(wind.sp,na.rm=TRUE)\n  ) |&gt;\n  head()\n\n  USAFID  WBAN year month day hour min  lat      lon elev wind.sp temp\n1 690150 93121 2019     8   1    0  56 34.3 -116.166  696     5.7 37.2\n2 690150 93121 2019     8   1    1  56 34.3 -116.166  696     8.2 35.6\n3 690150 93121 2019     8   1    2  56 34.3 -116.166  696     6.7 34.4\n4 690150 93121 2019     8   1    3  56 34.3 -116.166  696     5.1 33.3\n5 690150 93121 2019     8   1    4  56 34.3 -116.166  696     2.1 32.8\n6 690150 93121 2019     8   1    5  56 34.3 -116.166  696     0.0 31.1\n  atm.press  elev2 windsp_scaled\n1    1009.9 484416      2.654379\n2    1010.3 484416      3.818580\n3    1010.6 484416      3.120059\n4    1011.6 484416      2.374970\n5    1012.7 484416      0.977929\n6    1012.7 484416      0.000000"
  },
  {
    "objectID": "slides/week05.html#variable-creation-cont.-2",
    "href": "slides/week05.html#variable-creation-cont.-2",
    "title": "Week 5: Data Wrangling",
    "section": "Variable creation (cont. 2)",
    "text": "Variable creation (cont. 2)\nImagine that we needed to scale multiple variables by their SD and didn’t want to copy-paste this code several times. Here’s how we could do it automatically for a given list of variable names:\n\n# Listing the names\nnames  &lt;- c(\"wind.sp\", \"temp\", \"atm.press\")\n\nfor(var in names){\n  dat[,paste0(var,'_scaled')] &lt;- dat[,var] / sd(dat[,var], na.rm = TRUE)\n}\n\nWhy can’t we use dat$var inside the loop?"
  },
  {
    "objectID": "slides/week05.html#or-with-data.table",
    "href": "slides/week05.html#or-with-data.table",
    "title": "Week 5: Data Wrangling",
    "section": "* Or with data.table",
    "text": "* Or with data.table\n\nin_names  &lt;- c(\"wind.sp\", \"temp\", \"atm.press\")\nout_names &lt;- paste0(in_names, \"_scaled\")\ndat[,\n    c(out_names) := lapply(.SD, function(x) x/sd(x, na.rm = TRUE)), \n    .SDcols = in_names\n    ]\n\n# Looking at the first 6\nhead(dat[, .SD, .SDcols = out_names], n = 4)\n\nKey things to notice here: c(out_names), .SD, and .SDCols."
  },
  {
    "objectID": "slides/week05.html#variable-creation-cont.-3",
    "href": "slides/week05.html#variable-creation-cont.-3",
    "title": "Week 5: Data Wrangling",
    "section": "Variable creation (cont. 3)",
    "text": "Variable creation (cont. 3)\nIn the case of dplyr, we could use the following\n\nnames  &lt;- c(\"wind.sp\", \"temp\", \"atm.press\")\ndat |&gt;\n  mutate(\n    across(\n      all_of(names),\n      function(x) x/sd(x, na.rm = TRUE),\n      .names = \"{col}_scaled2\"\n      )\n  ) |&gt;\n  # Just to print the last columns\n  select(ends_with(\"_scaled2\")) |&gt;\n  head(n = 4)\n\n  wind.sp_scaled2 temp_scaled2 atm.press_scaled2\n1        2.654379     6.139348          248.7889\n2        3.818580     5.875290          248.8874\n3        3.120059     5.677247          248.9613\n4        2.374970     5.495707          249.2077"
  },
  {
    "objectID": "slides/week05.html#complex-variable-creation",
    "href": "slides/week05.html#complex-variable-creation",
    "title": "Week 5: Data Wrangling",
    "section": "Complex variable creation",
    "text": "Complex variable creation\nDon’t forget about loops! for loops and sapply may be slow on a dataset of this size, but they can be quite handy for creating variables that rely on complicated relationships between variables. Consider this a “brute force” approach. Vectorized methods will always be faster, but these can be easier to conceptualize and, in rare cases, may be the only option.\nConsider the problem creating a weird variable: wind.temp. This will take on 4 possible values, based on the temperature and wind speed: cool & still, cool & windy, warm & still, or warm & windy. We will split each variable based on their median value. Note that this code is too slow to actually run on this large dataset."
  },
  {
    "objectID": "slides/week05.html#complex-variable-creation-cont-1",
    "href": "slides/week05.html#complex-variable-creation-cont-1",
    "title": "Week 5: Data Wrangling",
    "section": "Complex variable creation (cont 1)",
    "text": "Complex variable creation (cont 1)\nHere’s how we would do that with the sapply function (and a custom, unnamed function):\n\n# create the new variable one entry at a time\nwind.temp &lt;- sapply(1:nrow(dat), function(i){\n  if(is.na(dat$temp[i]) | is.na(dat$wind.sp[i])){\n    return(NA)\n  }\n  if(dat$temp[i] &lt;= median(dat$temp, na.rm=TRUE)){\n    if(dat$wind.sp[i] &lt;= median(dat$wind.sp, na.rm=TRUE)){\n      return('cool & still')\n    }else{\n      return('cool & windy')\n    }\n  }else{\n    if(dat$wind.sp[i] &lt;= median(dat$wind.sp, na.rm=TRUE)){\n      return('warm & still')\n    }else{\n      return('warm & windy')\n    }\n  }\n})\n\nCheck: what would we need to change to add this variable to our dataset?"
  },
  {
    "objectID": "slides/week05.html#complex-variable-creation-cont-2",
    "href": "slides/week05.html#complex-variable-creation-cont-2",
    "title": "Week 5: Data Wrangling",
    "section": "Complex variable creation (cont 2)",
    "text": "Complex variable creation (cont 2)\nHere’s the code for doing that with a for loop:\n\n# initialize a variable of all missing values\nwind.temp &lt;- rep(NA, nrow(dat))\n# fill in the values one at a time\nfor(i in 1:nrow(dat)){\n  if(is.na(dat$temp[i]) | is.na(dat$wind.sp[i])){\n    return(NA)\n  }else{\n    if(dat$temp[i] &lt;= median(dat$temp, na.rm=TRUE)){\n      if(dat$wind.sp[i] &lt;= median(dat$wind.sp, na.rm=TRUE)){\n        wind.temp[i] &lt;- 'cool & still'\n      }else{\n        wind.temp[i] &lt;- 'cool & windy'\n      }\n    }else{\n      if(dat$wind.sp[i] &lt;= median(dat$wind.sp, na.rm=TRUE)){\n        wind.temp[i] &lt;- 'warm & still'\n      }else{\n        wind.temp[i] &lt;- 'warm & windy'\n      }\n    }\n  }\n}\n\nCheck: why do we need to include na.rm=TRUE when calculating the medians?"
  },
  {
    "objectID": "slides/week05.html#complex-variable-creation-cont-3",
    "href": "slides/week05.html#complex-variable-creation-cont-3",
    "title": "Week 5: Data Wrangling",
    "section": "Complex variable creation (cont 3)",
    "text": "Complex variable creation (cont 3)\nHere’s a simple vectorized approach that will actually run on a large dataset. This works for our current case, but it’s still a brute force approach, because we had to specifically assign every possible value of our new variable. You can imagine that as the number of possible values increases, this code will get increasingly cumbersome.\n\n# initialize a variable of all missing values\nwind.temp &lt;- rep(NA, nrow(dat))\n# assign every possible value by subsetting\nwind.temp[dat$temp &lt;= median(dat$temp, na.rm=TRUE) & \n            dat$wind.sp &lt;= median(dat$wind.sp, na.rm=TRUE)] &lt;- 'cool & still'\nwind.temp[dat$temp &lt;= median(dat$temp, na.rm=TRUE) & \n            dat$wind.sp &gt; median(dat$wind.sp, na.rm=TRUE)] &lt;- 'cool & windy'\nwind.temp[dat$temp &gt; median(dat$temp, na.rm=TRUE) & \n            dat$wind.sp &lt;= median(dat$wind.sp, na.rm=TRUE)] &lt;- 'warm & still'\nwind.temp[dat$temp &gt; median(dat$temp, na.rm=TRUE) & \n            dat$wind.sp &gt; median(dat$wind.sp, na.rm=TRUE)] &lt;- 'warm & windy'\n\nhead(wind.temp)\n\n[1] \"warm & windy\" \"warm & windy\" \"warm & windy\" \"warm & windy\" \"warm & still\"\n[6] \"warm & still\""
  },
  {
    "objectID": "slides/week05.html#merging-data",
    "href": "slides/week05.html#merging-data",
    "title": "Week 5: Data Wrangling",
    "section": "Merging data",
    "text": "Merging data\n\nWhile building the MET dataset, we dropped the State data.\nWe can use the original Stations dataset and merge it to the MET dataset.\nBut we cannot do it right away. We need to process the data somewhat first."
  },
  {
    "objectID": "slides/week05.html#merging-data-cont.-1",
    "href": "slides/week05.html#merging-data-cont.-1",
    "title": "Week 5: Data Wrangling",
    "section": "Merging data (cont. 1)",
    "text": "Merging data (cont. 1)\n\nstations &lt;- fread(\"https://noaa-isd-pds.s3.amazonaws.com/isd-history.csv\")\nstations &lt;- as.data.frame(stations)\nstations$USAF &lt;- as.integer(stations$USAF)\n\n# Dealing with NAs and 999999\nstations$USAF[stations$USAF == 999999] &lt;- NA\nstations$CTRY[stations$CTRY == \"\"] &lt;- NA\nstations$STATE[stations$STATE == \"\"] &lt;- NA\n\n# Selecting the three relevant columns, and keep unique records\nstations &lt;- unique(stations[, c('USAF', 'CTRY', 'STATE')])\n\n# Dropping NAs\nstations &lt;- stations[!is.na(stations$USAF), ]\n\nhead(stations, n = 4)\n\n  USAF CTRY STATE\n1 7018 &lt;NA&gt;  &lt;NA&gt;\n2 7026   AF  &lt;NA&gt;\n3 7070   AF  &lt;NA&gt;\n4 8260 &lt;NA&gt;  &lt;NA&gt;"
  },
  {
    "objectID": "slides/week05.html#merging-data-cont.-2",
    "href": "slides/week05.html#merging-data-cont.-2",
    "title": "Week 5: Data Wrangling",
    "section": "Merging data (cont. 2)",
    "text": "Merging data (cont. 2)\n\nmerge(\n  # Data\n  x     = dat,      \n  y     = stations, \n  # List of variables to match\n  by.x  = \"USAFID\",\n  by.y  = \"USAF\", \n  # Which obs to keep?\n  all.x = TRUE,      \n  all.y = FALSE\n  ) |&gt; nrow()\n\n[1] 2385443\n\n\nThis is more rows! The original dataset, dat, has 2377343. This means that the stations dataset has duplicated IDs. We can fix this:\n\nstations &lt;- stations[!duplicated(stations$USAF), ]"
  },
  {
    "objectID": "slides/week05.html#merging-data-cont.-3",
    "href": "slides/week05.html#merging-data-cont.-3",
    "title": "Week 5: Data Wrangling",
    "section": "Merging data (cont. 3)",
    "text": "Merging data (cont. 3)\nWe now can use the function merge() to add the extra data\n\ndat &lt;- merge(\n  # Data\n  x     = dat,      \n  y     = stations, \n  # List of variables to match\n  by.x  = \"USAFID\",\n  by.y  = \"USAF\", \n  # Which obs to keep?\n  all.x = TRUE,      \n  all.y = FALSE\n  )\n\nhead(dat[, c('USAFID', 'WBAN', 'STATE')], n = 4)\n\n  USAFID  WBAN STATE\n1 690150 93121    CA\n2 690150 93121    CA\n3 690150 93121    CA\n4 690150 93121    CA\n\n\nWhat happens when you change the options all.x and all.y?"
  },
  {
    "objectID": "slides/week05.html#aggregating-data-adding-grouped-variables",
    "href": "slides/week05.html#aggregating-data-adding-grouped-variables",
    "title": "Week 5: Data Wrangling",
    "section": "* Aggregating data: Adding grouped variables",
    "text": "* Aggregating data: Adding grouped variables\n\nMany times we need to either impute some data, or generate variables by strata.\nIf we, for example, wanted to impute missing temperature with the daily state average, we could use by together with the data.table::fcoalesce() function:\n\n\ndat[, temp_imp := fcoalesce(temp, mean(temp, na.rm = TRUE)),\n  by = .(STATE, year, month, day)]"
  },
  {
    "objectID": "slides/week05.html#aggregating-data-adding-grouped-variables-1",
    "href": "slides/week05.html#aggregating-data-adding-grouped-variables-1",
    "title": "Week 5: Data Wrangling",
    "section": "Aggregating data: Adding grouped variables",
    "text": "Aggregating data: Adding grouped variables\n\nIn the case of dplyr, we can do the following using dplyr::group_by() together with dplyr::coalesce():\n\n\ndat &lt;- dat |&gt;\n  group_by(STATE, year, month, day) |&gt;\n  mutate(\n    temp_imp = coalesce(temp, mean(temp, na.rm = TRUE))\n    )"
  },
  {
    "objectID": "slides/week05.html#aggregating-data-adding-grouped-variables-cont.-1",
    "href": "slides/week05.html#aggregating-data-adding-grouped-variables-cont.-1",
    "title": "Week 5: Data Wrangling",
    "section": "Aggregating data: Adding grouped variables (cont. 1)",
    "text": "Aggregating data: Adding grouped variables (cont. 1)\nLet’s see how it looks:\n\n# Preparing for plotting\n# select single station, sort by date\nplotdata &lt;- dat[dat$USAFID == 720172, ]\nplotdata &lt;- plotdata[order(plotdata$year, plotdata$month, plotdata$day, plotdata$hour, plotdata$min), ]\n# Generate an 'x' variable for time\nplotdata$id &lt;- 1:nrow(plotdata)\n\n\nplot(plotdata$id, plotdata$temp, pch=16)\nlines(plotdata$id, plotdata$temp_imp, col=2)"
  },
  {
    "objectID": "slides/week05.html#aggregating-data-adding-grouped-variables-cont.-2",
    "href": "slides/week05.html#aggregating-data-adding-grouped-variables-cont.-2",
    "title": "Week 5: Data Wrangling",
    "section": "Aggregating data: Adding grouped variables (cont. 2)",
    "text": "Aggregating data: Adding grouped variables (cont. 2)\n\nplotdata |&gt;\n  ggplot(aes(x = id)) +\n  geom_point(aes(y = temp)) +\n  geom_line(aes(y = temp_imp, colour = 'red'))"
  },
  {
    "objectID": "slides/week05.html#aggregating-data-adding-grouped-variables-cont.-3",
    "href": "slides/week05.html#aggregating-data-adding-grouped-variables-cont.-3",
    "title": "Week 5: Data Wrangling",
    "section": "Aggregating data: Adding grouped variables (cont. 3)",
    "text": "Aggregating data: Adding grouped variables (cont. 3)\nNote that when you use group_by(), your data stays grouped.\n\nhead(dat)\n\n# A tibble: 6 × 21\n# Groups:   STATE, year, month, day [1]\n  USAFID  WBAN  year month   day  hour   min   lat   lon  elev wind.sp  temp\n   &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt;   &lt;dbl&gt; &lt;dbl&gt;\n1 690150 93121  2019     8     1     0    56  34.3 -116.   696     5.7  37.2\n2 690150 93121  2019     8     1     1    56  34.3 -116.   696     8.2  35.6\n3 690150 93121  2019     8     1     2    56  34.3 -116.   696     6.7  34.4\n4 690150 93121  2019     8     1     3    56  34.3 -116.   696     5.1  33.3\n5 690150 93121  2019     8     1     4    56  34.3 -116.   696     2.1  32.8\n6 690150 93121  2019     8     1     5    56  34.3 -116.   696     0    31.1\n# ℹ 9 more variables: atm.press &lt;dbl&gt;, elev2 &lt;dbl&gt;, windsp_scaled &lt;dbl&gt;,\n#   wind.sp_scaled &lt;dbl&gt;, temp_scaled &lt;dbl&gt;, atm.press_scaled &lt;dbl&gt;,\n#   CTRY &lt;chr&gt;, STATE &lt;chr&gt;, temp_imp &lt;dbl&gt;\n\n\nThis can cause headaches downstream if you don’t remember that your data is grouped."
  },
  {
    "objectID": "slides/week05.html#aggregating-data-adding-grouped-variables-cont.-4",
    "href": "slides/week05.html#aggregating-data-adding-grouped-variables-cont.-4",
    "title": "Week 5: Data Wrangling",
    "section": "Aggregating data: Adding grouped variables (cont. 4)",
    "text": "Aggregating data: Adding grouped variables (cont. 4)\nYou can undo the grouping with dplyr::ungroup():\n\ndat &lt;- ungroup(dat)\nhead(dat)\n\n# A tibble: 6 × 21\n  USAFID  WBAN  year month   day  hour   min   lat   lon  elev wind.sp  temp\n   &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt;   &lt;dbl&gt; &lt;dbl&gt;\n1 690150 93121  2019     8     1     0    56  34.3 -116.   696     5.7  37.2\n2 690150 93121  2019     8     1     1    56  34.3 -116.   696     8.2  35.6\n3 690150 93121  2019     8     1     2    56  34.3 -116.   696     6.7  34.4\n4 690150 93121  2019     8     1     3    56  34.3 -116.   696     5.1  33.3\n5 690150 93121  2019     8     1     4    56  34.3 -116.   696     2.1  32.8\n6 690150 93121  2019     8     1     5    56  34.3 -116.   696     0    31.1\n# ℹ 9 more variables: atm.press &lt;dbl&gt;, elev2 &lt;dbl&gt;, windsp_scaled &lt;dbl&gt;,\n#   wind.sp_scaled &lt;dbl&gt;, temp_scaled &lt;dbl&gt;, atm.press_scaled &lt;dbl&gt;,\n#   CTRY &lt;chr&gt;, STATE &lt;chr&gt;, temp_imp &lt;dbl&gt;"
  },
  {
    "objectID": "slides/week05.html#aggregating-data-summary-table",
    "href": "slides/week05.html#aggregating-data-summary-table",
    "title": "Week 5: Data Wrangling",
    "section": "* Aggregating data: Summary table",
    "text": "* Aggregating data: Summary table\n\nUsing by also allow us creating summaries of our data.\nFor example, if we wanted to compute the average temperature, wind-speed, and atmospheric pressure by state, we could do the following\n\n\ndat[, .(\n  temp_avg      = mean(temp, na.rm=TRUE),\n  wind.sp_avg   = mean(wind.sp, na.rm=TRUE),\n  atm.press_avg = mean(atm.press, na.rm = TRUE)\n  ),\n  by = STATE\n  ][order(STATE)] |&gt; head(n = 4)"
  },
  {
    "objectID": "slides/week05.html#aggregating-data-summary-table-cont.-1",
    "href": "slides/week05.html#aggregating-data-summary-table-cont.-1",
    "title": "Week 5: Data Wrangling",
    "section": "* Aggregating data: Summary table (cont. 1)",
    "text": "* Aggregating data: Summary table (cont. 1)\nWhen dealing with too many variables, we can use the .SD special symbol in data.table:\n\n# Listing the names\nin_names  &lt;- c(\"wind.sp\", \"temp\", \"atm.press\")\nout_names &lt;- paste0(in_names, \"_avg\")\n\ndat[,\n  setNames(lapply(.SD, mean, na.rm = TRUE), out_names),\n  .SDcols = in_names, keyby   = STATE\n  ] |&gt; head(n = 4)\n\nNotice the keyby option here: “Group by STATE and order by STATE”."
  },
  {
    "objectID": "slides/week05.html#aggregating-data-summary-table-cont.-2",
    "href": "slides/week05.html#aggregating-data-summary-table-cont.-2",
    "title": "Week 5: Data Wrangling",
    "section": "Aggregating data: Summary table (cont. 2)",
    "text": "Aggregating data: Summary table (cont. 2)\n\nUsing dplyr verbs\n\n\ndat |&gt; \n  group_by(STATE) |&gt;\n  summarise(\n    temp_avg      = mean(temp, na.rm=TRUE),\n    wind.sp_avg   = mean(wind.sp, na.rm=TRUE),\n    atm.press_avg = mean(atm.press, na.rm = TRUE)\n  ) |&gt; \n  arrange(STATE) |&gt; \n  head(n = 4)\n\n# A tibble: 4 × 4\n  STATE temp_avg wind.sp_avg atm.press_avg\n  &lt;chr&gt;    &lt;dbl&gt;       &lt;dbl&gt;         &lt;dbl&gt;\n1 AL        26.2        1.57         1016.\n2 AR        26.2        1.84         1015.\n3 AZ        28.8        2.98         1011.\n4 CA        22.4        2.61         1013.\n\n\nNotice the arrange() function."
  },
  {
    "objectID": "slides/week05.html#other-data.table-goodies",
    "href": "slides/week05.html#other-data.table-goodies",
    "title": "Week 5: Data Wrangling",
    "section": "* Other data.table goodies",
    "text": "* Other data.table goodies\n\nshift() Fast lead/lag for vectors and lists.\nfifelse() Fast if-else, similar to base R’s ifelse().\nfcoalesce() Fast coalescing of missing values.\n%between% A short form of (x &lt; lb) & (x &gt; up)\n%inrange% A short form of x %in% lb:up\n%chin% Fast match of character vectors, equivalent to x %in% X, where both x and X are character vectors.\nnafill() Fill missing values using a constant, last observed value, or the next observed value."
  },
  {
    "objectID": "slides/week05.html#benchmarks",
    "href": "slides/week05.html#benchmarks",
    "title": "Week 5: Data Wrangling",
    "section": "Benchmarks",
    "text": "Benchmarks\n\nH2O.ai’s benchmark (link): Designed by the lead developer of data.table Matt Dowle\nRStudio’s benchmark (link): Designed as part of the benchmarks with the vroom package."
  },
  {
    "objectID": "slides/week06.html#acknowledgment",
    "href": "slides/week06.html#acknowledgment",
    "title": "Week 6: Text Mining",
    "section": "Acknowledgment",
    "text": "Acknowledgment\nThese slides were originally developed by Emil Hvitfeldt and modified by George G. Vega Yon and Kelly Street."
  },
  {
    "objectID": "slides/week06.html#alices-adventures-in-wonderland",
    "href": "slides/week06.html#alices-adventures-in-wonderland",
    "title": "Week 6: Text Mining",
    "section": "Alice’s Adventures in Wonderland",
    "text": "Alice’s Adventures in Wonderland\nDownload the alice dataset from https://github.com/USCbiostats/PM566/blob/main/data/alice.rds)\n\nlibrary(tidyverse)\nalice &lt;- readRDS(\"../data/alice.rds\") # \"~/Downloads/alice.rds\"\nalice\n\n# A tibble: 3,351 × 3\n   text                                                     chapter chapter_name\n   &lt;chr&gt;                                                      &lt;int&gt; &lt;chr&gt;       \n 1 \"CHAPTER I.\"                                                   1 CHAPTER I.  \n 2 \"Down the Rabbit-Hole\"                                         1 CHAPTER I.  \n 3 \"\"                                                             1 CHAPTER I.  \n 4 \"\"                                                             1 CHAPTER I.  \n 5 \"Alice was beginning to get very tired of sitting by he…       1 CHAPTER I.  \n 6 \"bank, and of having nothing to do: once or twice she h…       1 CHAPTER I.  \n 7 \"the book her sister was reading, but it had no picture…       1 CHAPTER I.  \n 8 \"conversations in it, “and what is the use of a book,” …       1 CHAPTER I.  \n 9 \"“without pictures or conversations?”\"                         1 CHAPTER I.  \n10 \"\"                                                             1 CHAPTER I.  \n# ℹ 3,341 more rows"
  },
  {
    "objectID": "slides/week06.html#turning-the-data-into-a-tidy-format",
    "href": "slides/week06.html#turning-the-data-into-a-tidy-format",
    "title": "Week 6: Text Mining",
    "section": "Turning the data into a tidy format",
    "text": "Turning the data into a tidy format\n\nlibrary(tidytext)\nalice |&gt;\n  unnest_tokens(token, text)\n\n# A tibble: 26,687 × 3\n   chapter chapter_name token    \n     &lt;int&gt; &lt;chr&gt;        &lt;chr&gt;    \n 1       1 CHAPTER I.   chapter  \n 2       1 CHAPTER I.   i        \n 3       1 CHAPTER I.   down     \n 4       1 CHAPTER I.   the      \n 5       1 CHAPTER I.   rabbit   \n 6       1 CHAPTER I.   hole     \n 7       1 CHAPTER I.   alice    \n 8       1 CHAPTER I.   was      \n 9       1 CHAPTER I.   beginning\n10       1 CHAPTER I.   to       \n# ℹ 26,677 more rows"
  },
  {
    "objectID": "slides/week06.html#using-dplyr-verbs",
    "href": "slides/week06.html#using-dplyr-verbs",
    "title": "Week 6: Text Mining",
    "section": "Using dplyr verbs",
    "text": "Using dplyr verbs\n\nlibrary(dplyr)\nalice |&gt;\n  unnest_tokens(token, text)\n\n# A tibble: 26,687 × 3\n   chapter chapter_name token    \n     &lt;int&gt; &lt;chr&gt;        &lt;chr&gt;    \n 1       1 CHAPTER I.   chapter  \n 2       1 CHAPTER I.   i        \n 3       1 CHAPTER I.   down     \n 4       1 CHAPTER I.   the      \n 5       1 CHAPTER I.   rabbit   \n 6       1 CHAPTER I.   hole     \n 7       1 CHAPTER I.   alice    \n 8       1 CHAPTER I.   was      \n 9       1 CHAPTER I.   beginning\n10       1 CHAPTER I.   to       \n# ℹ 26,677 more rows"
  },
  {
    "objectID": "slides/week06.html#using-dplyr-verbs-1",
    "href": "slides/week06.html#using-dplyr-verbs-1",
    "title": "Week 6: Text Mining",
    "section": "Using dplyr verbs",
    "text": "Using dplyr verbs\n\nlibrary(dplyr)\nalice |&gt;\n  unnest_tokens(token, text) |&gt;\n  count(token)\n\n# A tibble: 2,740 × 2\n   token        n\n   &lt;chr&gt;    &lt;int&gt;\n 1 _alice’s     1\n 2 _all         1\n 3 _all_        1\n 4 _and         1\n 5 _are_        4\n 6 _at          1\n 7 _before      1\n 8 _beg_        1\n 9 _began_      1\n10 _best_       2\n# ℹ 2,730 more rows"
  },
  {
    "objectID": "slides/week06.html#using-dplyr-verbs-2",
    "href": "slides/week06.html#using-dplyr-verbs-2",
    "title": "Week 6: Text Mining",
    "section": "Using dplyr verbs",
    "text": "Using dplyr verbs\n\nlibrary(dplyr)\nalice |&gt;\n  unnest_tokens(token, text) |&gt;\n  count(token, sort = TRUE)\n\n# A tibble: 2,740 × 2\n   token     n\n   &lt;chr&gt; &lt;int&gt;\n 1 the    1643\n 2 and     871\n 3 to      729\n 4 a       632\n 5 she     538\n 6 it      527\n 7 of      514\n 8 said    460\n 9 i       393\n10 alice   386\n# ℹ 2,730 more rows"
  },
  {
    "objectID": "slides/week06.html#using-dplyr-verbs-3",
    "href": "slides/week06.html#using-dplyr-verbs-3",
    "title": "Week 6: Text Mining",
    "section": "Using dplyr verbs",
    "text": "Using dplyr verbs\n\nlibrary(dplyr)\nalice |&gt;\n  unnest_tokens(token, text) |&gt;\n  count(chapter, token)\n\n# A tibble: 7,549 × 3\n   chapter token            n\n     &lt;int&gt; &lt;chr&gt;        &lt;int&gt;\n 1       1 _curtseying_     1\n 2       1 _never_          1\n 3       1 _not_            1\n 4       1 _one_            1\n 5       1 _poison_         1\n 6       1 _that_           1\n 7       1 _through_        1\n 8       1 _took            1\n 9       1 _very_           4\n10       1 _was_            1\n# ℹ 7,539 more rows"
  },
  {
    "objectID": "slides/week06.html#using-dplyr-verbs-4",
    "href": "slides/week06.html#using-dplyr-verbs-4",
    "title": "Week 6: Text Mining",
    "section": "Using dplyr verbs",
    "text": "Using dplyr verbs\n\nlibrary(dplyr)\nalice |&gt;\n  unnest_tokens(token, text) |&gt;\n  group_by(chapter) |&gt;\n  count(token) |&gt;\n  top_n(10, n)\n\n# A tibble: 122 × 3\n# Groups:   chapter [12]\n   chapter token     n\n     &lt;int&gt; &lt;chr&gt; &lt;int&gt;\n 1       1 a        52\n 2       1 alice    27\n 3       1 and      65\n 4       1 i        30\n 5       1 it       62\n 6       1 of       43\n 7       1 she      79\n 8       1 the      92\n 9       1 to       75\n10       1 was      52\n# ℹ 112 more rows"
  },
  {
    "objectID": "slides/week06.html#dplyr-verbs-and-ggplot2",
    "href": "slides/week06.html#dplyr-verbs-and-ggplot2",
    "title": "Week 6: Text Mining",
    "section": "dplyr verbs and ggplot2",
    "text": "dplyr verbs and ggplot2\n\nlibrary(dplyr)\nlibrary(ggplot2)\nalice |&gt;\n  unnest_tokens(token, text) |&gt;\n  count(token) |&gt;\n  top_n(10, n) |&gt;\n  ggplot(aes(n, token)) +\n  geom_col()"
  },
  {
    "objectID": "slides/week06.html#dplyr-verbs-and-ggplot2-1",
    "href": "slides/week06.html#dplyr-verbs-and-ggplot2-1",
    "title": "Week 6: Text Mining",
    "section": "dplyr verbs and ggplot2",
    "text": "dplyr verbs and ggplot2\n\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(forcats)\nalice |&gt;\n  unnest_tokens(token, text) |&gt;\n  count(token) |&gt;\n  top_n(10, n) |&gt;\n  ggplot(aes(n, fct_reorder(token, n))) +\n  geom_col()"
  },
  {
    "objectID": "slides/week06.html#stop-words-in-tidytext",
    "href": "slides/week06.html#stop-words-in-tidytext",
    "title": "Week 6: Text Mining",
    "section": "Stop words in tidytext",
    "text": "Stop words in tidytext\ntidytext comes with a built-in data.frame of stop words\n\nstop_words\n\n# A tibble: 1,149 × 2\n   word        lexicon\n   &lt;chr&gt;       &lt;chr&gt;  \n 1 a           SMART  \n 2 a's         SMART  \n 3 able        SMART  \n 4 about       SMART  \n 5 above       SMART  \n 6 according   SMART  \n 7 accordingly SMART  \n 8 across      SMART  \n 9 actually    SMART  \n10 after       SMART  \n# ℹ 1,139 more rows"
  },
  {
    "objectID": "slides/week06.html#stop-word-lexicons",
    "href": "slides/week06.html#stop-word-lexicons",
    "title": "Week 6: Text Mining",
    "section": "Stop word lexicons",
    "text": "Stop word lexicons\n\ntable(stop_words$lexicon)\n\n\n    onix    SMART snowball \n     404      571      174"
  },
  {
    "objectID": "slides/week06.html#snowball-stopwords",
    "href": "slides/week06.html#snowball-stopwords",
    "title": "Week 6: Text Mining",
    "section": "snowball stopwords",
    "text": "snowball stopwords\n\nstop_words |&gt;\n  filter(lexicon == \"snowball\") |&gt;\n  pull(word)\n\n  [1] \"i\"          \"me\"         \"my\"         \"myself\"     \"we\"        \n  [6] \"our\"        \"ours\"       \"ourselves\"  \"you\"        \"your\"      \n [11] \"yours\"      \"yourself\"   \"yourselves\" \"he\"         \"him\"       \n [16] \"his\"        \"himself\"    \"she\"        \"her\"        \"hers\"      \n [21] \"herself\"    \"it\"         \"its\"        \"itself\"     \"they\"      \n [26] \"them\"       \"their\"      \"theirs\"     \"themselves\" \"what\"      \n [31] \"which\"      \"who\"        \"whom\"       \"this\"       \"that\"      \n [36] \"these\"      \"those\"      \"am\"         \"is\"         \"are\"       \n [41] \"was\"        \"were\"       \"be\"         \"been\"       \"being\"     \n [46] \"have\"       \"has\"        \"had\"        \"having\"     \"do\"        \n [51] \"does\"       \"did\"        \"doing\"      \"would\"      \"should\"    \n [56] \"could\"      \"ought\"      \"i'm\"        \"you're\"     \"he's\"      \n [61] \"she's\"      \"it's\"       \"we're\"      \"they're\"    \"i've\"      \n [66] \"you've\"     \"we've\"      \"they've\"    \"i'd\"        \"you'd\"     \n [71] \"he'd\"       \"she'd\"      \"we'd\"       \"they'd\"     \"i'll\"      \n [76] \"you'll\"     \"he'll\"      \"she'll\"     \"we'll\"      \"they'll\"   \n [81] \"isn't\"      \"aren't\"     \"wasn't\"     \"weren't\"    \"hasn't\"    \n [86] \"haven't\"    \"hadn't\"     \"doesn't\"    \"don't\"      \"didn't\"    \n [91] \"won't\"      \"wouldn't\"   \"shan't\"     \"shouldn't\"  \"can't\"     \n [96] \"cannot\"     \"couldn't\"   \"mustn't\"    \"let's\"      \"that's\"    \n[101] \"who's\"      \"what's\"     \"here's\"     \"there's\"    \"when's\"    \n[106] \"where's\"    \"why's\"      \"how's\"      \"a\"          \"an\"        \n[111] \"the\"        \"and\"        \"but\"        \"if\"         \"or\"        \n[116] \"because\"    \"as\"         \"until\"      \"while\"      \"of\"        \n[121] \"at\"         \"by\"         \"for\"        \"with\"       \"about\"     \n[126] \"against\"    \"between\"    \"into\"       \"through\"    \"during\"    \n[131] \"before\"     \"after\"      \"above\"      \"below\"      \"to\"        \n[136] \"from\"       \"up\"         \"down\"       \"in\"         \"out\"       \n[141] \"on\"         \"off\"        \"over\"       \"under\"      \"again\"     \n[146] \"further\"    \"then\"       \"once\"       \"here\"       \"there\"     \n[151] \"when\"       \"where\"      \"why\"        \"how\"        \"all\"       \n[156] \"any\"        \"both\"       \"each\"       \"few\"        \"more\"      \n[161] \"most\"       \"other\"      \"some\"       \"such\"       \"no\"        \n[166] \"nor\"        \"not\"        \"only\"       \"own\"        \"same\"      \n[171] \"so\"         \"than\"       \"too\"        \"very\""
  },
  {
    "objectID": "slides/week06.html#duplicated-stopwords",
    "href": "slides/week06.html#duplicated-stopwords",
    "title": "Week 6: Text Mining",
    "section": "Duplicated stopwords",
    "text": "Duplicated stopwords\n\nsort(table(stop_words$word), decreasing = TRUE)\n\n\n         down         would             a         about         above \n            4             4             3             3             3 \n        after         again       against           all            an \n            3             3             3             3             3 \n          and           any           are            as            at \n            3             3             3             3             3 \n           be       because          been        before         being \n            3             3             3             3             3 \n      between          both           but            by        cannot \n            3             3             3             3             3 \n        could           did            do          does        during \n            3             3             3             3             3 \n         each           few           for          from       further \n            3             3             3             3             3 \n          had           has          have        having            he \n            3             3             3             3             3 \n          her          here       herself          high           him \n            3             3             3             3             3 \n      himself           his           how             i            if \n            3             3             3             3             3 \n           in          into            is            it           its \n            3             3             3             3             3 \n       itself            me          more          most            my \n            3             3             3             3             3 \n       myself           new            no           not            of \n            3             3             3             3             3 \n          off            on          once          only            or \n            3             3             3             3             3 \n        other           our           out          over         right \n            3             3             3             3             3 \n         same           she        should          some         still \n            3             3             3             3             3 \n         such          than          that           the         their \n            3             3             3             3             3 \n         them          then         there         these          they \n            3             3             3             3             3 \n         this         those       through            to           too \n            3             3             3             3             3 \n        under         until            up          very           was \n            3             3             3             3             3 \n           we          were          what          when         where \n            3             3             3             3             3 \n        which         while           who           why          with \n            3             3             3             3             3 \n          you          your         yours        across        almost \n            3             3             3             2             2 \n        alone         along       already          also      although \n            2             2             2             2             2 \n       always            am         among       another       anybody \n            2             2             2             2             2 \n       anyone      anything      anywhere        aren't        around \n            2             2             2             2             2 \n          ask        asking          away        became        become \n            2             2             2             2             2 \n      becomes        behind         below          best        better \n            2             2             2             2             2 \n         came           can         can't       certain     certainly \n            2             2             2             2             2 \n      clearly          come      couldn't        didn't     different \n            2             2             2             2             2 \n      doesn't         doing         don't          done        either \n            2             2             2             2             2 \n       enough          even          ever         every     everybody \n            2             2             2             2             2 \n     everyone    everything    everywhere           far         first \n            2             2             2             2             2 \n         four           get          gets         given         gives \n            2             2             2             2             2 \n           go         going           got        hadn't        hasn't \n            2             2             2             2             2 \n      haven't          he's        here's          hers       however \n            2             2             2             2             2 \n          i'd          i'll           i'm          i've         isn't \n            2             2             2             2             2 \n         it's          just          keep         keeps          know \n            2             2             2             2             2 \n        known         knows          last         later         least \n            2             2             2             2             2 \n         less           let         let's          like        likely \n            2             2             2             2             2 \n         many           may         might        mostly          much \n            2             2             2             2             2 \n         must     necessary          need         needs         never \n            2             2             2             2             2 \n         next        nobody           non         noone           nor \n            2             2             2             2             2 \n      nothing           now       nowhere         often           old \n            2             2             2             2             2 \n          one        others         ought          ours     ourselves \n            2             2             2             2             2 \n          own           per       perhaps      possible         quite \n            2             2             2             2             2 \n       rather        really          said           saw           say \n            2             2             2             2             2 \n         says        second           see          seem        seemed \n            2             2             2             2             2 \n      seeming         seems       several         shall     shouldn't \n            2             2             2             2             2 \n        since            so      somebody       someone     something \n            2             2             2             2             2 \n    somewhere          sure          take         taken        that's \n            2             2             2             2             2 \n       theirs    themselves       there's     therefore        they'd \n            2             2             2             2             2 \n      they'll       they're       they've         think        though \n            2             2             2             2             2 \n        three          thus      together          took        toward \n            2             2             2             2             2 \n          two          upon            us           use          used \n            2             2             2             2             2 \n         uses          want         wants        wasn't           way \n            2             2             2             2             2 \n         we'd         we'll         we're         we've          well \n            2             2             2             2             2 \n         went       weren't        what's       where's       whether \n            2             2             2             2             2 \n        who's         whole          whom         whose          will \n            2             2             2             2             2 \n       within       without         won't      wouldn't           yet \n            2             2             2             2             2 \n        you'd        you'll        you're        you've      yourself \n            2             2             2             2             2 \n   yourselves           a's          able     according   accordingly \n            2             1             1             1             1 \n     actually    afterwards         ain't         allow        allows \n            1             1             1             1             1 \n      amongst        anyhow        anyway       anyways         apart \n            1             1             1             1             1 \n       appear    appreciate   appropriate          area         areas \n            1             1             1             1             1 \n        aside         asked          asks    associated     available \n            1             1             1             1             1 \n      awfully             b          back        backed       backing \n            1             1             1             1             1 \n        backs      becoming    beforehand         began        beings \n            1             1             1             1             1 \n      believe        beside       besides        beyond           big \n            1             1             1             1             1 \n        brief             c         c'mon           c's          cant \n            1             1             1             1             1 \n         case         cases         cause        causes       changes \n            1             1             1             1             1 \n        clear            co           com         comes    concerning \n            1             1             1             1             1 \n consequently      consider   considering       contain    containing \n            1             1             1             1             1 \n     contains corresponding        course     currently             d \n            1             1             1             1             1 \n   definitely     described       despite        differ   differently \n            1             1             1             1             1 \n       downed       downing         downs     downwards             e \n            1             1             1             1             1 \n        early           edu            eg         eight          else \n            1             1             1             1             1 \n    elsewhere           end         ended        ending          ends \n            1             1             1             1             1 \n     entirely    especially            et           etc        evenly \n            1             1             1             1             1 \n           ex       exactly       example        except             f \n            1             1             1             1             1 \n         face         faces          fact         facts          felt \n            1             1             1             1             1 \n        fifth          find         finds          five      followed \n            1             1             1             1             1 \n    following       follows        former      formerly         forth \n            1             1             1             1             1 \n         full         fully     furthered    furthering   furthermore \n            1             1             1             1             1 \n     furthers             g          gave       general     generally \n            1             1             1             1             1 \n      getting          give          goes          gone          good \n            1             1             1             1             1 \n        goods        gotten         great       greater      greatest \n            1             1             1             1             1 \n    greetings         group       grouped      grouping        groups \n            1             1             1             1             1 \n            h       happens        hardly          he'd         he'll \n            1             1             1             1             1 \n        hello          help         hence     hereafter        hereby \n            1             1             1             1             1 \n       herein      hereupon            hi        higher       highest \n            1             1             1             1             1 \n       hither     hopefully         how's       howbeit            ie \n            1             1             1             1             1 \n      ignored     immediate     important      inasmuch           inc \n            1             1             1             1             1 \n       indeed      indicate     indicated     indicates         inner \n            1             1             1             1             1 \n      insofar       instead      interest    interested   interesting \n            1             1             1             1             1 \n    interests        inward          it'd         it'll             j \n            1             1             1             1             1 \n            k          kept          kind          knew             l \n            1             1             1             1             1 \n        large       largely        lately        latest        latter \n            1             1             1             1             1 \n     latterly          lest          lets         liked        little \n            1             1             1             1             1 \n         long        longer       longest          look       looking \n            1             1             1             1             1 \n        looks           ltd             m          made        mainly \n            1             1             1             1             1 \n         make        making           man         maybe          mean \n            1             1             1             1             1 \n    meanwhile        member       members           men        merely \n            1             1             1             1             1 \n     moreover            mr           mrs       mustn't             n \n            1             1             1             1             1 \n         name        namely            nd          near        nearly \n            1             1             1             1             1 \n       needed       needing       neither  nevertheless         newer \n            1             1             1             1             1 \n       newest          nine          none      normally         novel \n            1             1             1             1             1 \n       number       numbers             o     obviously            oh \n            1             1             1             1             1 \n           ok          okay         older        oldest          ones \n            1             1             1             1             1 \n         onto          open        opened       opening         opens \n            1             1             1             1             1 \n        order       ordered      ordering        orders     otherwise \n            1             1             1             1             1 \n      outside       overall             p          part        parted \n            1             1             1             1             1 \n   particular  particularly       parting         parts         place \n            1             1             1             1             1 \n       placed        places        please          plus         point \n            1             1             1             1             1 \n      pointed      pointing        points       present     presented \n            1             1             1             1             1 \n   presenting      presents    presumably      probably       problem \n            1             1             1             1             1 \n     problems      provides           put          puts             q \n            1             1             1             1             1 \n          que            qv             r            rd            re \n            1             1             1             1             1 \n   reasonably     regarding    regardless       regards    relatively \n            1             1             1             1             1 \n respectively          room         rooms             s        saying \n            1             1             1             1             1 \n     secondly       seconds        seeing          seen          sees \n            1             1             1             1             1 \n         self        selves      sensible          sent       serious \n            1             1             1             1             1 \n    seriously         seven        shan't         she'd        she'll \n            1             1             1             1             1 \n        she's          show        showed       showing         shows \n            1             1             1             1             1 \n         side         sides           six         small       smaller \n            1             1             1             1             1 \n     smallest       somehow      sometime     sometimes      somewhat \n            1             1             1             1             1 \n         soon         sorry     specified       specify    specifying \n            1             1             1             1             1 \n        state        states           sub           sup             t \n            1             1             1             1             1 \n          t's          tell         tends            th         thank \n            1             1             1             1             1 \n       thanks         thanx         thats        thence    thereafter \n            1             1             1             1             1 \n      thereby       therein        theres     thereupon         thing \n            1             1             1             1             1 \n       things        thinks         third      thorough    thoroughly \n            1             1             1             1             1 \n      thought      thoughts    throughout          thru         today \n            1             1             1             1             1 \n      towards         tried         tries         truly           try \n            1             1             1             1             1 \n       trying          turn        turned       turning         turns \n            1             1             1             1             1 \n        twice             u            un unfortunately        unless \n            1             1             1             1             1 \n     unlikely          unto        useful         using       usually \n            1             1             1             1             1 \n         uucp             v         value       various           via \n            1             1             1             1             1 \n          viz            vs             w        wanted       wanting \n            1             1             1             1             1 \n         ways       welcome         wells      whatever        when's \n            1             1             1             1             1 \n       whence      whenever    whereafter       whereas       whereby \n            1             1             1             1             1 \n      wherein     whereupon      wherever       whither       whoever \n            1             1             1             1             1 \n        why's       willing          wish        wonder          work \n            1             1             1             1             1 \n       worked       working         works             x             y \n            1             1             1             1             1 \n         year         years           yes         young       younger \n            1             1             1             1             1 \n     youngest             z          zero \n            1             1             1"
  },
  {
    "objectID": "slides/week06.html#removing-stopwords",
    "href": "slides/week06.html#removing-stopwords",
    "title": "Week 6: Text Mining",
    "section": "Removing stopwords",
    "text": "Removing stopwords\nWe can use an anti_join() to remove the tokens that also appear in the stop_words data.frame\n\nalice |&gt;\n  unnest_tokens(token, text) |&gt;\n  anti_join(stop_words, by = c(\"token\" = \"word\")) |&gt;\n  count(token, sort = TRUE)\n\n# A tibble: 2,314 × 2\n   token       n\n   &lt;chr&gt;   &lt;int&gt;\n 1 alice     386\n 2 time       71\n 3 queen      68\n 4 king       61\n 5 don’t      60\n 6 it’s       57\n 7 i’m        56\n 8 mock       56\n 9 turtle     56\n10 gryphon    55\n# ℹ 2,304 more rows"
  },
  {
    "objectID": "slides/week06.html#anti-join-with-same-variable-name",
    "href": "slides/week06.html#anti-join-with-same-variable-name",
    "title": "Week 6: Text Mining",
    "section": "Anti-join with same variable name",
    "text": "Anti-join with same variable name\n\nalice |&gt;\n  unnest_tokens(word, text) |&gt;\n  anti_join(stop_words, by = c(\"word\")) |&gt;\n  count(word, sort = TRUE)\n\n# A tibble: 2,314 × 2\n   word        n\n   &lt;chr&gt;   &lt;int&gt;\n 1 alice     386\n 2 time       71\n 3 queen      68\n 4 king       61\n 5 don’t      60\n 6 it’s       57\n 7 i’m        56\n 8 mock       56\n 9 turtle     56\n10 gryphon    55\n# ℹ 2,304 more rows"
  },
  {
    "objectID": "slides/week06.html#stop-words-removed",
    "href": "slides/week06.html#stop-words-removed",
    "title": "Week 6: Text Mining",
    "section": "Stop words removed",
    "text": "Stop words removed\n\nalice |&gt;\n  unnest_tokens(word, text) |&gt;\n  anti_join(stop_words, by = c(\"word\")) |&gt;\n  count(word, sort = TRUE) |&gt;\n  top_n(10, n) |&gt;\n  ggplot(aes(n, fct_reorder(word, n))) +\n  geom_col()"
  },
  {
    "objectID": "slides/week06.html#which-words-appear-together",
    "href": "slides/week06.html#which-words-appear-together",
    "title": "Week 6: Text Mining",
    "section": "Which words appear together?",
    "text": "Which words appear together?\nngrams are sets of n consecutive words and we can count these to see which words appear together most frequently.\n\nngrams with n = 1 are called “unigrams”: “which”, “words”, “appear”, “together”\nngrams with n = 2 are called “bigrams”: “which words”, “words appear”, “appear together”\nngrams with n = 3 are called “trigrams”: “which words appear”, “words appear together”"
  },
  {
    "objectID": "slides/week06.html#which-words-appear-together-1",
    "href": "slides/week06.html#which-words-appear-together-1",
    "title": "Week 6: Text Mining",
    "section": "Which words appear together?",
    "text": "Which words appear together?\nWe can extract bigrams using unnest_ngrams() with n = 2\n\nalice |&gt;\n  unnest_ngrams(ngram, text, n = 2)\n\n# A tibble: 25,170 × 3\n   chapter chapter_name ngram        \n     &lt;int&gt; &lt;chr&gt;        &lt;chr&gt;        \n 1       1 CHAPTER I.   chapter i    \n 2       1 CHAPTER I.   down the     \n 3       1 CHAPTER I.   the rabbit   \n 4       1 CHAPTER I.   rabbit hole  \n 5       1 CHAPTER I.   &lt;NA&gt;         \n 6       1 CHAPTER I.   &lt;NA&gt;         \n 7       1 CHAPTER I.   alice was    \n 8       1 CHAPTER I.   was beginning\n 9       1 CHAPTER I.   beginning to \n10       1 CHAPTER I.   to get       \n# ℹ 25,160 more rows"
  },
  {
    "objectID": "slides/week06.html#which-words-appear-together-2",
    "href": "slides/week06.html#which-words-appear-together-2",
    "title": "Week 6: Text Mining",
    "section": "Which words appear together?",
    "text": "Which words appear together?\nTallying up the bigrams still shows a lot of stop words, but it is able to pick up some common phrases:\n\nalice |&gt;\n  unnest_ngrams(ngram, text, n = 2) |&gt;\n  count(ngram, sort = TRUE)\n\n# A tibble: 13,424 × 2\n   ngram          n\n   &lt;chr&gt;      &lt;int&gt;\n 1 &lt;NA&gt;         951\n 2 said the     206\n 3 of the       130\n 4 said alice   112\n 5 in a          96\n 6 and the       75\n 7 in the        75\n 8 it was        72\n 9 to the        68\n10 the queen     60\n# ℹ 13,414 more rows"
  },
  {
    "objectID": "slides/week06.html#which-words-appear-together-3",
    "href": "slides/week06.html#which-words-appear-together-3",
    "title": "Week 6: Text Mining",
    "section": "Which words appear together?",
    "text": "Which words appear together?\n\nalice |&gt;\n  unnest_ngrams(ngram, text, n = 2) |&gt;\n  separate(ngram, into = c(\"word1\", \"word2\"), sep = \" \") |&gt;\n  select(word1, word2)\n\n# A tibble: 25,170 × 2\n   word1     word2    \n   &lt;chr&gt;     &lt;chr&gt;    \n 1 chapter   i        \n 2 down      the      \n 3 the       rabbit   \n 4 rabbit    hole     \n 5 &lt;NA&gt;      &lt;NA&gt;     \n 6 &lt;NA&gt;      &lt;NA&gt;     \n 7 alice     was      \n 8 was       beginning\n 9 beginning to       \n10 to        get      \n# ℹ 25,160 more rows"
  },
  {
    "objectID": "slides/week06.html#sentiment-lexicons",
    "href": "slides/week06.html#sentiment-lexicons",
    "title": "Week 6: Text Mining",
    "section": "Sentiment Lexicons",
    "text": "Sentiment Lexicons\nThe tidytext and textdata packages provide access to three different databases of words and their associated sentiments (known as “sentiment lexicons”). Obviously, none of these can be perfect, as there is no “correct” way to quantify feelings, but they all attempt to capture different elements of how a text makes you feel.\nThe readily available lexicons are:\n\nafinn from Finn Årup Nielsen\nbing from Bing Liu and collaborators\nnrc from Saif Mohammad and Peter Turney"
  },
  {
    "objectID": "slides/week06.html#sentiment-lexicons---bing",
    "href": "slides/week06.html#sentiment-lexicons---bing",
    "title": "Week 6: Text Mining",
    "section": "Sentiment Lexicons - bing",
    "text": "Sentiment Lexicons - bing\nThe bing lexicon contains a large list of words and a binary association, either “positive” or “negative”:\n\nlibrary(textdata)\nget_sentiments('bing')\n\n# A tibble: 6,786 × 2\n   word        sentiment\n   &lt;chr&gt;       &lt;chr&gt;    \n 1 2-faces     negative \n 2 abnormal    negative \n 3 abolish     negative \n 4 abominable  negative \n 5 abominably  negative \n 6 abominate   negative \n 7 abomination negative \n 8 abort       negative \n 9 aborted     negative \n10 aborts      negative \n# ℹ 6,776 more rows"
  },
  {
    "objectID": "slides/week06.html#sentiment-lexicons---afinn",
    "href": "slides/week06.html#sentiment-lexicons---afinn",
    "title": "Week 6: Text Mining",
    "section": "Sentiment Lexicons - afinn",
    "text": "Sentiment Lexicons - afinn\nThe afinn lexicon goes slightly further, assigning words a value between -5 and 5 that represents their positivity or negativity.\n\nget_sentiments('afinn')\n\n# A tibble: 2,477 × 2\n   word       value\n   &lt;chr&gt;      &lt;dbl&gt;\n 1 abandon       -2\n 2 abandoned     -2\n 3 abandons      -2\n 4 abducted      -2\n 5 abduction     -2\n 6 abductions    -2\n 7 abhor         -3\n 8 abhorred      -3\n 9 abhorrent     -3\n10 abhors        -3\n# ℹ 2,467 more rows"
  },
  {
    "objectID": "slides/week06.html#sentiment-lexicons---nrc",
    "href": "slides/week06.html#sentiment-lexicons---nrc",
    "title": "Week 6: Text Mining",
    "section": "Sentiment Lexicons - nrc",
    "text": "Sentiment Lexicons - nrc\nThe nrc lexicon takes a different approach and assigns each word an associated sentiment. Some words appear more than once because they have multiple associations:\n\nget_sentiments('nrc')\n\n# A tibble: 13,872 × 2\n   word        sentiment\n   &lt;chr&gt;       &lt;chr&gt;    \n 1 abacus      trust    \n 2 abandon     fear     \n 3 abandon     negative \n 4 abandon     sadness  \n 5 abandoned   anger    \n 6 abandoned   fear     \n 7 abandoned   negative \n 8 abandoned   sadness  \n 9 abandonment anger    \n10 abandonment fear     \n# ℹ 13,862 more rows"
  },
  {
    "objectID": "slides/week06.html#sentiment-analysis-2",
    "href": "slides/week06.html#sentiment-analysis-2",
    "title": "Week 6: Text Mining",
    "section": "Sentiment Analysis",
    "text": "Sentiment Analysis\nWe can use one of these databases to analyze Alice’s Adventures in Wonderland by breaking the text down into words and combining the result with a lexicon. Let’s use bing to assign “positive” and “negative” labels to as many words as possible in the book. (Note that this time the variable created by unnest_tokens is called word, to match the column name in bing).\n\nalice |&gt;\n  unnest_tokens(word, text) |&gt;\n  inner_join(get_sentiments(\"bing\"))\n\n# A tibble: 1,409 × 4\n   chapter chapter_name word        sentiment\n     &lt;int&gt; &lt;chr&gt;        &lt;chr&gt;       &lt;chr&gt;    \n 1       1 CHAPTER I.   tired       negative \n 2       1 CHAPTER I.   well        positive \n 3       1 CHAPTER I.   hot         positive \n 4       1 CHAPTER I.   stupid      negative \n 5       1 CHAPTER I.   pleasure    positive \n 6       1 CHAPTER I.   worth       positive \n 7       1 CHAPTER I.   trouble     negative \n 8       1 CHAPTER I.   remarkable  positive \n 9       1 CHAPTER I.   burning     negative \n10       1 CHAPTER I.   fortunately positive \n# ℹ 1,399 more rows"
  },
  {
    "objectID": "slides/week06.html#sentiment-analysis-3",
    "href": "slides/week06.html#sentiment-analysis-3",
    "title": "Week 6: Text Mining",
    "section": "Sentiment Analysis",
    "text": "Sentiment Analysis\nWe can now group and summarize this new dataset the same as any other. For example, let’s look at the sentiment by chapter. We’ll do this by counting the number of “positive” words and subtracting the number of “negative” words:\n\ndiff_by_chap &lt;- alice |&gt;\n  unnest_tokens(word, text) |&gt;\n  inner_join(get_sentiments(\"bing\")) |&gt; \n  group_by(chapter) |&gt; \n  summarise(sentiment = sum(sentiment == \"positive\") - sum(sentiment == \"negative\"))"
  },
  {
    "objectID": "slides/week06.html#sentiment-analysis-4",
    "href": "slides/week06.html#sentiment-analysis-4",
    "title": "Week 6: Text Mining",
    "section": "Sentiment Analysis",
    "text": "Sentiment Analysis\n\ndiff_by_chap\n\n# A tibble: 12 × 2\n   chapter sentiment\n     &lt;int&gt;     &lt;int&gt;\n 1       1        13\n 2       2        -3\n 3       3       -14\n 4       4         1\n 5       5         5\n 6       6       -17\n 7       7        19\n 8       8        -9\n 9       9       -10\n10      10        -8\n11      11       -15\n12      12       -15"
  },
  {
    "objectID": "slides/week06.html#sentiment-analysis-5",
    "href": "slides/week06.html#sentiment-analysis-5",
    "title": "Week 6: Text Mining",
    "section": "Sentiment Analysis",
    "text": "Sentiment Analysis\n\nbarplot(diff_by_chap$sentiment, names.arg = diff_by_chap$chapter)"
  },
  {
    "objectID": "slides/week06.html#sentiment-analysis-6",
    "href": "slides/week06.html#sentiment-analysis-6",
    "title": "Week 6: Text Mining",
    "section": "Sentiment Analysis",
    "text": "Sentiment Analysis\nAlternatively, we could use the afinn lexicon and quantify the “sentiment” of each chapter by the average of all words with numeric associations:\n\navg_by_chap &lt;- alice |&gt;\n  unnest_tokens(word, text) |&gt;\n  inner_join(get_sentiments(\"afinn\")) |&gt; \n  group_by(chapter) |&gt; \n  summarise(sentiment = mean(value))"
  },
  {
    "objectID": "slides/week06.html#sentiment-analysis-7",
    "href": "slides/week06.html#sentiment-analysis-7",
    "title": "Week 6: Text Mining",
    "section": "Sentiment Analysis",
    "text": "Sentiment Analysis\n\nbarplot(avg_by_chap$sentiment, names.arg = avg_by_chap$chapter)"
  },
  {
    "objectID": "slides/week06.html#sentiment-analysis-8",
    "href": "slides/week06.html#sentiment-analysis-8",
    "title": "Week 6: Text Mining",
    "section": "Sentiment Analysis",
    "text": "Sentiment Analysis\nSimilarly, we can find the most frequent sentiment association in the nrc lexicon for each chapter. Unfortunately, for all chapters, the most frequent sentiment association ends up being the rather bland “positive” or “negative”:\n\nalice |&gt;\n  unnest_tokens(word, text) |&gt;\n  inner_join(get_sentiments(\"nrc\")) |&gt; \n  group_by(chapter) |&gt; \n  summarise(sentiment = names(which.max(table(sentiment))))\n\n# A tibble: 12 × 2\n   chapter sentiment\n     &lt;int&gt; &lt;chr&gt;    \n 1       1 positive \n 2       2 positive \n 3       3 positive \n 4       4 positive \n 5       5 positive \n 6       6 negative \n 7       7 positive \n 8       8 positive \n 9       9 positive \n10      10 positive \n11      11 positive \n12      12 positive"
  },
  {
    "objectID": "slides/week06.html#sentiment-analysis-9",
    "href": "slides/week06.html#sentiment-analysis-9",
    "title": "Week 6: Text Mining",
    "section": "Sentiment Analysis",
    "text": "Sentiment Analysis\nWe’ll try to spice things up by removing “positive” and “negative” from the nrc lexicon:\n\nnrc_fun &lt;- get_sentiments(\"nrc\")\nnrc_fun &lt;- nrc_fun[!nrc_fun$sentiment %in% c(\"positive\",\"negative\"), ]"
  },
  {
    "objectID": "slides/week06.html#sentiment-analysis-10",
    "href": "slides/week06.html#sentiment-analysis-10",
    "title": "Week 6: Text Mining",
    "section": "Sentiment Analysis",
    "text": "Sentiment Analysis\nNow we see a lot of “anticipation”:\n\nalice |&gt;\n  unnest_tokens(word, text) |&gt;\n  inner_join(nrc_fun) |&gt; \n  group_by(chapter) |&gt; \n  summarise(sentiment = names(which.max(table(sentiment))))\n\n# A tibble: 12 × 2\n   chapter sentiment   \n     &lt;int&gt; &lt;chr&gt;       \n 1       1 anticipation\n 2       2 anticipation\n 3       3 sadness     \n 4       4 anticipation\n 5       5 trust       \n 6       6 anticipation\n 7       7 anticipation\n 8       8 anticipation\n 9       9 trust       \n10      10 joy         \n11      11 anticipation\n12      12 trust"
  },
  {
    "objectID": "slides/week09.html#acknowledgment",
    "href": "slides/week09.html#acknowledgment",
    "title": "SQL",
    "section": "Acknowledgment",
    "text": "Acknowledgment\nThese slides were originally developed by Emil Hvitfeldt."
  },
  {
    "objectID": "slides/week09.html#optional-reading-material",
    "href": "slides/week09.html#optional-reading-material",
    "title": "SQL",
    "section": "Optional reading material",
    "text": "Optional reading material"
  },
  {
    "objectID": "slides/week09.html#simple-definition",
    "href": "slides/week09.html#simple-definition",
    "title": "SQL",
    "section": "Simple definition",
    "text": "Simple definition\n\nA set of related information\n\n\nExamples include:\n\nphone book\nDictionary\nCookbook"
  },
  {
    "objectID": "slides/week09.html#hierarchical-database-system",
    "href": "slides/week09.html#hierarchical-database-system",
    "title": "SQL",
    "section": "Hierarchical database system",
    "text": "Hierarchical database system"
  },
  {
    "objectID": "slides/week09.html#network-database-system",
    "href": "slides/week09.html#network-database-system",
    "title": "SQL",
    "section": "Network database system",
    "text": "Network database system"
  },
  {
    "objectID": "slides/week09.html#relational-database-system",
    "href": "slides/week09.html#relational-database-system",
    "title": "SQL",
    "section": "Relational database system",
    "text": "Relational database system"
  },
  {
    "objectID": "slides/week09.html#terminology",
    "href": "slides/week09.html#terminology",
    "title": "SQL",
    "section": "Terminology",
    "text": "Terminology\n\nEntity - Something of interest to the users\nColumn - An individual piece of data stored in a table\nRow - A set of columns that together completely describe an entity or some action on an entity. Also called a record\nTable - A set of rows\nResult key - Another name for a non-persistent table, generally the result of a SQL query\nPrimary key - One or more columns that can be used as a unique identifier for each row in a table\nForeign key - One or more columns that can be used together to identify a single row in another table"
  },
  {
    "objectID": "slides/week09.html#a-nonprocedural-language",
    "href": "slides/week09.html#a-nonprocedural-language",
    "title": "SQL",
    "section": "A Nonprocedural Language",
    "text": "A Nonprocedural Language\nIn R we are used to being able to define variables, use conditional logic (if, if-else, while), looping/iteration and writing functions.\nIn general are we in complete control of what the code is doing."
  },
  {
    "objectID": "slides/week09.html#a-nonprocedural-language-cont.",
    "href": "slides/week09.html#a-nonprocedural-language-cont.",
    "title": "SQL",
    "section": "A Nonprocedural Language (cont.)",
    "text": "A Nonprocedural Language (cont.)\nWe give up some of that when using SQL.\nWhen using SQL then we specify the input and output we desire, the this is sent to your database engine known as the optimizer\nThe optimizer figures out the best way to get from input to output"
  },
  {
    "objectID": "slides/week09.html#sql-query-clauses",
    "href": "slides/week09.html#sql-query-clauses",
    "title": "SQL",
    "section": "SQL query clauses",
    "text": "SQL query clauses\n\nSELECT Determines which columns to include the query’s result set\nFROM Identifies the tables from which to retrieve data and how the tables should be joined\nWHERE Filters out unwanted data\nGROUP BY Used to group rows together by common column values\nHAVING Filters out unwanted groups\nORDER BY Sorts the rows of the final result set by one or more columns"
  },
  {
    "objectID": "slides/week09.html#pengiuns-data",
    "href": "slides/week09.html#pengiuns-data",
    "title": "SQL",
    "section": "Pengiuns data",
    "text": "Pengiuns data\n\nhead(as.data.frame(palmerpenguins::penguins))\n\n  species    island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n1  Adelie Torgersen           39.1          18.7               181        3750\n2  Adelie Torgersen           39.5          17.4               186        3800\n3  Adelie Torgersen           40.3          18.0               195        3250\n4  Adelie Torgersen             NA            NA                NA          NA\n5  Adelie Torgersen           36.7          19.3               193        3450\n6  Adelie Torgersen           39.3          20.6               190        3650\n     sex year\n1   male 2007\n2 female 2007\n3 female 2007\n4   &lt;NA&gt; 2007\n5 female 2007\n6   male 2007"
  },
  {
    "objectID": "slides/week09.html#select-clause",
    "href": "slides/week09.html#select-clause",
    "title": "SQL",
    "section": "Select clause",
    "text": "Select clause\n\nSELECT species, island, bill_length_mm\nFROM penguins\n\n\n\n      species    island bill_length_mm\n1      Adelie Torgersen           39.1\n2      Adelie Torgersen           39.5\n3      Adelie Torgersen           40.3\n4      Adelie Torgersen             NA\n5      Adelie Torgersen           36.7\n6      Adelie Torgersen           39.3\n7      Adelie Torgersen           38.9\n8      Adelie Torgersen           39.2\n9      Adelie Torgersen           34.1\n10     Adelie Torgersen           42.0\n11     Adelie Torgersen           37.8\n12     Adelie Torgersen           37.8\n13     Adelie Torgersen           41.1\n14     Adelie Torgersen           38.6\n15     Adelie Torgersen           34.6\n16     Adelie Torgersen           36.6\n17     Adelie Torgersen           38.7\n18     Adelie Torgersen           42.5\n19     Adelie Torgersen           34.4\n20     Adelie Torgersen           46.0\n21     Adelie    Biscoe           37.8\n22     Adelie    Biscoe           37.7\n23     Adelie    Biscoe           35.9\n24     Adelie    Biscoe           38.2\n25     Adelie    Biscoe           38.8\n26     Adelie    Biscoe           35.3\n27     Adelie    Biscoe           40.6\n28     Adelie    Biscoe           40.5\n29     Adelie    Biscoe           37.9\n30     Adelie    Biscoe           40.5\n31     Adelie     Dream           39.5\n32     Adelie     Dream           37.2\n33     Adelie     Dream           39.5\n34     Adelie     Dream           40.9\n35     Adelie     Dream           36.4\n36     Adelie     Dream           39.2\n37     Adelie     Dream           38.8\n38     Adelie     Dream           42.2\n39     Adelie     Dream           37.6\n40     Adelie     Dream           39.8\n41     Adelie     Dream           36.5\n42     Adelie     Dream           40.8\n43     Adelie     Dream           36.0\n44     Adelie     Dream           44.1\n45     Adelie     Dream           37.0\n46     Adelie     Dream           39.6\n47     Adelie     Dream           41.1\n48     Adelie     Dream           37.5\n49     Adelie     Dream           36.0\n50     Adelie     Dream           42.3\n51     Adelie    Biscoe           39.6\n52     Adelie    Biscoe           40.1\n53     Adelie    Biscoe           35.0\n54     Adelie    Biscoe           42.0\n55     Adelie    Biscoe           34.5\n56     Adelie    Biscoe           41.4\n57     Adelie    Biscoe           39.0\n58     Adelie    Biscoe           40.6\n59     Adelie    Biscoe           36.5\n60     Adelie    Biscoe           37.6\n61     Adelie    Biscoe           35.7\n62     Adelie    Biscoe           41.3\n63     Adelie    Biscoe           37.6\n64     Adelie    Biscoe           41.1\n65     Adelie    Biscoe           36.4\n66     Adelie    Biscoe           41.6\n67     Adelie    Biscoe           35.5\n68     Adelie    Biscoe           41.1\n69     Adelie Torgersen           35.9\n70     Adelie Torgersen           41.8\n71     Adelie Torgersen           33.5\n72     Adelie Torgersen           39.7\n73     Adelie Torgersen           39.6\n74     Adelie Torgersen           45.8\n75     Adelie Torgersen           35.5\n76     Adelie Torgersen           42.8\n77     Adelie Torgersen           40.9\n78     Adelie Torgersen           37.2\n79     Adelie Torgersen           36.2\n80     Adelie Torgersen           42.1\n81     Adelie Torgersen           34.6\n82     Adelie Torgersen           42.9\n83     Adelie Torgersen           36.7\n84     Adelie Torgersen           35.1\n85     Adelie     Dream           37.3\n86     Adelie     Dream           41.3\n87     Adelie     Dream           36.3\n88     Adelie     Dream           36.9\n89     Adelie     Dream           38.3\n90     Adelie     Dream           38.9\n91     Adelie     Dream           35.7\n92     Adelie     Dream           41.1\n93     Adelie     Dream           34.0\n94     Adelie     Dream           39.6\n95     Adelie     Dream           36.2\n96     Adelie     Dream           40.8\n97     Adelie     Dream           38.1\n98     Adelie     Dream           40.3\n99     Adelie     Dream           33.1\n100    Adelie     Dream           43.2\n101    Adelie    Biscoe           35.0\n102    Adelie    Biscoe           41.0\n103    Adelie    Biscoe           37.7\n104    Adelie    Biscoe           37.8\n105    Adelie    Biscoe           37.9\n106    Adelie    Biscoe           39.7\n107    Adelie    Biscoe           38.6\n108    Adelie    Biscoe           38.2\n109    Adelie    Biscoe           38.1\n110    Adelie    Biscoe           43.2\n111    Adelie    Biscoe           38.1\n112    Adelie    Biscoe           45.6\n113    Adelie    Biscoe           39.7\n114    Adelie    Biscoe           42.2\n115    Adelie    Biscoe           39.6\n116    Adelie    Biscoe           42.7\n117    Adelie Torgersen           38.6\n118    Adelie Torgersen           37.3\n119    Adelie Torgersen           35.7\n120    Adelie Torgersen           41.1\n121    Adelie Torgersen           36.2\n122    Adelie Torgersen           37.7\n123    Adelie Torgersen           40.2\n124    Adelie Torgersen           41.4\n125    Adelie Torgersen           35.2\n126    Adelie Torgersen           40.6\n127    Adelie Torgersen           38.8\n128    Adelie Torgersen           41.5\n129    Adelie Torgersen           39.0\n130    Adelie Torgersen           44.1\n131    Adelie Torgersen           38.5\n132    Adelie Torgersen           43.1\n133    Adelie     Dream           36.8\n134    Adelie     Dream           37.5\n135    Adelie     Dream           38.1\n136    Adelie     Dream           41.1\n137    Adelie     Dream           35.6\n138    Adelie     Dream           40.2\n139    Adelie     Dream           37.0\n140    Adelie     Dream           39.7\n141    Adelie     Dream           40.2\n142    Adelie     Dream           40.6\n143    Adelie     Dream           32.1\n144    Adelie     Dream           40.7\n145    Adelie     Dream           37.3\n146    Adelie     Dream           39.0\n147    Adelie     Dream           39.2\n148    Adelie     Dream           36.6\n149    Adelie     Dream           36.0\n150    Adelie     Dream           37.8\n151    Adelie     Dream           36.0\n152    Adelie     Dream           41.5\n153    Gentoo    Biscoe           46.1\n154    Gentoo    Biscoe           50.0\n155    Gentoo    Biscoe           48.7\n156    Gentoo    Biscoe           50.0\n157    Gentoo    Biscoe           47.6\n158    Gentoo    Biscoe           46.5\n159    Gentoo    Biscoe           45.4\n160    Gentoo    Biscoe           46.7\n161    Gentoo    Biscoe           43.3\n162    Gentoo    Biscoe           46.8\n163    Gentoo    Biscoe           40.9\n164    Gentoo    Biscoe           49.0\n165    Gentoo    Biscoe           45.5\n166    Gentoo    Biscoe           48.4\n167    Gentoo    Biscoe           45.8\n168    Gentoo    Biscoe           49.3\n169    Gentoo    Biscoe           42.0\n170    Gentoo    Biscoe           49.2\n171    Gentoo    Biscoe           46.2\n172    Gentoo    Biscoe           48.7\n173    Gentoo    Biscoe           50.2\n174    Gentoo    Biscoe           45.1\n175    Gentoo    Biscoe           46.5\n176    Gentoo    Biscoe           46.3\n177    Gentoo    Biscoe           42.9\n178    Gentoo    Biscoe           46.1\n179    Gentoo    Biscoe           44.5\n180    Gentoo    Biscoe           47.8\n181    Gentoo    Biscoe           48.2\n182    Gentoo    Biscoe           50.0\n183    Gentoo    Biscoe           47.3\n184    Gentoo    Biscoe           42.8\n185    Gentoo    Biscoe           45.1\n186    Gentoo    Biscoe           59.6\n187    Gentoo    Biscoe           49.1\n188    Gentoo    Biscoe           48.4\n189    Gentoo    Biscoe           42.6\n190    Gentoo    Biscoe           44.4\n191    Gentoo    Biscoe           44.0\n192    Gentoo    Biscoe           48.7\n193    Gentoo    Biscoe           42.7\n194    Gentoo    Biscoe           49.6\n195    Gentoo    Biscoe           45.3\n196    Gentoo    Biscoe           49.6\n197    Gentoo    Biscoe           50.5\n198    Gentoo    Biscoe           43.6\n199    Gentoo    Biscoe           45.5\n200    Gentoo    Biscoe           50.5\n201    Gentoo    Biscoe           44.9\n202    Gentoo    Biscoe           45.2\n203    Gentoo    Biscoe           46.6\n204    Gentoo    Biscoe           48.5\n205    Gentoo    Biscoe           45.1\n206    Gentoo    Biscoe           50.1\n207    Gentoo    Biscoe           46.5\n208    Gentoo    Biscoe           45.0\n209    Gentoo    Biscoe           43.8\n210    Gentoo    Biscoe           45.5\n211    Gentoo    Biscoe           43.2\n212    Gentoo    Biscoe           50.4\n213    Gentoo    Biscoe           45.3\n214    Gentoo    Biscoe           46.2\n215    Gentoo    Biscoe           45.7\n216    Gentoo    Biscoe           54.3\n217    Gentoo    Biscoe           45.8\n218    Gentoo    Biscoe           49.8\n219    Gentoo    Biscoe           46.2\n220    Gentoo    Biscoe           49.5\n221    Gentoo    Biscoe           43.5\n222    Gentoo    Biscoe           50.7\n223    Gentoo    Biscoe           47.7\n224    Gentoo    Biscoe           46.4\n225    Gentoo    Biscoe           48.2\n226    Gentoo    Biscoe           46.5\n227    Gentoo    Biscoe           46.4\n228    Gentoo    Biscoe           48.6\n229    Gentoo    Biscoe           47.5\n230    Gentoo    Biscoe           51.1\n231    Gentoo    Biscoe           45.2\n232    Gentoo    Biscoe           45.2\n233    Gentoo    Biscoe           49.1\n234    Gentoo    Biscoe           52.5\n235    Gentoo    Biscoe           47.4\n236    Gentoo    Biscoe           50.0\n237    Gentoo    Biscoe           44.9\n238    Gentoo    Biscoe           50.8\n239    Gentoo    Biscoe           43.4\n240    Gentoo    Biscoe           51.3\n241    Gentoo    Biscoe           47.5\n242    Gentoo    Biscoe           52.1\n243    Gentoo    Biscoe           47.5\n244    Gentoo    Biscoe           52.2\n245    Gentoo    Biscoe           45.5\n246    Gentoo    Biscoe           49.5\n247    Gentoo    Biscoe           44.5\n248    Gentoo    Biscoe           50.8\n249    Gentoo    Biscoe           49.4\n250    Gentoo    Biscoe           46.9\n251    Gentoo    Biscoe           48.4\n252    Gentoo    Biscoe           51.1\n253    Gentoo    Biscoe           48.5\n254    Gentoo    Biscoe           55.9\n255    Gentoo    Biscoe           47.2\n256    Gentoo    Biscoe           49.1\n257    Gentoo    Biscoe           47.3\n258    Gentoo    Biscoe           46.8\n259    Gentoo    Biscoe           41.7\n260    Gentoo    Biscoe           53.4\n261    Gentoo    Biscoe           43.3\n262    Gentoo    Biscoe           48.1\n263    Gentoo    Biscoe           50.5\n264    Gentoo    Biscoe           49.8\n265    Gentoo    Biscoe           43.5\n266    Gentoo    Biscoe           51.5\n267    Gentoo    Biscoe           46.2\n268    Gentoo    Biscoe           55.1\n269    Gentoo    Biscoe           44.5\n270    Gentoo    Biscoe           48.8\n271    Gentoo    Biscoe           47.2\n272    Gentoo    Biscoe             NA\n273    Gentoo    Biscoe           46.8\n274    Gentoo    Biscoe           50.4\n275    Gentoo    Biscoe           45.2\n276    Gentoo    Biscoe           49.9\n277 Chinstrap     Dream           46.5\n278 Chinstrap     Dream           50.0\n279 Chinstrap     Dream           51.3\n280 Chinstrap     Dream           45.4\n281 Chinstrap     Dream           52.7\n282 Chinstrap     Dream           45.2\n283 Chinstrap     Dream           46.1\n284 Chinstrap     Dream           51.3\n285 Chinstrap     Dream           46.0\n286 Chinstrap     Dream           51.3\n287 Chinstrap     Dream           46.6\n288 Chinstrap     Dream           51.7\n289 Chinstrap     Dream           47.0\n290 Chinstrap     Dream           52.0\n291 Chinstrap     Dream           45.9\n292 Chinstrap     Dream           50.5\n293 Chinstrap     Dream           50.3\n294 Chinstrap     Dream           58.0\n295 Chinstrap     Dream           46.4\n296 Chinstrap     Dream           49.2\n297 Chinstrap     Dream           42.4\n298 Chinstrap     Dream           48.5\n299 Chinstrap     Dream           43.2\n300 Chinstrap     Dream           50.6\n301 Chinstrap     Dream           46.7\n302 Chinstrap     Dream           52.0\n303 Chinstrap     Dream           50.5\n304 Chinstrap     Dream           49.5\n305 Chinstrap     Dream           46.4\n306 Chinstrap     Dream           52.8\n307 Chinstrap     Dream           40.9\n308 Chinstrap     Dream           54.2\n309 Chinstrap     Dream           42.5\n310 Chinstrap     Dream           51.0\n311 Chinstrap     Dream           49.7\n312 Chinstrap     Dream           47.5\n313 Chinstrap     Dream           47.6\n314 Chinstrap     Dream           52.0\n315 Chinstrap     Dream           46.9\n316 Chinstrap     Dream           53.5\n317 Chinstrap     Dream           49.0\n318 Chinstrap     Dream           46.2\n319 Chinstrap     Dream           50.9\n320 Chinstrap     Dream           45.5\n321 Chinstrap     Dream           50.9\n322 Chinstrap     Dream           50.8\n323 Chinstrap     Dream           50.1\n324 Chinstrap     Dream           49.0\n325 Chinstrap     Dream           51.5\n326 Chinstrap     Dream           49.8\n327 Chinstrap     Dream           48.1\n328 Chinstrap     Dream           51.4\n329 Chinstrap     Dream           45.7\n330 Chinstrap     Dream           50.7\n331 Chinstrap     Dream           42.5\n332 Chinstrap     Dream           52.2\n333 Chinstrap     Dream           45.2\n334 Chinstrap     Dream           49.3\n335 Chinstrap     Dream           50.2\n336 Chinstrap     Dream           45.6\n337 Chinstrap     Dream           51.9\n338 Chinstrap     Dream           46.8\n339 Chinstrap     Dream           45.7\n340 Chinstrap     Dream           55.8\n341 Chinstrap     Dream           43.5\n342 Chinstrap     Dream           49.6\n343 Chinstrap     Dream           50.8\n344 Chinstrap     Dream           50.2"
  },
  {
    "objectID": "slides/week09.html#select-clause-1",
    "href": "slides/week09.html#select-clause-1",
    "title": "SQL",
    "section": "Select clause",
    "text": "Select clause\n\nSELECT *\nFROM penguins\n\n\n\n      species    island bill_length_mm bill_depth_mm flipper_length_mm\n1      Adelie Torgersen           39.1          18.7               181\n2      Adelie Torgersen           39.5          17.4               186\n3      Adelie Torgersen           40.3          18.0               195\n4      Adelie Torgersen             NA            NA                NA\n5      Adelie Torgersen           36.7          19.3               193\n6      Adelie Torgersen           39.3          20.6               190\n7      Adelie Torgersen           38.9          17.8               181\n8      Adelie Torgersen           39.2          19.6               195\n9      Adelie Torgersen           34.1          18.1               193\n10     Adelie Torgersen           42.0          20.2               190\n11     Adelie Torgersen           37.8          17.1               186\n12     Adelie Torgersen           37.8          17.3               180\n13     Adelie Torgersen           41.1          17.6               182\n14     Adelie Torgersen           38.6          21.2               191\n15     Adelie Torgersen           34.6          21.1               198\n16     Adelie Torgersen           36.6          17.8               185\n17     Adelie Torgersen           38.7          19.0               195\n18     Adelie Torgersen           42.5          20.7               197\n19     Adelie Torgersen           34.4          18.4               184\n20     Adelie Torgersen           46.0          21.5               194\n21     Adelie    Biscoe           37.8          18.3               174\n22     Adelie    Biscoe           37.7          18.7               180\n23     Adelie    Biscoe           35.9          19.2               189\n24     Adelie    Biscoe           38.2          18.1               185\n25     Adelie    Biscoe           38.8          17.2               180\n26     Adelie    Biscoe           35.3          18.9               187\n27     Adelie    Biscoe           40.6          18.6               183\n28     Adelie    Biscoe           40.5          17.9               187\n29     Adelie    Biscoe           37.9          18.6               172\n30     Adelie    Biscoe           40.5          18.9               180\n31     Adelie     Dream           39.5          16.7               178\n32     Adelie     Dream           37.2          18.1               178\n33     Adelie     Dream           39.5          17.8               188\n34     Adelie     Dream           40.9          18.9               184\n35     Adelie     Dream           36.4          17.0               195\n36     Adelie     Dream           39.2          21.1               196\n37     Adelie     Dream           38.8          20.0               190\n38     Adelie     Dream           42.2          18.5               180\n39     Adelie     Dream           37.6          19.3               181\n40     Adelie     Dream           39.8          19.1               184\n41     Adelie     Dream           36.5          18.0               182\n42     Adelie     Dream           40.8          18.4               195\n43     Adelie     Dream           36.0          18.5               186\n44     Adelie     Dream           44.1          19.7               196\n45     Adelie     Dream           37.0          16.9               185\n46     Adelie     Dream           39.6          18.8               190\n47     Adelie     Dream           41.1          19.0               182\n48     Adelie     Dream           37.5          18.9               179\n49     Adelie     Dream           36.0          17.9               190\n50     Adelie     Dream           42.3          21.2               191\n51     Adelie    Biscoe           39.6          17.7               186\n52     Adelie    Biscoe           40.1          18.9               188\n53     Adelie    Biscoe           35.0          17.9               190\n54     Adelie    Biscoe           42.0          19.5               200\n55     Adelie    Biscoe           34.5          18.1               187\n56     Adelie    Biscoe           41.4          18.6               191\n57     Adelie    Biscoe           39.0          17.5               186\n58     Adelie    Biscoe           40.6          18.8               193\n59     Adelie    Biscoe           36.5          16.6               181\n60     Adelie    Biscoe           37.6          19.1               194\n61     Adelie    Biscoe           35.7          16.9               185\n62     Adelie    Biscoe           41.3          21.1               195\n63     Adelie    Biscoe           37.6          17.0               185\n64     Adelie    Biscoe           41.1          18.2               192\n65     Adelie    Biscoe           36.4          17.1               184\n66     Adelie    Biscoe           41.6          18.0               192\n67     Adelie    Biscoe           35.5          16.2               195\n68     Adelie    Biscoe           41.1          19.1               188\n69     Adelie Torgersen           35.9          16.6               190\n70     Adelie Torgersen           41.8          19.4               198\n71     Adelie Torgersen           33.5          19.0               190\n72     Adelie Torgersen           39.7          18.4               190\n73     Adelie Torgersen           39.6          17.2               196\n74     Adelie Torgersen           45.8          18.9               197\n75     Adelie Torgersen           35.5          17.5               190\n76     Adelie Torgersen           42.8          18.5               195\n77     Adelie Torgersen           40.9          16.8               191\n78     Adelie Torgersen           37.2          19.4               184\n79     Adelie Torgersen           36.2          16.1               187\n80     Adelie Torgersen           42.1          19.1               195\n81     Adelie Torgersen           34.6          17.2               189\n82     Adelie Torgersen           42.9          17.6               196\n83     Adelie Torgersen           36.7          18.8               187\n84     Adelie Torgersen           35.1          19.4               193\n85     Adelie     Dream           37.3          17.8               191\n86     Adelie     Dream           41.3          20.3               194\n87     Adelie     Dream           36.3          19.5               190\n88     Adelie     Dream           36.9          18.6               189\n89     Adelie     Dream           38.3          19.2               189\n90     Adelie     Dream           38.9          18.8               190\n91     Adelie     Dream           35.7          18.0               202\n92     Adelie     Dream           41.1          18.1               205\n93     Adelie     Dream           34.0          17.1               185\n94     Adelie     Dream           39.6          18.1               186\n95     Adelie     Dream           36.2          17.3               187\n96     Adelie     Dream           40.8          18.9               208\n97     Adelie     Dream           38.1          18.6               190\n98     Adelie     Dream           40.3          18.5               196\n99     Adelie     Dream           33.1          16.1               178\n100    Adelie     Dream           43.2          18.5               192\n101    Adelie    Biscoe           35.0          17.9               192\n102    Adelie    Biscoe           41.0          20.0               203\n103    Adelie    Biscoe           37.7          16.0               183\n104    Adelie    Biscoe           37.8          20.0               190\n105    Adelie    Biscoe           37.9          18.6               193\n106    Adelie    Biscoe           39.7          18.9               184\n107    Adelie    Biscoe           38.6          17.2               199\n108    Adelie    Biscoe           38.2          20.0               190\n109    Adelie    Biscoe           38.1          17.0               181\n110    Adelie    Biscoe           43.2          19.0               197\n111    Adelie    Biscoe           38.1          16.5               198\n112    Adelie    Biscoe           45.6          20.3               191\n113    Adelie    Biscoe           39.7          17.7               193\n114    Adelie    Biscoe           42.2          19.5               197\n115    Adelie    Biscoe           39.6          20.7               191\n116    Adelie    Biscoe           42.7          18.3               196\n117    Adelie Torgersen           38.6          17.0               188\n118    Adelie Torgersen           37.3          20.5               199\n119    Adelie Torgersen           35.7          17.0               189\n120    Adelie Torgersen           41.1          18.6               189\n121    Adelie Torgersen           36.2          17.2               187\n122    Adelie Torgersen           37.7          19.8               198\n123    Adelie Torgersen           40.2          17.0               176\n124    Adelie Torgersen           41.4          18.5               202\n125    Adelie Torgersen           35.2          15.9               186\n126    Adelie Torgersen           40.6          19.0               199\n127    Adelie Torgersen           38.8          17.6               191\n128    Adelie Torgersen           41.5          18.3               195\n129    Adelie Torgersen           39.0          17.1               191\n130    Adelie Torgersen           44.1          18.0               210\n131    Adelie Torgersen           38.5          17.9               190\n132    Adelie Torgersen           43.1          19.2               197\n133    Adelie     Dream           36.8          18.5               193\n134    Adelie     Dream           37.5          18.5               199\n135    Adelie     Dream           38.1          17.6               187\n136    Adelie     Dream           41.1          17.5               190\n137    Adelie     Dream           35.6          17.5               191\n138    Adelie     Dream           40.2          20.1               200\n139    Adelie     Dream           37.0          16.5               185\n140    Adelie     Dream           39.7          17.9               193\n141    Adelie     Dream           40.2          17.1               193\n142    Adelie     Dream           40.6          17.2               187\n143    Adelie     Dream           32.1          15.5               188\n144    Adelie     Dream           40.7          17.0               190\n145    Adelie     Dream           37.3          16.8               192\n146    Adelie     Dream           39.0          18.7               185\n147    Adelie     Dream           39.2          18.6               190\n148    Adelie     Dream           36.6          18.4               184\n149    Adelie     Dream           36.0          17.8               195\n150    Adelie     Dream           37.8          18.1               193\n151    Adelie     Dream           36.0          17.1               187\n152    Adelie     Dream           41.5          18.5               201\n153    Gentoo    Biscoe           46.1          13.2               211\n154    Gentoo    Biscoe           50.0          16.3               230\n155    Gentoo    Biscoe           48.7          14.1               210\n156    Gentoo    Biscoe           50.0          15.2               218\n157    Gentoo    Biscoe           47.6          14.5               215\n158    Gentoo    Biscoe           46.5          13.5               210\n159    Gentoo    Biscoe           45.4          14.6               211\n160    Gentoo    Biscoe           46.7          15.3               219\n161    Gentoo    Biscoe           43.3          13.4               209\n162    Gentoo    Biscoe           46.8          15.4               215\n163    Gentoo    Biscoe           40.9          13.7               214\n164    Gentoo    Biscoe           49.0          16.1               216\n165    Gentoo    Biscoe           45.5          13.7               214\n166    Gentoo    Biscoe           48.4          14.6               213\n167    Gentoo    Biscoe           45.8          14.6               210\n168    Gentoo    Biscoe           49.3          15.7               217\n169    Gentoo    Biscoe           42.0          13.5               210\n170    Gentoo    Biscoe           49.2          15.2               221\n171    Gentoo    Biscoe           46.2          14.5               209\n172    Gentoo    Biscoe           48.7          15.1               222\n173    Gentoo    Biscoe           50.2          14.3               218\n174    Gentoo    Biscoe           45.1          14.5               215\n175    Gentoo    Biscoe           46.5          14.5               213\n176    Gentoo    Biscoe           46.3          15.8               215\n177    Gentoo    Biscoe           42.9          13.1               215\n178    Gentoo    Biscoe           46.1          15.1               215\n179    Gentoo    Biscoe           44.5          14.3               216\n180    Gentoo    Biscoe           47.8          15.0               215\n181    Gentoo    Biscoe           48.2          14.3               210\n182    Gentoo    Biscoe           50.0          15.3               220\n183    Gentoo    Biscoe           47.3          15.3               222\n184    Gentoo    Biscoe           42.8          14.2               209\n185    Gentoo    Biscoe           45.1          14.5               207\n186    Gentoo    Biscoe           59.6          17.0               230\n187    Gentoo    Biscoe           49.1          14.8               220\n188    Gentoo    Biscoe           48.4          16.3               220\n189    Gentoo    Biscoe           42.6          13.7               213\n190    Gentoo    Biscoe           44.4          17.3               219\n191    Gentoo    Biscoe           44.0          13.6               208\n192    Gentoo    Biscoe           48.7          15.7               208\n193    Gentoo    Biscoe           42.7          13.7               208\n194    Gentoo    Biscoe           49.6          16.0               225\n195    Gentoo    Biscoe           45.3          13.7               210\n196    Gentoo    Biscoe           49.6          15.0               216\n197    Gentoo    Biscoe           50.5          15.9               222\n198    Gentoo    Biscoe           43.6          13.9               217\n199    Gentoo    Biscoe           45.5          13.9               210\n200    Gentoo    Biscoe           50.5          15.9               225\n201    Gentoo    Biscoe           44.9          13.3               213\n202    Gentoo    Biscoe           45.2          15.8               215\n203    Gentoo    Biscoe           46.6          14.2               210\n204    Gentoo    Biscoe           48.5          14.1               220\n205    Gentoo    Biscoe           45.1          14.4               210\n206    Gentoo    Biscoe           50.1          15.0               225\n207    Gentoo    Biscoe           46.5          14.4               217\n208    Gentoo    Biscoe           45.0          15.4               220\n209    Gentoo    Biscoe           43.8          13.9               208\n210    Gentoo    Biscoe           45.5          15.0               220\n211    Gentoo    Biscoe           43.2          14.5               208\n212    Gentoo    Biscoe           50.4          15.3               224\n213    Gentoo    Biscoe           45.3          13.8               208\n214    Gentoo    Biscoe           46.2          14.9               221\n215    Gentoo    Biscoe           45.7          13.9               214\n216    Gentoo    Biscoe           54.3          15.7               231\n217    Gentoo    Biscoe           45.8          14.2               219\n218    Gentoo    Biscoe           49.8          16.8               230\n219    Gentoo    Biscoe           46.2          14.4               214\n220    Gentoo    Biscoe           49.5          16.2               229\n221    Gentoo    Biscoe           43.5          14.2               220\n222    Gentoo    Biscoe           50.7          15.0               223\n223    Gentoo    Biscoe           47.7          15.0               216\n224    Gentoo    Biscoe           46.4          15.6               221\n225    Gentoo    Biscoe           48.2          15.6               221\n226    Gentoo    Biscoe           46.5          14.8               217\n227    Gentoo    Biscoe           46.4          15.0               216\n228    Gentoo    Biscoe           48.6          16.0               230\n229    Gentoo    Biscoe           47.5          14.2               209\n230    Gentoo    Biscoe           51.1          16.3               220\n231    Gentoo    Biscoe           45.2          13.8               215\n232    Gentoo    Biscoe           45.2          16.4               223\n233    Gentoo    Biscoe           49.1          14.5               212\n234    Gentoo    Biscoe           52.5          15.6               221\n235    Gentoo    Biscoe           47.4          14.6               212\n236    Gentoo    Biscoe           50.0          15.9               224\n237    Gentoo    Biscoe           44.9          13.8               212\n238    Gentoo    Biscoe           50.8          17.3               228\n239    Gentoo    Biscoe           43.4          14.4               218\n240    Gentoo    Biscoe           51.3          14.2               218\n241    Gentoo    Biscoe           47.5          14.0               212\n242    Gentoo    Biscoe           52.1          17.0               230\n243    Gentoo    Biscoe           47.5          15.0               218\n244    Gentoo    Biscoe           52.2          17.1               228\n245    Gentoo    Biscoe           45.5          14.5               212\n246    Gentoo    Biscoe           49.5          16.1               224\n247    Gentoo    Biscoe           44.5          14.7               214\n248    Gentoo    Biscoe           50.8          15.7               226\n249    Gentoo    Biscoe           49.4          15.8               216\n250    Gentoo    Biscoe           46.9          14.6               222\n251    Gentoo    Biscoe           48.4          14.4               203\n252    Gentoo    Biscoe           51.1          16.5               225\n253    Gentoo    Biscoe           48.5          15.0               219\n254    Gentoo    Biscoe           55.9          17.0               228\n255    Gentoo    Biscoe           47.2          15.5               215\n256    Gentoo    Biscoe           49.1          15.0               228\n257    Gentoo    Biscoe           47.3          13.8               216\n258    Gentoo    Biscoe           46.8          16.1               215\n259    Gentoo    Biscoe           41.7          14.7               210\n260    Gentoo    Biscoe           53.4          15.8               219\n261    Gentoo    Biscoe           43.3          14.0               208\n262    Gentoo    Biscoe           48.1          15.1               209\n263    Gentoo    Biscoe           50.5          15.2               216\n264    Gentoo    Biscoe           49.8          15.9               229\n265    Gentoo    Biscoe           43.5          15.2               213\n266    Gentoo    Biscoe           51.5          16.3               230\n267    Gentoo    Biscoe           46.2          14.1               217\n268    Gentoo    Biscoe           55.1          16.0               230\n269    Gentoo    Biscoe           44.5          15.7               217\n270    Gentoo    Biscoe           48.8          16.2               222\n271    Gentoo    Biscoe           47.2          13.7               214\n272    Gentoo    Biscoe             NA            NA                NA\n273    Gentoo    Biscoe           46.8          14.3               215\n274    Gentoo    Biscoe           50.4          15.7               222\n275    Gentoo    Biscoe           45.2          14.8               212\n276    Gentoo    Biscoe           49.9          16.1               213\n277 Chinstrap     Dream           46.5          17.9               192\n278 Chinstrap     Dream           50.0          19.5               196\n279 Chinstrap     Dream           51.3          19.2               193\n280 Chinstrap     Dream           45.4          18.7               188\n281 Chinstrap     Dream           52.7          19.8               197\n282 Chinstrap     Dream           45.2          17.8               198\n283 Chinstrap     Dream           46.1          18.2               178\n284 Chinstrap     Dream           51.3          18.2               197\n285 Chinstrap     Dream           46.0          18.9               195\n286 Chinstrap     Dream           51.3          19.9               198\n287 Chinstrap     Dream           46.6          17.8               193\n288 Chinstrap     Dream           51.7          20.3               194\n289 Chinstrap     Dream           47.0          17.3               185\n290 Chinstrap     Dream           52.0          18.1               201\n291 Chinstrap     Dream           45.9          17.1               190\n292 Chinstrap     Dream           50.5          19.6               201\n293 Chinstrap     Dream           50.3          20.0               197\n294 Chinstrap     Dream           58.0          17.8               181\n295 Chinstrap     Dream           46.4          18.6               190\n296 Chinstrap     Dream           49.2          18.2               195\n297 Chinstrap     Dream           42.4          17.3               181\n298 Chinstrap     Dream           48.5          17.5               191\n299 Chinstrap     Dream           43.2          16.6               187\n300 Chinstrap     Dream           50.6          19.4               193\n301 Chinstrap     Dream           46.7          17.9               195\n302 Chinstrap     Dream           52.0          19.0               197\n303 Chinstrap     Dream           50.5          18.4               200\n304 Chinstrap     Dream           49.5          19.0               200\n305 Chinstrap     Dream           46.4          17.8               191\n306 Chinstrap     Dream           52.8          20.0               205\n307 Chinstrap     Dream           40.9          16.6               187\n308 Chinstrap     Dream           54.2          20.8               201\n309 Chinstrap     Dream           42.5          16.7               187\n310 Chinstrap     Dream           51.0          18.8               203\n311 Chinstrap     Dream           49.7          18.6               195\n312 Chinstrap     Dream           47.5          16.8               199\n313 Chinstrap     Dream           47.6          18.3               195\n314 Chinstrap     Dream           52.0          20.7               210\n315 Chinstrap     Dream           46.9          16.6               192\n316 Chinstrap     Dream           53.5          19.9               205\n317 Chinstrap     Dream           49.0          19.5               210\n318 Chinstrap     Dream           46.2          17.5               187\n319 Chinstrap     Dream           50.9          19.1               196\n320 Chinstrap     Dream           45.5          17.0               196\n321 Chinstrap     Dream           50.9          17.9               196\n322 Chinstrap     Dream           50.8          18.5               201\n323 Chinstrap     Dream           50.1          17.9               190\n324 Chinstrap     Dream           49.0          19.6               212\n325 Chinstrap     Dream           51.5          18.7               187\n326 Chinstrap     Dream           49.8          17.3               198\n327 Chinstrap     Dream           48.1          16.4               199\n328 Chinstrap     Dream           51.4          19.0               201\n329 Chinstrap     Dream           45.7          17.3               193\n330 Chinstrap     Dream           50.7          19.7               203\n331 Chinstrap     Dream           42.5          17.3               187\n332 Chinstrap     Dream           52.2          18.8               197\n333 Chinstrap     Dream           45.2          16.6               191\n334 Chinstrap     Dream           49.3          19.9               203\n335 Chinstrap     Dream           50.2          18.8               202\n336 Chinstrap     Dream           45.6          19.4               194\n337 Chinstrap     Dream           51.9          19.5               206\n338 Chinstrap     Dream           46.8          16.5               189\n339 Chinstrap     Dream           45.7          17.0               195\n340 Chinstrap     Dream           55.8          19.8               207\n341 Chinstrap     Dream           43.5          18.1               202\n342 Chinstrap     Dream           49.6          18.2               193\n343 Chinstrap     Dream           50.8          19.0               210\n344 Chinstrap     Dream           50.2          18.7               198\n    body_mass_g    sex year\n1          3750   male 2007\n2          3800 female 2007\n3          3250 female 2007\n4            NA   &lt;NA&gt; 2007\n5          3450 female 2007\n6          3650   male 2007\n7          3625 female 2007\n8          4675   male 2007\n9          3475   &lt;NA&gt; 2007\n10         4250   &lt;NA&gt; 2007\n11         3300   &lt;NA&gt; 2007\n12         3700   &lt;NA&gt; 2007\n13         3200 female 2007\n14         3800   male 2007\n15         4400   male 2007\n16         3700 female 2007\n17         3450 female 2007\n18         4500   male 2007\n19         3325 female 2007\n20         4200   male 2007\n21         3400 female 2007\n22         3600   male 2007\n23         3800 female 2007\n24         3950   male 2007\n25         3800   male 2007\n26         3800 female 2007\n27         3550   male 2007\n28         3200 female 2007\n29         3150 female 2007\n30         3950   male 2007\n31         3250 female 2007\n32         3900   male 2007\n33         3300 female 2007\n34         3900   male 2007\n35         3325 female 2007\n36         4150   male 2007\n37         3950   male 2007\n38         3550 female 2007\n39         3300 female 2007\n40         4650   male 2007\n41         3150 female 2007\n42         3900   male 2007\n43         3100 female 2007\n44         4400   male 2007\n45         3000 female 2007\n46         4600   male 2007\n47         3425   male 2007\n48         2975   &lt;NA&gt; 2007\n49         3450 female 2007\n50         4150   male 2007\n51         3500 female 2008\n52         4300   male 2008\n53         3450 female 2008\n54         4050   male 2008\n55         2900 female 2008\n56         3700   male 2008\n57         3550 female 2008\n58         3800   male 2008\n59         2850 female 2008\n60         3750   male 2008\n61         3150 female 2008\n62         4400   male 2008\n63         3600 female 2008\n64         4050   male 2008\n65         2850 female 2008\n66         3950   male 2008\n67         3350 female 2008\n68         4100   male 2008\n69         3050 female 2008\n70         4450   male 2008\n71         3600 female 2008\n72         3900   male 2008\n73         3550 female 2008\n74         4150   male 2008\n75         3700 female 2008\n76         4250   male 2008\n77         3700 female 2008\n78         3900   male 2008\n79         3550 female 2008\n80         4000   male 2008\n81         3200 female 2008\n82         4700   male 2008\n83         3800 female 2008\n84         4200   male 2008\n85         3350 female 2008\n86         3550   male 2008\n87         3800   male 2008\n88         3500 female 2008\n89         3950   male 2008\n90         3600 female 2008\n91         3550 female 2008\n92         4300   male 2008\n93         3400 female 2008\n94         4450   male 2008\n95         3300 female 2008\n96         4300   male 2008\n97         3700 female 2008\n98         4350   male 2008\n99         2900 female 2008\n100        4100   male 2008\n101        3725 female 2009\n102        4725   male 2009\n103        3075 female 2009\n104        4250   male 2009\n105        2925 female 2009\n106        3550   male 2009\n107        3750 female 2009\n108        3900   male 2009\n109        3175 female 2009\n110        4775   male 2009\n111        3825 female 2009\n112        4600   male 2009\n113        3200 female 2009\n114        4275   male 2009\n115        3900 female 2009\n116        4075   male 2009\n117        2900 female 2009\n118        3775   male 2009\n119        3350 female 2009\n120        3325   male 2009\n121        3150 female 2009\n122        3500   male 2009\n123        3450 female 2009\n124        3875   male 2009\n125        3050 female 2009\n126        4000   male 2009\n127        3275 female 2009\n128        4300   male 2009\n129        3050 female 2009\n130        4000   male 2009\n131        3325 female 2009\n132        3500   male 2009\n133        3500 female 2009\n134        4475   male 2009\n135        3425 female 2009\n136        3900   male 2009\n137        3175 female 2009\n138        3975   male 2009\n139        3400 female 2009\n140        4250   male 2009\n141        3400 female 2009\n142        3475   male 2009\n143        3050 female 2009\n144        3725   male 2009\n145        3000 female 2009\n146        3650   male 2009\n147        4250   male 2009\n148        3475 female 2009\n149        3450 female 2009\n150        3750   male 2009\n151        3700 female 2009\n152        4000   male 2009\n153        4500 female 2007\n154        5700   male 2007\n155        4450 female 2007\n156        5700   male 2007\n157        5400   male 2007\n158        4550 female 2007\n159        4800 female 2007\n160        5200   male 2007\n161        4400 female 2007\n162        5150   male 2007\n163        4650 female 2007\n164        5550   male 2007\n165        4650 female 2007\n166        5850   male 2007\n167        4200 female 2007\n168        5850   male 2007\n169        4150 female 2007\n170        6300   male 2007\n171        4800 female 2007\n172        5350   male 2007\n173        5700   male 2007\n174        5000 female 2007\n175        4400 female 2007\n176        5050   male 2007\n177        5000 female 2007\n178        5100   male 2007\n179        4100   &lt;NA&gt; 2007\n180        5650   male 2007\n181        4600 female 2007\n182        5550   male 2007\n183        5250   male 2007\n184        4700 female 2007\n185        5050 female 2007\n186        6050   male 2007\n187        5150 female 2008\n188        5400   male 2008\n189        4950 female 2008\n190        5250   male 2008\n191        4350 female 2008\n192        5350   male 2008\n193        3950 female 2008\n194        5700   male 2008\n195        4300 female 2008\n196        4750   male 2008\n197        5550   male 2008\n198        4900 female 2008\n199        4200 female 2008\n200        5400   male 2008\n201        5100 female 2008\n202        5300   male 2008\n203        4850 female 2008\n204        5300   male 2008\n205        4400 female 2008\n206        5000   male 2008\n207        4900 female 2008\n208        5050   male 2008\n209        4300 female 2008\n210        5000   male 2008\n211        4450 female 2008\n212        5550   male 2008\n213        4200 female 2008\n214        5300   male 2008\n215        4400 female 2008\n216        5650   male 2008\n217        4700 female 2008\n218        5700   male 2008\n219        4650   &lt;NA&gt; 2008\n220        5800   male 2008\n221        4700 female 2008\n222        5550   male 2008\n223        4750 female 2008\n224        5000   male 2008\n225        5100   male 2008\n226        5200 female 2008\n227        4700 female 2008\n228        5800   male 2008\n229        4600 female 2008\n230        6000   male 2008\n231        4750 female 2008\n232        5950   male 2008\n233        4625 female 2009\n234        5450   male 2009\n235        4725 female 2009\n236        5350   male 2009\n237        4750 female 2009\n238        5600   male 2009\n239        4600 female 2009\n240        5300   male 2009\n241        4875 female 2009\n242        5550   male 2009\n243        4950 female 2009\n244        5400   male 2009\n245        4750 female 2009\n246        5650   male 2009\n247        4850 female 2009\n248        5200   male 2009\n249        4925   male 2009\n250        4875 female 2009\n251        4625 female 2009\n252        5250   male 2009\n253        4850 female 2009\n254        5600   male 2009\n255        4975 female 2009\n256        5500   male 2009\n257        4725   &lt;NA&gt; 2009\n258        5500   male 2009\n259        4700 female 2009\n260        5500   male 2009\n261        4575 female 2009\n262        5500   male 2009\n263        5000 female 2009\n264        5950   male 2009\n265        4650 female 2009\n266        5500   male 2009\n267        4375 female 2009\n268        5850   male 2009\n269        4875   &lt;NA&gt; 2009\n270        6000   male 2009\n271        4925 female 2009\n272          NA   &lt;NA&gt; 2009\n273        4850 female 2009\n274        5750   male 2009\n275        5200 female 2009\n276        5400   male 2009\n277        3500 female 2007\n278        3900   male 2007\n279        3650   male 2007\n280        3525 female 2007\n281        3725   male 2007\n282        3950 female 2007\n283        3250 female 2007\n284        3750   male 2007\n285        4150 female 2007\n286        3700   male 2007\n287        3800 female 2007\n288        3775   male 2007\n289        3700 female 2007\n290        4050   male 2007\n291        3575 female 2007\n292        4050   male 2007\n293        3300   male 2007\n294        3700 female 2007\n295        3450 female 2007\n296        4400   male 2007\n297        3600 female 2007\n298        3400   male 2007\n299        2900 female 2007\n300        3800   male 2007\n301        3300 female 2007\n302        4150   male 2007\n303        3400 female 2008\n304        3800   male 2008\n305        3700 female 2008\n306        4550   male 2008\n307        3200 female 2008\n308        4300   male 2008\n309        3350 female 2008\n310        4100   male 2008\n311        3600   male 2008\n312        3900 female 2008\n313        3850 female 2008\n314        4800   male 2008\n315        2700 female 2008\n316        4500   male 2008\n317        3950   male 2008\n318        3650 female 2008\n319        3550   male 2008\n320        3500 female 2008\n321        3675 female 2009\n322        4450   male 2009\n323        3400 female 2009\n324        4300   male 2009\n325        3250   male 2009\n326        3675 female 2009\n327        3325 female 2009\n328        3950   male 2009\n329        3600 female 2009\n330        4050   male 2009\n331        3350 female 2009\n332        3450   male 2009\n333        3250 female 2009\n334        4050   male 2009\n335        3800   male 2009\n336        3525 female 2009\n337        3950   male 2009\n338        3650 female 2009\n339        3650 female 2009\n340        4000   male 2009\n341        3400 female 2009\n342        3775   male 2009\n343        4100   male 2009\n344        3775 female 2009"
  },
  {
    "objectID": "slides/week09.html#select-clause---aliases",
    "href": "slides/week09.html#select-clause---aliases",
    "title": "SQL",
    "section": "Select clause - aliases",
    "text": "Select clause - aliases\n\nSELECT upper(island) AS island,\n  bill_length_mm * bill_depth_mm AS bill_area_mm2\nFROM penguins\n\n\n\n       island bill_area_mm2\n1   TORGERSEN        731.17\n2   TORGERSEN        687.30\n3   TORGERSEN        725.40\n4   TORGERSEN            NA\n5   TORGERSEN        708.31\n6   TORGERSEN        809.58\n7   TORGERSEN        692.42\n8   TORGERSEN        768.32\n9   TORGERSEN        617.21\n10  TORGERSEN        848.40\n11  TORGERSEN        646.38\n12  TORGERSEN        653.94\n13  TORGERSEN        723.36\n14  TORGERSEN        818.32\n15  TORGERSEN        730.06\n16  TORGERSEN        651.48\n17  TORGERSEN        735.30\n18  TORGERSEN        879.75\n19  TORGERSEN        632.96\n20  TORGERSEN        989.00\n21     BISCOE        691.74\n22     BISCOE        704.99\n23     BISCOE        689.28\n24     BISCOE        691.42\n25     BISCOE        667.36\n26     BISCOE        667.17\n27     BISCOE        755.16\n28     BISCOE        724.95\n29     BISCOE        704.94\n30     BISCOE        765.45\n31      DREAM        659.65\n32      DREAM        673.32\n33      DREAM        703.10\n34      DREAM        773.01\n35      DREAM        618.80\n36      DREAM        827.12\n37      DREAM        776.00\n38      DREAM        780.70\n39      DREAM        725.68\n40      DREAM        760.18\n41      DREAM        657.00\n42      DREAM        750.72\n43      DREAM        666.00\n44      DREAM        868.77\n45      DREAM        625.30\n46      DREAM        744.48\n47      DREAM        780.90\n48      DREAM        708.75\n49      DREAM        644.40\n50      DREAM        896.76\n51     BISCOE        700.92\n52     BISCOE        757.89\n53     BISCOE        626.50\n54     BISCOE        819.00\n55     BISCOE        624.45\n56     BISCOE        770.04\n57     BISCOE        682.50\n58     BISCOE        763.28\n59     BISCOE        605.90\n60     BISCOE        718.16\n61     BISCOE        603.33\n62     BISCOE        871.43\n63     BISCOE        639.20\n64     BISCOE        748.02\n65     BISCOE        622.44\n66     BISCOE        748.80\n67     BISCOE        575.10\n68     BISCOE        785.01\n69  TORGERSEN        595.94\n70  TORGERSEN        810.92\n71  TORGERSEN        636.50\n72  TORGERSEN        730.48\n73  TORGERSEN        681.12\n74  TORGERSEN        865.62\n75  TORGERSEN        621.25\n76  TORGERSEN        791.80\n77  TORGERSEN        687.12\n78  TORGERSEN        721.68\n79  TORGERSEN        582.82\n80  TORGERSEN        804.11\n81  TORGERSEN        595.12\n82  TORGERSEN        755.04\n83  TORGERSEN        689.96\n84  TORGERSEN        680.94\n85      DREAM        663.94\n86      DREAM        838.39\n87      DREAM        707.85\n88      DREAM        686.34\n89      DREAM        735.36\n90      DREAM        731.32\n91      DREAM        642.60\n92      DREAM        743.91\n93      DREAM        581.40\n94      DREAM        716.76\n95      DREAM        626.26\n96      DREAM        771.12\n97      DREAM        708.66\n98      DREAM        745.55\n99      DREAM        532.91\n100     DREAM        799.20\n101    BISCOE        626.50\n102    BISCOE        820.00\n103    BISCOE        603.20\n104    BISCOE        756.00\n105    BISCOE        704.94\n106    BISCOE        750.33\n107    BISCOE        663.92\n108    BISCOE        764.00\n109    BISCOE        647.70\n110    BISCOE        820.80\n111    BISCOE        628.65\n112    BISCOE        925.68\n113    BISCOE        702.69\n114    BISCOE        822.90\n115    BISCOE        819.72\n116    BISCOE        781.41\n117 TORGERSEN        656.20\n118 TORGERSEN        764.65\n119 TORGERSEN        606.90\n120 TORGERSEN        764.46\n121 TORGERSEN        622.64\n122 TORGERSEN        746.46\n123 TORGERSEN        683.40\n124 TORGERSEN        765.90\n125 TORGERSEN        559.68\n126 TORGERSEN        771.40\n127 TORGERSEN        682.88\n128 TORGERSEN        759.45\n129 TORGERSEN        666.90\n130 TORGERSEN        793.80\n131 TORGERSEN        689.15\n132 TORGERSEN        827.52\n133     DREAM        680.80\n134     DREAM        693.75\n135     DREAM        670.56\n136     DREAM        719.25\n137     DREAM        623.00\n138     DREAM        808.02\n139     DREAM        610.50\n140     DREAM        710.63\n141     DREAM        687.42\n142     DREAM        698.32\n143     DREAM        497.55\n144     DREAM        691.90\n145     DREAM        626.64\n146     DREAM        729.30\n147     DREAM        729.12\n148     DREAM        673.44\n149     DREAM        640.80\n150     DREAM        684.18\n151     DREAM        615.60\n152     DREAM        767.75\n153    BISCOE        608.52\n154    BISCOE        815.00\n155    BISCOE        686.67\n156    BISCOE        760.00\n157    BISCOE        690.20\n158    BISCOE        627.75\n159    BISCOE        662.84\n160    BISCOE        714.51\n161    BISCOE        580.22\n162    BISCOE        720.72\n163    BISCOE        560.33\n164    BISCOE        788.90\n165    BISCOE        623.35\n166    BISCOE        706.64\n167    BISCOE        668.68\n168    BISCOE        774.01\n169    BISCOE        567.00\n170    BISCOE        747.84\n171    BISCOE        669.90\n172    BISCOE        735.37\n173    BISCOE        717.86\n174    BISCOE        653.95\n175    BISCOE        674.25\n176    BISCOE        731.54\n177    BISCOE        561.99\n178    BISCOE        696.11\n179    BISCOE        636.35\n180    BISCOE        717.00\n181    BISCOE        689.26\n182    BISCOE        765.00\n183    BISCOE        723.69\n184    BISCOE        607.76\n185    BISCOE        653.95\n186    BISCOE       1013.20\n187    BISCOE        726.68\n188    BISCOE        788.92\n189    BISCOE        583.62\n190    BISCOE        768.12\n191    BISCOE        598.40\n192    BISCOE        764.59\n193    BISCOE        584.99\n194    BISCOE        793.60\n195    BISCOE        620.61\n196    BISCOE        744.00\n197    BISCOE        802.95\n198    BISCOE        606.04\n199    BISCOE        632.45\n200    BISCOE        802.95\n201    BISCOE        597.17\n202    BISCOE        714.16\n203    BISCOE        661.72\n204    BISCOE        683.85\n205    BISCOE        649.44\n206    BISCOE        751.50\n207    BISCOE        669.60\n208    BISCOE        693.00\n209    BISCOE        608.82\n210    BISCOE        682.50\n211    BISCOE        626.40\n212    BISCOE        771.12\n213    BISCOE        625.14\n214    BISCOE        688.38\n215    BISCOE        635.23\n216    BISCOE        852.51\n217    BISCOE        650.36\n218    BISCOE        836.64\n219    BISCOE        665.28\n220    BISCOE        801.90\n221    BISCOE        617.70\n222    BISCOE        760.50\n223    BISCOE        715.50\n224    BISCOE        723.84\n225    BISCOE        751.92\n226    BISCOE        688.20\n227    BISCOE        696.00\n228    BISCOE        777.60\n229    BISCOE        674.50\n230    BISCOE        832.93\n231    BISCOE        623.76\n232    BISCOE        741.28\n233    BISCOE        711.95\n234    BISCOE        819.00\n235    BISCOE        692.04\n236    BISCOE        795.00\n237    BISCOE        619.62\n238    BISCOE        878.84\n239    BISCOE        624.96\n240    BISCOE        728.46\n241    BISCOE        665.00\n242    BISCOE        885.70\n243    BISCOE        712.50\n244    BISCOE        892.62\n245    BISCOE        659.75\n246    BISCOE        796.95\n247    BISCOE        654.15\n248    BISCOE        797.56\n249    BISCOE        780.52\n250    BISCOE        684.74\n251    BISCOE        696.96\n252    BISCOE        843.15\n253    BISCOE        727.50\n254    BISCOE        950.30\n255    BISCOE        731.60\n256    BISCOE        736.50\n257    BISCOE        652.74\n258    BISCOE        753.48\n259    BISCOE        612.99\n260    BISCOE        843.72\n261    BISCOE        606.20\n262    BISCOE        726.31\n263    BISCOE        767.60\n264    BISCOE        791.82\n265    BISCOE        661.20\n266    BISCOE        839.45\n267    BISCOE        651.42\n268    BISCOE        881.60\n269    BISCOE        698.65\n270    BISCOE        790.56\n271    BISCOE        646.64\n272    BISCOE            NA\n273    BISCOE        669.24\n274    BISCOE        791.28\n275    BISCOE        668.96\n276    BISCOE        803.39\n277     DREAM        832.35\n278     DREAM        975.00\n279     DREAM        984.96\n280     DREAM        848.98\n281     DREAM       1043.46\n282     DREAM        804.56\n283     DREAM        839.02\n284     DREAM        933.66\n285     DREAM        869.40\n286     DREAM       1020.87\n287     DREAM        829.48\n288     DREAM       1049.51\n289     DREAM        813.10\n290     DREAM        941.20\n291     DREAM        784.89\n292     DREAM        989.80\n293     DREAM       1006.00\n294     DREAM       1032.40\n295     DREAM        863.04\n296     DREAM        895.44\n297     DREAM        733.52\n298     DREAM        848.75\n299     DREAM        717.12\n300     DREAM        981.64\n301     DREAM        835.93\n302     DREAM        988.00\n303     DREAM        929.20\n304     DREAM        940.50\n305     DREAM        825.92\n306     DREAM       1056.00\n307     DREAM        678.94\n308     DREAM       1127.36\n309     DREAM        709.75\n310     DREAM        958.80\n311     DREAM        924.42\n312     DREAM        798.00\n313     DREAM        871.08\n314     DREAM       1076.40\n315     DREAM        778.54\n316     DREAM       1064.65\n317     DREAM        955.50\n318     DREAM        808.50\n319     DREAM        972.19\n320     DREAM        773.50\n321     DREAM        911.11\n322     DREAM        939.80\n323     DREAM        896.79\n324     DREAM        960.40\n325     DREAM        963.05\n326     DREAM        861.54\n327     DREAM        788.84\n328     DREAM        976.60\n329     DREAM        790.61\n330     DREAM        998.79\n331     DREAM        735.25\n332     DREAM        981.36\n333     DREAM        750.32\n334     DREAM        981.07\n335     DREAM        943.76\n336     DREAM        884.64\n337     DREAM       1012.05\n338     DREAM        772.20\n339     DREAM        776.90\n340     DREAM       1104.84\n341     DREAM        787.35\n342     DREAM        902.72\n343     DREAM        965.20\n344     DREAM        938.74"
  },
  {
    "objectID": "slides/week09.html#select-clause---removing-duplicates",
    "href": "slides/week09.html#select-clause---removing-duplicates",
    "title": "SQL",
    "section": "Select clause - removing duplicates",
    "text": "Select clause - removing duplicates\n\nSELECT DISTINCT island, species\nFROM penguins\n\n\n\n     island   species\n1 Torgersen    Adelie\n2    Biscoe    Adelie\n3     Dream    Adelie\n4    Biscoe    Gentoo\n5     Dream Chinstrap"
  },
  {
    "objectID": "slides/week09.html#from-clause---subquery",
    "href": "slides/week09.html#from-clause---subquery",
    "title": "SQL",
    "section": "From clause - subquery",
    "text": "From clause - subquery\n\nSELECT a.bill_length_mm, a.bill_depth_mm\nFROM\n  (SELECT species, bill_length_mm, bill_depth_mm\n   FROM penguins\n   WHERE species = 'Adelie'\n  ) AS a\n\n\n\n    bill_length_mm bill_depth_mm\n1             39.1          18.7\n2             39.5          17.4\n3             40.3          18.0\n4               NA            NA\n5             36.7          19.3\n6             39.3          20.6\n7             38.9          17.8\n8             39.2          19.6\n9             34.1          18.1\n10            42.0          20.2\n11            37.8          17.1\n12            37.8          17.3\n13            41.1          17.6\n14            38.6          21.2\n15            34.6          21.1\n16            36.6          17.8\n17            38.7          19.0\n18            42.5          20.7\n19            34.4          18.4\n20            46.0          21.5\n21            37.8          18.3\n22            37.7          18.7\n23            35.9          19.2\n24            38.2          18.1\n25            38.8          17.2\n26            35.3          18.9\n27            40.6          18.6\n28            40.5          17.9\n29            37.9          18.6\n30            40.5          18.9\n31            39.5          16.7\n32            37.2          18.1\n33            39.5          17.8\n34            40.9          18.9\n35            36.4          17.0\n36            39.2          21.1\n37            38.8          20.0\n38            42.2          18.5\n39            37.6          19.3\n40            39.8          19.1\n41            36.5          18.0\n42            40.8          18.4\n43            36.0          18.5\n44            44.1          19.7\n45            37.0          16.9\n46            39.6          18.8\n47            41.1          19.0\n48            37.5          18.9\n49            36.0          17.9\n50            42.3          21.2\n51            39.6          17.7\n52            40.1          18.9\n53            35.0          17.9\n54            42.0          19.5\n55            34.5          18.1\n56            41.4          18.6\n57            39.0          17.5\n58            40.6          18.8\n59            36.5          16.6\n60            37.6          19.1\n61            35.7          16.9\n62            41.3          21.1\n63            37.6          17.0\n64            41.1          18.2\n65            36.4          17.1\n66            41.6          18.0\n67            35.5          16.2\n68            41.1          19.1\n69            35.9          16.6\n70            41.8          19.4\n71            33.5          19.0\n72            39.7          18.4\n73            39.6          17.2\n74            45.8          18.9\n75            35.5          17.5\n76            42.8          18.5\n77            40.9          16.8\n78            37.2          19.4\n79            36.2          16.1\n80            42.1          19.1\n81            34.6          17.2\n82            42.9          17.6\n83            36.7          18.8\n84            35.1          19.4\n85            37.3          17.8\n86            41.3          20.3\n87            36.3          19.5\n88            36.9          18.6\n89            38.3          19.2\n90            38.9          18.8\n91            35.7          18.0\n92            41.1          18.1\n93            34.0          17.1\n94            39.6          18.1\n95            36.2          17.3\n96            40.8          18.9\n97            38.1          18.6\n98            40.3          18.5\n99            33.1          16.1\n100           43.2          18.5\n101           35.0          17.9\n102           41.0          20.0\n103           37.7          16.0\n104           37.8          20.0\n105           37.9          18.6\n106           39.7          18.9\n107           38.6          17.2\n108           38.2          20.0\n109           38.1          17.0\n110           43.2          19.0\n111           38.1          16.5\n112           45.6          20.3\n113           39.7          17.7\n114           42.2          19.5\n115           39.6          20.7\n116           42.7          18.3\n117           38.6          17.0\n118           37.3          20.5\n119           35.7          17.0\n120           41.1          18.6\n121           36.2          17.2\n122           37.7          19.8\n123           40.2          17.0\n124           41.4          18.5\n125           35.2          15.9\n126           40.6          19.0\n127           38.8          17.6\n128           41.5          18.3\n129           39.0          17.1\n130           44.1          18.0\n131           38.5          17.9\n132           43.1          19.2\n133           36.8          18.5\n134           37.5          18.5\n135           38.1          17.6\n136           41.1          17.5\n137           35.6          17.5\n138           40.2          20.1\n139           37.0          16.5\n140           39.7          17.9\n141           40.2          17.1\n142           40.6          17.2\n143           32.1          15.5\n144           40.7          17.0\n145           37.3          16.8\n146           39.0          18.7\n147           39.2          18.6\n148           36.6          18.4\n149           36.0          17.8\n150           37.8          18.1\n151           36.0          17.1\n152           41.5          18.5"
  },
  {
    "objectID": "slides/week09.html#where-clause",
    "href": "slides/week09.html#where-clause",
    "title": "SQL",
    "section": "Where clause",
    "text": "Where clause\n\nSELECT species, island, bill_length_mm, bill_length_mm, year\nFROM penguins\nWHERE year = 2007\n\n\n\n      species    island bill_length_mm bill_length_mm year\n1      Adelie Torgersen           39.1           39.1 2007\n2      Adelie Torgersen           39.5           39.5 2007\n3      Adelie Torgersen           40.3           40.3 2007\n4      Adelie Torgersen             NA             NA 2007\n5      Adelie Torgersen           36.7           36.7 2007\n6      Adelie Torgersen           39.3           39.3 2007\n7      Adelie Torgersen           38.9           38.9 2007\n8      Adelie Torgersen           39.2           39.2 2007\n9      Adelie Torgersen           34.1           34.1 2007\n10     Adelie Torgersen           42.0           42.0 2007\n11     Adelie Torgersen           37.8           37.8 2007\n12     Adelie Torgersen           37.8           37.8 2007\n13     Adelie Torgersen           41.1           41.1 2007\n14     Adelie Torgersen           38.6           38.6 2007\n15     Adelie Torgersen           34.6           34.6 2007\n16     Adelie Torgersen           36.6           36.6 2007\n17     Adelie Torgersen           38.7           38.7 2007\n18     Adelie Torgersen           42.5           42.5 2007\n19     Adelie Torgersen           34.4           34.4 2007\n20     Adelie Torgersen           46.0           46.0 2007\n21     Adelie    Biscoe           37.8           37.8 2007\n22     Adelie    Biscoe           37.7           37.7 2007\n23     Adelie    Biscoe           35.9           35.9 2007\n24     Adelie    Biscoe           38.2           38.2 2007\n25     Adelie    Biscoe           38.8           38.8 2007\n26     Adelie    Biscoe           35.3           35.3 2007\n27     Adelie    Biscoe           40.6           40.6 2007\n28     Adelie    Biscoe           40.5           40.5 2007\n29     Adelie    Biscoe           37.9           37.9 2007\n30     Adelie    Biscoe           40.5           40.5 2007\n31     Adelie     Dream           39.5           39.5 2007\n32     Adelie     Dream           37.2           37.2 2007\n33     Adelie     Dream           39.5           39.5 2007\n34     Adelie     Dream           40.9           40.9 2007\n35     Adelie     Dream           36.4           36.4 2007\n36     Adelie     Dream           39.2           39.2 2007\n37     Adelie     Dream           38.8           38.8 2007\n38     Adelie     Dream           42.2           42.2 2007\n39     Adelie     Dream           37.6           37.6 2007\n40     Adelie     Dream           39.8           39.8 2007\n41     Adelie     Dream           36.5           36.5 2007\n42     Adelie     Dream           40.8           40.8 2007\n43     Adelie     Dream           36.0           36.0 2007\n44     Adelie     Dream           44.1           44.1 2007\n45     Adelie     Dream           37.0           37.0 2007\n46     Adelie     Dream           39.6           39.6 2007\n47     Adelie     Dream           41.1           41.1 2007\n48     Adelie     Dream           37.5           37.5 2007\n49     Adelie     Dream           36.0           36.0 2007\n50     Adelie     Dream           42.3           42.3 2007\n51     Gentoo    Biscoe           46.1           46.1 2007\n52     Gentoo    Biscoe           50.0           50.0 2007\n53     Gentoo    Biscoe           48.7           48.7 2007\n54     Gentoo    Biscoe           50.0           50.0 2007\n55     Gentoo    Biscoe           47.6           47.6 2007\n56     Gentoo    Biscoe           46.5           46.5 2007\n57     Gentoo    Biscoe           45.4           45.4 2007\n58     Gentoo    Biscoe           46.7           46.7 2007\n59     Gentoo    Biscoe           43.3           43.3 2007\n60     Gentoo    Biscoe           46.8           46.8 2007\n61     Gentoo    Biscoe           40.9           40.9 2007\n62     Gentoo    Biscoe           49.0           49.0 2007\n63     Gentoo    Biscoe           45.5           45.5 2007\n64     Gentoo    Biscoe           48.4           48.4 2007\n65     Gentoo    Biscoe           45.8           45.8 2007\n66     Gentoo    Biscoe           49.3           49.3 2007\n67     Gentoo    Biscoe           42.0           42.0 2007\n68     Gentoo    Biscoe           49.2           49.2 2007\n69     Gentoo    Biscoe           46.2           46.2 2007\n70     Gentoo    Biscoe           48.7           48.7 2007\n71     Gentoo    Biscoe           50.2           50.2 2007\n72     Gentoo    Biscoe           45.1           45.1 2007\n73     Gentoo    Biscoe           46.5           46.5 2007\n74     Gentoo    Biscoe           46.3           46.3 2007\n75     Gentoo    Biscoe           42.9           42.9 2007\n76     Gentoo    Biscoe           46.1           46.1 2007\n77     Gentoo    Biscoe           44.5           44.5 2007\n78     Gentoo    Biscoe           47.8           47.8 2007\n79     Gentoo    Biscoe           48.2           48.2 2007\n80     Gentoo    Biscoe           50.0           50.0 2007\n81     Gentoo    Biscoe           47.3           47.3 2007\n82     Gentoo    Biscoe           42.8           42.8 2007\n83     Gentoo    Biscoe           45.1           45.1 2007\n84     Gentoo    Biscoe           59.6           59.6 2007\n85  Chinstrap     Dream           46.5           46.5 2007\n86  Chinstrap     Dream           50.0           50.0 2007\n87  Chinstrap     Dream           51.3           51.3 2007\n88  Chinstrap     Dream           45.4           45.4 2007\n89  Chinstrap     Dream           52.7           52.7 2007\n90  Chinstrap     Dream           45.2           45.2 2007\n91  Chinstrap     Dream           46.1           46.1 2007\n92  Chinstrap     Dream           51.3           51.3 2007\n93  Chinstrap     Dream           46.0           46.0 2007\n94  Chinstrap     Dream           51.3           51.3 2007\n95  Chinstrap     Dream           46.6           46.6 2007\n96  Chinstrap     Dream           51.7           51.7 2007\n97  Chinstrap     Dream           47.0           47.0 2007\n98  Chinstrap     Dream           52.0           52.0 2007\n99  Chinstrap     Dream           45.9           45.9 2007\n100 Chinstrap     Dream           50.5           50.5 2007\n101 Chinstrap     Dream           50.3           50.3 2007\n102 Chinstrap     Dream           58.0           58.0 2007\n103 Chinstrap     Dream           46.4           46.4 2007\n104 Chinstrap     Dream           49.2           49.2 2007\n105 Chinstrap     Dream           42.4           42.4 2007\n106 Chinstrap     Dream           48.5           48.5 2007\n107 Chinstrap     Dream           43.2           43.2 2007\n108 Chinstrap     Dream           50.6           50.6 2007\n109 Chinstrap     Dream           46.7           46.7 2007\n110 Chinstrap     Dream           52.0           52.0 2007"
  },
  {
    "objectID": "slides/week09.html#where-clause-1",
    "href": "slides/week09.html#where-clause-1",
    "title": "SQL",
    "section": "Where clause",
    "text": "Where clause\n\nSELECT species, island, bill_length_mm, bill_length_mm, year\nFROM penguins\nWHERE year &gt; 2007\n\n\n\n      species    island bill_length_mm bill_length_mm year\n1      Adelie    Biscoe           39.6           39.6 2008\n2      Adelie    Biscoe           40.1           40.1 2008\n3      Adelie    Biscoe           35.0           35.0 2008\n4      Adelie    Biscoe           42.0           42.0 2008\n5      Adelie    Biscoe           34.5           34.5 2008\n6      Adelie    Biscoe           41.4           41.4 2008\n7      Adelie    Biscoe           39.0           39.0 2008\n8      Adelie    Biscoe           40.6           40.6 2008\n9      Adelie    Biscoe           36.5           36.5 2008\n10     Adelie    Biscoe           37.6           37.6 2008\n11     Adelie    Biscoe           35.7           35.7 2008\n12     Adelie    Biscoe           41.3           41.3 2008\n13     Adelie    Biscoe           37.6           37.6 2008\n14     Adelie    Biscoe           41.1           41.1 2008\n15     Adelie    Biscoe           36.4           36.4 2008\n16     Adelie    Biscoe           41.6           41.6 2008\n17     Adelie    Biscoe           35.5           35.5 2008\n18     Adelie    Biscoe           41.1           41.1 2008\n19     Adelie Torgersen           35.9           35.9 2008\n20     Adelie Torgersen           41.8           41.8 2008\n21     Adelie Torgersen           33.5           33.5 2008\n22     Adelie Torgersen           39.7           39.7 2008\n23     Adelie Torgersen           39.6           39.6 2008\n24     Adelie Torgersen           45.8           45.8 2008\n25     Adelie Torgersen           35.5           35.5 2008\n26     Adelie Torgersen           42.8           42.8 2008\n27     Adelie Torgersen           40.9           40.9 2008\n28     Adelie Torgersen           37.2           37.2 2008\n29     Adelie Torgersen           36.2           36.2 2008\n30     Adelie Torgersen           42.1           42.1 2008\n31     Adelie Torgersen           34.6           34.6 2008\n32     Adelie Torgersen           42.9           42.9 2008\n33     Adelie Torgersen           36.7           36.7 2008\n34     Adelie Torgersen           35.1           35.1 2008\n35     Adelie     Dream           37.3           37.3 2008\n36     Adelie     Dream           41.3           41.3 2008\n37     Adelie     Dream           36.3           36.3 2008\n38     Adelie     Dream           36.9           36.9 2008\n39     Adelie     Dream           38.3           38.3 2008\n40     Adelie     Dream           38.9           38.9 2008\n41     Adelie     Dream           35.7           35.7 2008\n42     Adelie     Dream           41.1           41.1 2008\n43     Adelie     Dream           34.0           34.0 2008\n44     Adelie     Dream           39.6           39.6 2008\n45     Adelie     Dream           36.2           36.2 2008\n46     Adelie     Dream           40.8           40.8 2008\n47     Adelie     Dream           38.1           38.1 2008\n48     Adelie     Dream           40.3           40.3 2008\n49     Adelie     Dream           33.1           33.1 2008\n50     Adelie     Dream           43.2           43.2 2008\n51     Adelie    Biscoe           35.0           35.0 2009\n52     Adelie    Biscoe           41.0           41.0 2009\n53     Adelie    Biscoe           37.7           37.7 2009\n54     Adelie    Biscoe           37.8           37.8 2009\n55     Adelie    Biscoe           37.9           37.9 2009\n56     Adelie    Biscoe           39.7           39.7 2009\n57     Adelie    Biscoe           38.6           38.6 2009\n58     Adelie    Biscoe           38.2           38.2 2009\n59     Adelie    Biscoe           38.1           38.1 2009\n60     Adelie    Biscoe           43.2           43.2 2009\n61     Adelie    Biscoe           38.1           38.1 2009\n62     Adelie    Biscoe           45.6           45.6 2009\n63     Adelie    Biscoe           39.7           39.7 2009\n64     Adelie    Biscoe           42.2           42.2 2009\n65     Adelie    Biscoe           39.6           39.6 2009\n66     Adelie    Biscoe           42.7           42.7 2009\n67     Adelie Torgersen           38.6           38.6 2009\n68     Adelie Torgersen           37.3           37.3 2009\n69     Adelie Torgersen           35.7           35.7 2009\n70     Adelie Torgersen           41.1           41.1 2009\n71     Adelie Torgersen           36.2           36.2 2009\n72     Adelie Torgersen           37.7           37.7 2009\n73     Adelie Torgersen           40.2           40.2 2009\n74     Adelie Torgersen           41.4           41.4 2009\n75     Adelie Torgersen           35.2           35.2 2009\n76     Adelie Torgersen           40.6           40.6 2009\n77     Adelie Torgersen           38.8           38.8 2009\n78     Adelie Torgersen           41.5           41.5 2009\n79     Adelie Torgersen           39.0           39.0 2009\n80     Adelie Torgersen           44.1           44.1 2009\n81     Adelie Torgersen           38.5           38.5 2009\n82     Adelie Torgersen           43.1           43.1 2009\n83     Adelie     Dream           36.8           36.8 2009\n84     Adelie     Dream           37.5           37.5 2009\n85     Adelie     Dream           38.1           38.1 2009\n86     Adelie     Dream           41.1           41.1 2009\n87     Adelie     Dream           35.6           35.6 2009\n88     Adelie     Dream           40.2           40.2 2009\n89     Adelie     Dream           37.0           37.0 2009\n90     Adelie     Dream           39.7           39.7 2009\n91     Adelie     Dream           40.2           40.2 2009\n92     Adelie     Dream           40.6           40.6 2009\n93     Adelie     Dream           32.1           32.1 2009\n94     Adelie     Dream           40.7           40.7 2009\n95     Adelie     Dream           37.3           37.3 2009\n96     Adelie     Dream           39.0           39.0 2009\n97     Adelie     Dream           39.2           39.2 2009\n98     Adelie     Dream           36.6           36.6 2009\n99     Adelie     Dream           36.0           36.0 2009\n100    Adelie     Dream           37.8           37.8 2009\n101    Adelie     Dream           36.0           36.0 2009\n102    Adelie     Dream           41.5           41.5 2009\n103    Gentoo    Biscoe           49.1           49.1 2008\n104    Gentoo    Biscoe           48.4           48.4 2008\n105    Gentoo    Biscoe           42.6           42.6 2008\n106    Gentoo    Biscoe           44.4           44.4 2008\n107    Gentoo    Biscoe           44.0           44.0 2008\n108    Gentoo    Biscoe           48.7           48.7 2008\n109    Gentoo    Biscoe           42.7           42.7 2008\n110    Gentoo    Biscoe           49.6           49.6 2008\n111    Gentoo    Biscoe           45.3           45.3 2008\n112    Gentoo    Biscoe           49.6           49.6 2008\n113    Gentoo    Biscoe           50.5           50.5 2008\n114    Gentoo    Biscoe           43.6           43.6 2008\n115    Gentoo    Biscoe           45.5           45.5 2008\n116    Gentoo    Biscoe           50.5           50.5 2008\n117    Gentoo    Biscoe           44.9           44.9 2008\n118    Gentoo    Biscoe           45.2           45.2 2008\n119    Gentoo    Biscoe           46.6           46.6 2008\n120    Gentoo    Biscoe           48.5           48.5 2008\n121    Gentoo    Biscoe           45.1           45.1 2008\n122    Gentoo    Biscoe           50.1           50.1 2008\n123    Gentoo    Biscoe           46.5           46.5 2008\n124    Gentoo    Biscoe           45.0           45.0 2008\n125    Gentoo    Biscoe           43.8           43.8 2008\n126    Gentoo    Biscoe           45.5           45.5 2008\n127    Gentoo    Biscoe           43.2           43.2 2008\n128    Gentoo    Biscoe           50.4           50.4 2008\n129    Gentoo    Biscoe           45.3           45.3 2008\n130    Gentoo    Biscoe           46.2           46.2 2008\n131    Gentoo    Biscoe           45.7           45.7 2008\n132    Gentoo    Biscoe           54.3           54.3 2008\n133    Gentoo    Biscoe           45.8           45.8 2008\n134    Gentoo    Biscoe           49.8           49.8 2008\n135    Gentoo    Biscoe           46.2           46.2 2008\n136    Gentoo    Biscoe           49.5           49.5 2008\n137    Gentoo    Biscoe           43.5           43.5 2008\n138    Gentoo    Biscoe           50.7           50.7 2008\n139    Gentoo    Biscoe           47.7           47.7 2008\n140    Gentoo    Biscoe           46.4           46.4 2008\n141    Gentoo    Biscoe           48.2           48.2 2008\n142    Gentoo    Biscoe           46.5           46.5 2008\n143    Gentoo    Biscoe           46.4           46.4 2008\n144    Gentoo    Biscoe           48.6           48.6 2008\n145    Gentoo    Biscoe           47.5           47.5 2008\n146    Gentoo    Biscoe           51.1           51.1 2008\n147    Gentoo    Biscoe           45.2           45.2 2008\n148    Gentoo    Biscoe           45.2           45.2 2008\n149    Gentoo    Biscoe           49.1           49.1 2009\n150    Gentoo    Biscoe           52.5           52.5 2009\n151    Gentoo    Biscoe           47.4           47.4 2009\n152    Gentoo    Biscoe           50.0           50.0 2009\n153    Gentoo    Biscoe           44.9           44.9 2009\n154    Gentoo    Biscoe           50.8           50.8 2009\n155    Gentoo    Biscoe           43.4           43.4 2009\n156    Gentoo    Biscoe           51.3           51.3 2009\n157    Gentoo    Biscoe           47.5           47.5 2009\n158    Gentoo    Biscoe           52.1           52.1 2009\n159    Gentoo    Biscoe           47.5           47.5 2009\n160    Gentoo    Biscoe           52.2           52.2 2009\n161    Gentoo    Biscoe           45.5           45.5 2009\n162    Gentoo    Biscoe           49.5           49.5 2009\n163    Gentoo    Biscoe           44.5           44.5 2009\n164    Gentoo    Biscoe           50.8           50.8 2009\n165    Gentoo    Biscoe           49.4           49.4 2009\n166    Gentoo    Biscoe           46.9           46.9 2009\n167    Gentoo    Biscoe           48.4           48.4 2009\n168    Gentoo    Biscoe           51.1           51.1 2009\n169    Gentoo    Biscoe           48.5           48.5 2009\n170    Gentoo    Biscoe           55.9           55.9 2009\n171    Gentoo    Biscoe           47.2           47.2 2009\n172    Gentoo    Biscoe           49.1           49.1 2009\n173    Gentoo    Biscoe           47.3           47.3 2009\n174    Gentoo    Biscoe           46.8           46.8 2009\n175    Gentoo    Biscoe           41.7           41.7 2009\n176    Gentoo    Biscoe           53.4           53.4 2009\n177    Gentoo    Biscoe           43.3           43.3 2009\n178    Gentoo    Biscoe           48.1           48.1 2009\n179    Gentoo    Biscoe           50.5           50.5 2009\n180    Gentoo    Biscoe           49.8           49.8 2009\n181    Gentoo    Biscoe           43.5           43.5 2009\n182    Gentoo    Biscoe           51.5           51.5 2009\n183    Gentoo    Biscoe           46.2           46.2 2009\n184    Gentoo    Biscoe           55.1           55.1 2009\n185    Gentoo    Biscoe           44.5           44.5 2009\n186    Gentoo    Biscoe           48.8           48.8 2009\n187    Gentoo    Biscoe           47.2           47.2 2009\n188    Gentoo    Biscoe             NA             NA 2009\n189    Gentoo    Biscoe           46.8           46.8 2009\n190    Gentoo    Biscoe           50.4           50.4 2009\n191    Gentoo    Biscoe           45.2           45.2 2009\n192    Gentoo    Biscoe           49.9           49.9 2009\n193 Chinstrap     Dream           50.5           50.5 2008\n194 Chinstrap     Dream           49.5           49.5 2008\n195 Chinstrap     Dream           46.4           46.4 2008\n196 Chinstrap     Dream           52.8           52.8 2008\n197 Chinstrap     Dream           40.9           40.9 2008\n198 Chinstrap     Dream           54.2           54.2 2008\n199 Chinstrap     Dream           42.5           42.5 2008\n200 Chinstrap     Dream           51.0           51.0 2008\n201 Chinstrap     Dream           49.7           49.7 2008\n202 Chinstrap     Dream           47.5           47.5 2008\n203 Chinstrap     Dream           47.6           47.6 2008\n204 Chinstrap     Dream           52.0           52.0 2008\n205 Chinstrap     Dream           46.9           46.9 2008\n206 Chinstrap     Dream           53.5           53.5 2008\n207 Chinstrap     Dream           49.0           49.0 2008\n208 Chinstrap     Dream           46.2           46.2 2008\n209 Chinstrap     Dream           50.9           50.9 2008\n210 Chinstrap     Dream           45.5           45.5 2008\n211 Chinstrap     Dream           50.9           50.9 2009\n212 Chinstrap     Dream           50.8           50.8 2009\n213 Chinstrap     Dream           50.1           50.1 2009\n214 Chinstrap     Dream           49.0           49.0 2009\n215 Chinstrap     Dream           51.5           51.5 2009\n216 Chinstrap     Dream           49.8           49.8 2009\n217 Chinstrap     Dream           48.1           48.1 2009\n218 Chinstrap     Dream           51.4           51.4 2009\n219 Chinstrap     Dream           45.7           45.7 2009\n220 Chinstrap     Dream           50.7           50.7 2009\n221 Chinstrap     Dream           42.5           42.5 2009\n222 Chinstrap     Dream           52.2           52.2 2009\n223 Chinstrap     Dream           45.2           45.2 2009\n224 Chinstrap     Dream           49.3           49.3 2009\n225 Chinstrap     Dream           50.2           50.2 2009\n226 Chinstrap     Dream           45.6           45.6 2009\n227 Chinstrap     Dream           51.9           51.9 2009\n228 Chinstrap     Dream           46.8           46.8 2009\n229 Chinstrap     Dream           45.7           45.7 2009\n230 Chinstrap     Dream           55.8           55.8 2009\n231 Chinstrap     Dream           43.5           43.5 2009\n232 Chinstrap     Dream           49.6           49.6 2009\n233 Chinstrap     Dream           50.8           50.8 2009\n234 Chinstrap     Dream           50.2           50.2 2009"
  },
  {
    "objectID": "slides/week09.html#where-clause-2",
    "href": "slides/week09.html#where-clause-2",
    "title": "SQL",
    "section": "Where clause",
    "text": "Where clause\n\nSELECT species, island, bill_length_mm, bill_length_mm, year\nFROM penguins\nWHERE year IN (2007, 2008)\n\n\n\n      species    island bill_length_mm bill_length_mm year\n1      Adelie Torgersen           39.1           39.1 2007\n2      Adelie Torgersen           39.5           39.5 2007\n3      Adelie Torgersen           40.3           40.3 2007\n4      Adelie Torgersen             NA             NA 2007\n5      Adelie Torgersen           36.7           36.7 2007\n6      Adelie Torgersen           39.3           39.3 2007\n7      Adelie Torgersen           38.9           38.9 2007\n8      Adelie Torgersen           39.2           39.2 2007\n9      Adelie Torgersen           34.1           34.1 2007\n10     Adelie Torgersen           42.0           42.0 2007\n11     Adelie Torgersen           37.8           37.8 2007\n12     Adelie Torgersen           37.8           37.8 2007\n13     Adelie Torgersen           41.1           41.1 2007\n14     Adelie Torgersen           38.6           38.6 2007\n15     Adelie Torgersen           34.6           34.6 2007\n16     Adelie Torgersen           36.6           36.6 2007\n17     Adelie Torgersen           38.7           38.7 2007\n18     Adelie Torgersen           42.5           42.5 2007\n19     Adelie Torgersen           34.4           34.4 2007\n20     Adelie Torgersen           46.0           46.0 2007\n21     Adelie    Biscoe           37.8           37.8 2007\n22     Adelie    Biscoe           37.7           37.7 2007\n23     Adelie    Biscoe           35.9           35.9 2007\n24     Adelie    Biscoe           38.2           38.2 2007\n25     Adelie    Biscoe           38.8           38.8 2007\n26     Adelie    Biscoe           35.3           35.3 2007\n27     Adelie    Biscoe           40.6           40.6 2007\n28     Adelie    Biscoe           40.5           40.5 2007\n29     Adelie    Biscoe           37.9           37.9 2007\n30     Adelie    Biscoe           40.5           40.5 2007\n31     Adelie     Dream           39.5           39.5 2007\n32     Adelie     Dream           37.2           37.2 2007\n33     Adelie     Dream           39.5           39.5 2007\n34     Adelie     Dream           40.9           40.9 2007\n35     Adelie     Dream           36.4           36.4 2007\n36     Adelie     Dream           39.2           39.2 2007\n37     Adelie     Dream           38.8           38.8 2007\n38     Adelie     Dream           42.2           42.2 2007\n39     Adelie     Dream           37.6           37.6 2007\n40     Adelie     Dream           39.8           39.8 2007\n41     Adelie     Dream           36.5           36.5 2007\n42     Adelie     Dream           40.8           40.8 2007\n43     Adelie     Dream           36.0           36.0 2007\n44     Adelie     Dream           44.1           44.1 2007\n45     Adelie     Dream           37.0           37.0 2007\n46     Adelie     Dream           39.6           39.6 2007\n47     Adelie     Dream           41.1           41.1 2007\n48     Adelie     Dream           37.5           37.5 2007\n49     Adelie     Dream           36.0           36.0 2007\n50     Adelie     Dream           42.3           42.3 2007\n51     Adelie    Biscoe           39.6           39.6 2008\n52     Adelie    Biscoe           40.1           40.1 2008\n53     Adelie    Biscoe           35.0           35.0 2008\n54     Adelie    Biscoe           42.0           42.0 2008\n55     Adelie    Biscoe           34.5           34.5 2008\n56     Adelie    Biscoe           41.4           41.4 2008\n57     Adelie    Biscoe           39.0           39.0 2008\n58     Adelie    Biscoe           40.6           40.6 2008\n59     Adelie    Biscoe           36.5           36.5 2008\n60     Adelie    Biscoe           37.6           37.6 2008\n61     Adelie    Biscoe           35.7           35.7 2008\n62     Adelie    Biscoe           41.3           41.3 2008\n63     Adelie    Biscoe           37.6           37.6 2008\n64     Adelie    Biscoe           41.1           41.1 2008\n65     Adelie    Biscoe           36.4           36.4 2008\n66     Adelie    Biscoe           41.6           41.6 2008\n67     Adelie    Biscoe           35.5           35.5 2008\n68     Adelie    Biscoe           41.1           41.1 2008\n69     Adelie Torgersen           35.9           35.9 2008\n70     Adelie Torgersen           41.8           41.8 2008\n71     Adelie Torgersen           33.5           33.5 2008\n72     Adelie Torgersen           39.7           39.7 2008\n73     Adelie Torgersen           39.6           39.6 2008\n74     Adelie Torgersen           45.8           45.8 2008\n75     Adelie Torgersen           35.5           35.5 2008\n76     Adelie Torgersen           42.8           42.8 2008\n77     Adelie Torgersen           40.9           40.9 2008\n78     Adelie Torgersen           37.2           37.2 2008\n79     Adelie Torgersen           36.2           36.2 2008\n80     Adelie Torgersen           42.1           42.1 2008\n81     Adelie Torgersen           34.6           34.6 2008\n82     Adelie Torgersen           42.9           42.9 2008\n83     Adelie Torgersen           36.7           36.7 2008\n84     Adelie Torgersen           35.1           35.1 2008\n85     Adelie     Dream           37.3           37.3 2008\n86     Adelie     Dream           41.3           41.3 2008\n87     Adelie     Dream           36.3           36.3 2008\n88     Adelie     Dream           36.9           36.9 2008\n89     Adelie     Dream           38.3           38.3 2008\n90     Adelie     Dream           38.9           38.9 2008\n91     Adelie     Dream           35.7           35.7 2008\n92     Adelie     Dream           41.1           41.1 2008\n93     Adelie     Dream           34.0           34.0 2008\n94     Adelie     Dream           39.6           39.6 2008\n95     Adelie     Dream           36.2           36.2 2008\n96     Adelie     Dream           40.8           40.8 2008\n97     Adelie     Dream           38.1           38.1 2008\n98     Adelie     Dream           40.3           40.3 2008\n99     Adelie     Dream           33.1           33.1 2008\n100    Adelie     Dream           43.2           43.2 2008\n101    Gentoo    Biscoe           46.1           46.1 2007\n102    Gentoo    Biscoe           50.0           50.0 2007\n103    Gentoo    Biscoe           48.7           48.7 2007\n104    Gentoo    Biscoe           50.0           50.0 2007\n105    Gentoo    Biscoe           47.6           47.6 2007\n106    Gentoo    Biscoe           46.5           46.5 2007\n107    Gentoo    Biscoe           45.4           45.4 2007\n108    Gentoo    Biscoe           46.7           46.7 2007\n109    Gentoo    Biscoe           43.3           43.3 2007\n110    Gentoo    Biscoe           46.8           46.8 2007\n111    Gentoo    Biscoe           40.9           40.9 2007\n112    Gentoo    Biscoe           49.0           49.0 2007\n113    Gentoo    Biscoe           45.5           45.5 2007\n114    Gentoo    Biscoe           48.4           48.4 2007\n115    Gentoo    Biscoe           45.8           45.8 2007\n116    Gentoo    Biscoe           49.3           49.3 2007\n117    Gentoo    Biscoe           42.0           42.0 2007\n118    Gentoo    Biscoe           49.2           49.2 2007\n119    Gentoo    Biscoe           46.2           46.2 2007\n120    Gentoo    Biscoe           48.7           48.7 2007\n121    Gentoo    Biscoe           50.2           50.2 2007\n122    Gentoo    Biscoe           45.1           45.1 2007\n123    Gentoo    Biscoe           46.5           46.5 2007\n124    Gentoo    Biscoe           46.3           46.3 2007\n125    Gentoo    Biscoe           42.9           42.9 2007\n126    Gentoo    Biscoe           46.1           46.1 2007\n127    Gentoo    Biscoe           44.5           44.5 2007\n128    Gentoo    Biscoe           47.8           47.8 2007\n129    Gentoo    Biscoe           48.2           48.2 2007\n130    Gentoo    Biscoe           50.0           50.0 2007\n131    Gentoo    Biscoe           47.3           47.3 2007\n132    Gentoo    Biscoe           42.8           42.8 2007\n133    Gentoo    Biscoe           45.1           45.1 2007\n134    Gentoo    Biscoe           59.6           59.6 2007\n135    Gentoo    Biscoe           49.1           49.1 2008\n136    Gentoo    Biscoe           48.4           48.4 2008\n137    Gentoo    Biscoe           42.6           42.6 2008\n138    Gentoo    Biscoe           44.4           44.4 2008\n139    Gentoo    Biscoe           44.0           44.0 2008\n140    Gentoo    Biscoe           48.7           48.7 2008\n141    Gentoo    Biscoe           42.7           42.7 2008\n142    Gentoo    Biscoe           49.6           49.6 2008\n143    Gentoo    Biscoe           45.3           45.3 2008\n144    Gentoo    Biscoe           49.6           49.6 2008\n145    Gentoo    Biscoe           50.5           50.5 2008\n146    Gentoo    Biscoe           43.6           43.6 2008\n147    Gentoo    Biscoe           45.5           45.5 2008\n148    Gentoo    Biscoe           50.5           50.5 2008\n149    Gentoo    Biscoe           44.9           44.9 2008\n150    Gentoo    Biscoe           45.2           45.2 2008\n151    Gentoo    Biscoe           46.6           46.6 2008\n152    Gentoo    Biscoe           48.5           48.5 2008\n153    Gentoo    Biscoe           45.1           45.1 2008\n154    Gentoo    Biscoe           50.1           50.1 2008\n155    Gentoo    Biscoe           46.5           46.5 2008\n156    Gentoo    Biscoe           45.0           45.0 2008\n157    Gentoo    Biscoe           43.8           43.8 2008\n158    Gentoo    Biscoe           45.5           45.5 2008\n159    Gentoo    Biscoe           43.2           43.2 2008\n160    Gentoo    Biscoe           50.4           50.4 2008\n161    Gentoo    Biscoe           45.3           45.3 2008\n162    Gentoo    Biscoe           46.2           46.2 2008\n163    Gentoo    Biscoe           45.7           45.7 2008\n164    Gentoo    Biscoe           54.3           54.3 2008\n165    Gentoo    Biscoe           45.8           45.8 2008\n166    Gentoo    Biscoe           49.8           49.8 2008\n167    Gentoo    Biscoe           46.2           46.2 2008\n168    Gentoo    Biscoe           49.5           49.5 2008\n169    Gentoo    Biscoe           43.5           43.5 2008\n170    Gentoo    Biscoe           50.7           50.7 2008\n171    Gentoo    Biscoe           47.7           47.7 2008\n172    Gentoo    Biscoe           46.4           46.4 2008\n173    Gentoo    Biscoe           48.2           48.2 2008\n174    Gentoo    Biscoe           46.5           46.5 2008\n175    Gentoo    Biscoe           46.4           46.4 2008\n176    Gentoo    Biscoe           48.6           48.6 2008\n177    Gentoo    Biscoe           47.5           47.5 2008\n178    Gentoo    Biscoe           51.1           51.1 2008\n179    Gentoo    Biscoe           45.2           45.2 2008\n180    Gentoo    Biscoe           45.2           45.2 2008\n181 Chinstrap     Dream           46.5           46.5 2007\n182 Chinstrap     Dream           50.0           50.0 2007\n183 Chinstrap     Dream           51.3           51.3 2007\n184 Chinstrap     Dream           45.4           45.4 2007\n185 Chinstrap     Dream           52.7           52.7 2007\n186 Chinstrap     Dream           45.2           45.2 2007\n187 Chinstrap     Dream           46.1           46.1 2007\n188 Chinstrap     Dream           51.3           51.3 2007\n189 Chinstrap     Dream           46.0           46.0 2007\n190 Chinstrap     Dream           51.3           51.3 2007\n191 Chinstrap     Dream           46.6           46.6 2007\n192 Chinstrap     Dream           51.7           51.7 2007\n193 Chinstrap     Dream           47.0           47.0 2007\n194 Chinstrap     Dream           52.0           52.0 2007\n195 Chinstrap     Dream           45.9           45.9 2007\n196 Chinstrap     Dream           50.5           50.5 2007\n197 Chinstrap     Dream           50.3           50.3 2007\n198 Chinstrap     Dream           58.0           58.0 2007\n199 Chinstrap     Dream           46.4           46.4 2007\n200 Chinstrap     Dream           49.2           49.2 2007\n201 Chinstrap     Dream           42.4           42.4 2007\n202 Chinstrap     Dream           48.5           48.5 2007\n203 Chinstrap     Dream           43.2           43.2 2007\n204 Chinstrap     Dream           50.6           50.6 2007\n205 Chinstrap     Dream           46.7           46.7 2007\n206 Chinstrap     Dream           52.0           52.0 2007\n207 Chinstrap     Dream           50.5           50.5 2008\n208 Chinstrap     Dream           49.5           49.5 2008\n209 Chinstrap     Dream           46.4           46.4 2008\n210 Chinstrap     Dream           52.8           52.8 2008\n211 Chinstrap     Dream           40.9           40.9 2008\n212 Chinstrap     Dream           54.2           54.2 2008\n213 Chinstrap     Dream           42.5           42.5 2008\n214 Chinstrap     Dream           51.0           51.0 2008\n215 Chinstrap     Dream           49.7           49.7 2008\n216 Chinstrap     Dream           47.5           47.5 2008\n217 Chinstrap     Dream           47.6           47.6 2008\n218 Chinstrap     Dream           52.0           52.0 2008\n219 Chinstrap     Dream           46.9           46.9 2008\n220 Chinstrap     Dream           53.5           53.5 2008\n221 Chinstrap     Dream           49.0           49.0 2008\n222 Chinstrap     Dream           46.2           46.2 2008\n223 Chinstrap     Dream           50.9           50.9 2008\n224 Chinstrap     Dream           45.5           45.5 2008"
  },
  {
    "objectID": "slides/week09.html#where-clause-3",
    "href": "slides/week09.html#where-clause-3",
    "title": "SQL",
    "section": "Where clause",
    "text": "Where clause\n\nSELECT species, island, bill_length_mm, bill_length_mm, year\nFROM penguins\nWHERE year = 2007 AND species = 'Gentoo'\n\n\n\n   species island bill_length_mm bill_length_mm year\n1   Gentoo Biscoe           46.1           46.1 2007\n2   Gentoo Biscoe           50.0           50.0 2007\n3   Gentoo Biscoe           48.7           48.7 2007\n4   Gentoo Biscoe           50.0           50.0 2007\n5   Gentoo Biscoe           47.6           47.6 2007\n6   Gentoo Biscoe           46.5           46.5 2007\n7   Gentoo Biscoe           45.4           45.4 2007\n8   Gentoo Biscoe           46.7           46.7 2007\n9   Gentoo Biscoe           43.3           43.3 2007\n10  Gentoo Biscoe           46.8           46.8 2007\n11  Gentoo Biscoe           40.9           40.9 2007\n12  Gentoo Biscoe           49.0           49.0 2007\n13  Gentoo Biscoe           45.5           45.5 2007\n14  Gentoo Biscoe           48.4           48.4 2007\n15  Gentoo Biscoe           45.8           45.8 2007\n16  Gentoo Biscoe           49.3           49.3 2007\n17  Gentoo Biscoe           42.0           42.0 2007\n18  Gentoo Biscoe           49.2           49.2 2007\n19  Gentoo Biscoe           46.2           46.2 2007\n20  Gentoo Biscoe           48.7           48.7 2007\n21  Gentoo Biscoe           50.2           50.2 2007\n22  Gentoo Biscoe           45.1           45.1 2007\n23  Gentoo Biscoe           46.5           46.5 2007\n24  Gentoo Biscoe           46.3           46.3 2007\n25  Gentoo Biscoe           42.9           42.9 2007\n26  Gentoo Biscoe           46.1           46.1 2007\n27  Gentoo Biscoe           44.5           44.5 2007\n28  Gentoo Biscoe           47.8           47.8 2007\n29  Gentoo Biscoe           48.2           48.2 2007\n30  Gentoo Biscoe           50.0           50.0 2007\n31  Gentoo Biscoe           47.3           47.3 2007\n32  Gentoo Biscoe           42.8           42.8 2007\n33  Gentoo Biscoe           45.1           45.1 2007\n34  Gentoo Biscoe           59.6           59.6 2007"
  },
  {
    "objectID": "slides/week09.html#where-clause-4",
    "href": "slides/week09.html#where-clause-4",
    "title": "SQL",
    "section": "Where clause",
    "text": "Where clause\n\nSELECT species, island, bill_length_mm, bill_length_mm, year\nFROM penguins\nWHERE year = 2007 OR species = 'Gentoo'\n\n\n\n      species    island bill_length_mm bill_length_mm year\n1      Adelie Torgersen           39.1           39.1 2007\n2      Adelie Torgersen           39.5           39.5 2007\n3      Adelie Torgersen           40.3           40.3 2007\n4      Adelie Torgersen             NA             NA 2007\n5      Adelie Torgersen           36.7           36.7 2007\n6      Adelie Torgersen           39.3           39.3 2007\n7      Adelie Torgersen           38.9           38.9 2007\n8      Adelie Torgersen           39.2           39.2 2007\n9      Adelie Torgersen           34.1           34.1 2007\n10     Adelie Torgersen           42.0           42.0 2007\n11     Adelie Torgersen           37.8           37.8 2007\n12     Adelie Torgersen           37.8           37.8 2007\n13     Adelie Torgersen           41.1           41.1 2007\n14     Adelie Torgersen           38.6           38.6 2007\n15     Adelie Torgersen           34.6           34.6 2007\n16     Adelie Torgersen           36.6           36.6 2007\n17     Adelie Torgersen           38.7           38.7 2007\n18     Adelie Torgersen           42.5           42.5 2007\n19     Adelie Torgersen           34.4           34.4 2007\n20     Adelie Torgersen           46.0           46.0 2007\n21     Adelie    Biscoe           37.8           37.8 2007\n22     Adelie    Biscoe           37.7           37.7 2007\n23     Adelie    Biscoe           35.9           35.9 2007\n24     Adelie    Biscoe           38.2           38.2 2007\n25     Adelie    Biscoe           38.8           38.8 2007\n26     Adelie    Biscoe           35.3           35.3 2007\n27     Adelie    Biscoe           40.6           40.6 2007\n28     Adelie    Biscoe           40.5           40.5 2007\n29     Adelie    Biscoe           37.9           37.9 2007\n30     Adelie    Biscoe           40.5           40.5 2007\n31     Adelie     Dream           39.5           39.5 2007\n32     Adelie     Dream           37.2           37.2 2007\n33     Adelie     Dream           39.5           39.5 2007\n34     Adelie     Dream           40.9           40.9 2007\n35     Adelie     Dream           36.4           36.4 2007\n36     Adelie     Dream           39.2           39.2 2007\n37     Adelie     Dream           38.8           38.8 2007\n38     Adelie     Dream           42.2           42.2 2007\n39     Adelie     Dream           37.6           37.6 2007\n40     Adelie     Dream           39.8           39.8 2007\n41     Adelie     Dream           36.5           36.5 2007\n42     Adelie     Dream           40.8           40.8 2007\n43     Adelie     Dream           36.0           36.0 2007\n44     Adelie     Dream           44.1           44.1 2007\n45     Adelie     Dream           37.0           37.0 2007\n46     Adelie     Dream           39.6           39.6 2007\n47     Adelie     Dream           41.1           41.1 2007\n48     Adelie     Dream           37.5           37.5 2007\n49     Adelie     Dream           36.0           36.0 2007\n50     Adelie     Dream           42.3           42.3 2007\n51     Gentoo    Biscoe           46.1           46.1 2007\n52     Gentoo    Biscoe           50.0           50.0 2007\n53     Gentoo    Biscoe           48.7           48.7 2007\n54     Gentoo    Biscoe           50.0           50.0 2007\n55     Gentoo    Biscoe           47.6           47.6 2007\n56     Gentoo    Biscoe           46.5           46.5 2007\n57     Gentoo    Biscoe           45.4           45.4 2007\n58     Gentoo    Biscoe           46.7           46.7 2007\n59     Gentoo    Biscoe           43.3           43.3 2007\n60     Gentoo    Biscoe           46.8           46.8 2007\n61     Gentoo    Biscoe           40.9           40.9 2007\n62     Gentoo    Biscoe           49.0           49.0 2007\n63     Gentoo    Biscoe           45.5           45.5 2007\n64     Gentoo    Biscoe           48.4           48.4 2007\n65     Gentoo    Biscoe           45.8           45.8 2007\n66     Gentoo    Biscoe           49.3           49.3 2007\n67     Gentoo    Biscoe           42.0           42.0 2007\n68     Gentoo    Biscoe           49.2           49.2 2007\n69     Gentoo    Biscoe           46.2           46.2 2007\n70     Gentoo    Biscoe           48.7           48.7 2007\n71     Gentoo    Biscoe           50.2           50.2 2007\n72     Gentoo    Biscoe           45.1           45.1 2007\n73     Gentoo    Biscoe           46.5           46.5 2007\n74     Gentoo    Biscoe           46.3           46.3 2007\n75     Gentoo    Biscoe           42.9           42.9 2007\n76     Gentoo    Biscoe           46.1           46.1 2007\n77     Gentoo    Biscoe           44.5           44.5 2007\n78     Gentoo    Biscoe           47.8           47.8 2007\n79     Gentoo    Biscoe           48.2           48.2 2007\n80     Gentoo    Biscoe           50.0           50.0 2007\n81     Gentoo    Biscoe           47.3           47.3 2007\n82     Gentoo    Biscoe           42.8           42.8 2007\n83     Gentoo    Biscoe           45.1           45.1 2007\n84     Gentoo    Biscoe           59.6           59.6 2007\n85     Gentoo    Biscoe           49.1           49.1 2008\n86     Gentoo    Biscoe           48.4           48.4 2008\n87     Gentoo    Biscoe           42.6           42.6 2008\n88     Gentoo    Biscoe           44.4           44.4 2008\n89     Gentoo    Biscoe           44.0           44.0 2008\n90     Gentoo    Biscoe           48.7           48.7 2008\n91     Gentoo    Biscoe           42.7           42.7 2008\n92     Gentoo    Biscoe           49.6           49.6 2008\n93     Gentoo    Biscoe           45.3           45.3 2008\n94     Gentoo    Biscoe           49.6           49.6 2008\n95     Gentoo    Biscoe           50.5           50.5 2008\n96     Gentoo    Biscoe           43.6           43.6 2008\n97     Gentoo    Biscoe           45.5           45.5 2008\n98     Gentoo    Biscoe           50.5           50.5 2008\n99     Gentoo    Biscoe           44.9           44.9 2008\n100    Gentoo    Biscoe           45.2           45.2 2008\n101    Gentoo    Biscoe           46.6           46.6 2008\n102    Gentoo    Biscoe           48.5           48.5 2008\n103    Gentoo    Biscoe           45.1           45.1 2008\n104    Gentoo    Biscoe           50.1           50.1 2008\n105    Gentoo    Biscoe           46.5           46.5 2008\n106    Gentoo    Biscoe           45.0           45.0 2008\n107    Gentoo    Biscoe           43.8           43.8 2008\n108    Gentoo    Biscoe           45.5           45.5 2008\n109    Gentoo    Biscoe           43.2           43.2 2008\n110    Gentoo    Biscoe           50.4           50.4 2008\n111    Gentoo    Biscoe           45.3           45.3 2008\n112    Gentoo    Biscoe           46.2           46.2 2008\n113    Gentoo    Biscoe           45.7           45.7 2008\n114    Gentoo    Biscoe           54.3           54.3 2008\n115    Gentoo    Biscoe           45.8           45.8 2008\n116    Gentoo    Biscoe           49.8           49.8 2008\n117    Gentoo    Biscoe           46.2           46.2 2008\n118    Gentoo    Biscoe           49.5           49.5 2008\n119    Gentoo    Biscoe           43.5           43.5 2008\n120    Gentoo    Biscoe           50.7           50.7 2008\n121    Gentoo    Biscoe           47.7           47.7 2008\n122    Gentoo    Biscoe           46.4           46.4 2008\n123    Gentoo    Biscoe           48.2           48.2 2008\n124    Gentoo    Biscoe           46.5           46.5 2008\n125    Gentoo    Biscoe           46.4           46.4 2008\n126    Gentoo    Biscoe           48.6           48.6 2008\n127    Gentoo    Biscoe           47.5           47.5 2008\n128    Gentoo    Biscoe           51.1           51.1 2008\n129    Gentoo    Biscoe           45.2           45.2 2008\n130    Gentoo    Biscoe           45.2           45.2 2008\n131    Gentoo    Biscoe           49.1           49.1 2009\n132    Gentoo    Biscoe           52.5           52.5 2009\n133    Gentoo    Biscoe           47.4           47.4 2009\n134    Gentoo    Biscoe           50.0           50.0 2009\n135    Gentoo    Biscoe           44.9           44.9 2009\n136    Gentoo    Biscoe           50.8           50.8 2009\n137    Gentoo    Biscoe           43.4           43.4 2009\n138    Gentoo    Biscoe           51.3           51.3 2009\n139    Gentoo    Biscoe           47.5           47.5 2009\n140    Gentoo    Biscoe           52.1           52.1 2009\n141    Gentoo    Biscoe           47.5           47.5 2009\n142    Gentoo    Biscoe           52.2           52.2 2009\n143    Gentoo    Biscoe           45.5           45.5 2009\n144    Gentoo    Biscoe           49.5           49.5 2009\n145    Gentoo    Biscoe           44.5           44.5 2009\n146    Gentoo    Biscoe           50.8           50.8 2009\n147    Gentoo    Biscoe           49.4           49.4 2009\n148    Gentoo    Biscoe           46.9           46.9 2009\n149    Gentoo    Biscoe           48.4           48.4 2009\n150    Gentoo    Biscoe           51.1           51.1 2009\n151    Gentoo    Biscoe           48.5           48.5 2009\n152    Gentoo    Biscoe           55.9           55.9 2009\n153    Gentoo    Biscoe           47.2           47.2 2009\n154    Gentoo    Biscoe           49.1           49.1 2009\n155    Gentoo    Biscoe           47.3           47.3 2009\n156    Gentoo    Biscoe           46.8           46.8 2009\n157    Gentoo    Biscoe           41.7           41.7 2009\n158    Gentoo    Biscoe           53.4           53.4 2009\n159    Gentoo    Biscoe           43.3           43.3 2009\n160    Gentoo    Biscoe           48.1           48.1 2009\n161    Gentoo    Biscoe           50.5           50.5 2009\n162    Gentoo    Biscoe           49.8           49.8 2009\n163    Gentoo    Biscoe           43.5           43.5 2009\n164    Gentoo    Biscoe           51.5           51.5 2009\n165    Gentoo    Biscoe           46.2           46.2 2009\n166    Gentoo    Biscoe           55.1           55.1 2009\n167    Gentoo    Biscoe           44.5           44.5 2009\n168    Gentoo    Biscoe           48.8           48.8 2009\n169    Gentoo    Biscoe           47.2           47.2 2009\n170    Gentoo    Biscoe             NA             NA 2009\n171    Gentoo    Biscoe           46.8           46.8 2009\n172    Gentoo    Biscoe           50.4           50.4 2009\n173    Gentoo    Biscoe           45.2           45.2 2009\n174    Gentoo    Biscoe           49.9           49.9 2009\n175 Chinstrap     Dream           46.5           46.5 2007\n176 Chinstrap     Dream           50.0           50.0 2007\n177 Chinstrap     Dream           51.3           51.3 2007\n178 Chinstrap     Dream           45.4           45.4 2007\n179 Chinstrap     Dream           52.7           52.7 2007\n180 Chinstrap     Dream           45.2           45.2 2007\n181 Chinstrap     Dream           46.1           46.1 2007\n182 Chinstrap     Dream           51.3           51.3 2007\n183 Chinstrap     Dream           46.0           46.0 2007\n184 Chinstrap     Dream           51.3           51.3 2007\n185 Chinstrap     Dream           46.6           46.6 2007\n186 Chinstrap     Dream           51.7           51.7 2007\n187 Chinstrap     Dream           47.0           47.0 2007\n188 Chinstrap     Dream           52.0           52.0 2007\n189 Chinstrap     Dream           45.9           45.9 2007\n190 Chinstrap     Dream           50.5           50.5 2007\n191 Chinstrap     Dream           50.3           50.3 2007\n192 Chinstrap     Dream           58.0           58.0 2007\n193 Chinstrap     Dream           46.4           46.4 2007\n194 Chinstrap     Dream           49.2           49.2 2007\n195 Chinstrap     Dream           42.4           42.4 2007\n196 Chinstrap     Dream           48.5           48.5 2007\n197 Chinstrap     Dream           43.2           43.2 2007\n198 Chinstrap     Dream           50.6           50.6 2007\n199 Chinstrap     Dream           46.7           46.7 2007\n200 Chinstrap     Dream           52.0           52.0 2007"
  },
  {
    "objectID": "slides/week09.html#order-by-clause",
    "href": "slides/week09.html#order-by-clause",
    "title": "SQL",
    "section": "Order by clause",
    "text": "Order by clause\n\nSELECT species, island, bill_length_mm, bill_depth_mm\nFROM penguins\nORDER BY bill_length_mm\n\n\n\n      species    island bill_length_mm bill_depth_mm\n1      Adelie Torgersen             NA            NA\n2      Gentoo    Biscoe             NA            NA\n3      Adelie     Dream           32.1          15.5\n4      Adelie     Dream           33.1          16.1\n5      Adelie Torgersen           33.5          19.0\n6      Adelie     Dream           34.0          17.1\n7      Adelie Torgersen           34.1          18.1\n8      Adelie Torgersen           34.4          18.4\n9      Adelie    Biscoe           34.5          18.1\n10     Adelie Torgersen           34.6          21.1\n11     Adelie Torgersen           34.6          17.2\n12     Adelie    Biscoe           35.0          17.9\n13     Adelie    Biscoe           35.0          17.9\n14     Adelie Torgersen           35.1          19.4\n15     Adelie Torgersen           35.2          15.9\n16     Adelie    Biscoe           35.3          18.9\n17     Adelie    Biscoe           35.5          16.2\n18     Adelie Torgersen           35.5          17.5\n19     Adelie     Dream           35.6          17.5\n20     Adelie    Biscoe           35.7          16.9\n21     Adelie     Dream           35.7          18.0\n22     Adelie Torgersen           35.7          17.0\n23     Adelie    Biscoe           35.9          19.2\n24     Adelie Torgersen           35.9          16.6\n25     Adelie     Dream           36.0          18.5\n26     Adelie     Dream           36.0          17.9\n27     Adelie     Dream           36.0          17.8\n28     Adelie     Dream           36.0          17.1\n29     Adelie Torgersen           36.2          16.1\n30     Adelie     Dream           36.2          17.3\n31     Adelie Torgersen           36.2          17.2\n32     Adelie     Dream           36.3          19.5\n33     Adelie     Dream           36.4          17.0\n34     Adelie    Biscoe           36.4          17.1\n35     Adelie     Dream           36.5          18.0\n36     Adelie    Biscoe           36.5          16.6\n37     Adelie Torgersen           36.6          17.8\n38     Adelie     Dream           36.6          18.4\n39     Adelie Torgersen           36.7          19.3\n40     Adelie Torgersen           36.7          18.8\n41     Adelie     Dream           36.8          18.5\n42     Adelie     Dream           36.9          18.6\n43     Adelie     Dream           37.0          16.9\n44     Adelie     Dream           37.0          16.5\n45     Adelie     Dream           37.2          18.1\n46     Adelie Torgersen           37.2          19.4\n47     Adelie     Dream           37.3          17.8\n48     Adelie Torgersen           37.3          20.5\n49     Adelie     Dream           37.3          16.8\n50     Adelie     Dream           37.5          18.9\n51     Adelie     Dream           37.5          18.5\n52     Adelie     Dream           37.6          19.3\n53     Adelie    Biscoe           37.6          19.1\n54     Adelie    Biscoe           37.6          17.0\n55     Adelie    Biscoe           37.7          18.7\n56     Adelie    Biscoe           37.7          16.0\n57     Adelie Torgersen           37.7          19.8\n58     Adelie Torgersen           37.8          17.1\n59     Adelie Torgersen           37.8          17.3\n60     Adelie    Biscoe           37.8          18.3\n61     Adelie    Biscoe           37.8          20.0\n62     Adelie     Dream           37.8          18.1\n63     Adelie    Biscoe           37.9          18.6\n64     Adelie    Biscoe           37.9          18.6\n65     Adelie     Dream           38.1          18.6\n66     Adelie    Biscoe           38.1          17.0\n67     Adelie    Biscoe           38.1          16.5\n68     Adelie     Dream           38.1          17.6\n69     Adelie    Biscoe           38.2          18.1\n70     Adelie    Biscoe           38.2          20.0\n71     Adelie     Dream           38.3          19.2\n72     Adelie Torgersen           38.5          17.9\n73     Adelie Torgersen           38.6          21.2\n74     Adelie    Biscoe           38.6          17.2\n75     Adelie Torgersen           38.6          17.0\n76     Adelie Torgersen           38.7          19.0\n77     Adelie    Biscoe           38.8          17.2\n78     Adelie     Dream           38.8          20.0\n79     Adelie Torgersen           38.8          17.6\n80     Adelie Torgersen           38.9          17.8\n81     Adelie     Dream           38.9          18.8\n82     Adelie    Biscoe           39.0          17.5\n83     Adelie Torgersen           39.0          17.1\n84     Adelie     Dream           39.0          18.7\n85     Adelie Torgersen           39.1          18.7\n86     Adelie Torgersen           39.2          19.6\n87     Adelie     Dream           39.2          21.1\n88     Adelie     Dream           39.2          18.6\n89     Adelie Torgersen           39.3          20.6\n90     Adelie Torgersen           39.5          17.4\n91     Adelie     Dream           39.5          16.7\n92     Adelie     Dream           39.5          17.8\n93     Adelie     Dream           39.6          18.8\n94     Adelie    Biscoe           39.6          17.7\n95     Adelie Torgersen           39.6          17.2\n96     Adelie     Dream           39.6          18.1\n97     Adelie    Biscoe           39.6          20.7\n98     Adelie Torgersen           39.7          18.4\n99     Adelie    Biscoe           39.7          18.9\n100    Adelie    Biscoe           39.7          17.7\n101    Adelie     Dream           39.7          17.9\n102    Adelie     Dream           39.8          19.1\n103    Adelie    Biscoe           40.1          18.9\n104    Adelie Torgersen           40.2          17.0\n105    Adelie     Dream           40.2          20.1\n106    Adelie     Dream           40.2          17.1\n107    Adelie Torgersen           40.3          18.0\n108    Adelie     Dream           40.3          18.5\n109    Adelie    Biscoe           40.5          17.9\n110    Adelie    Biscoe           40.5          18.9\n111    Adelie    Biscoe           40.6          18.6\n112    Adelie    Biscoe           40.6          18.8\n113    Adelie Torgersen           40.6          19.0\n114    Adelie     Dream           40.6          17.2\n115    Adelie     Dream           40.7          17.0\n116    Adelie     Dream           40.8          18.4\n117    Adelie     Dream           40.8          18.9\n118    Adelie     Dream           40.9          18.9\n119    Adelie Torgersen           40.9          16.8\n120    Gentoo    Biscoe           40.9          13.7\n121 Chinstrap     Dream           40.9          16.6\n122    Adelie    Biscoe           41.0          20.0\n123    Adelie Torgersen           41.1          17.6\n124    Adelie     Dream           41.1          19.0\n125    Adelie    Biscoe           41.1          18.2\n126    Adelie    Biscoe           41.1          19.1\n127    Adelie     Dream           41.1          18.1\n128    Adelie Torgersen           41.1          18.6\n129    Adelie     Dream           41.1          17.5\n130    Adelie    Biscoe           41.3          21.1\n131    Adelie     Dream           41.3          20.3\n132    Adelie    Biscoe           41.4          18.6\n133    Adelie Torgersen           41.4          18.5\n134    Adelie Torgersen           41.5          18.3\n135    Adelie     Dream           41.5          18.5\n136    Adelie    Biscoe           41.6          18.0\n137    Gentoo    Biscoe           41.7          14.7\n138    Adelie Torgersen           41.8          19.4\n139    Adelie Torgersen           42.0          20.2\n140    Adelie    Biscoe           42.0          19.5\n141    Gentoo    Biscoe           42.0          13.5\n142    Adelie Torgersen           42.1          19.1\n143    Adelie     Dream           42.2          18.5\n144    Adelie    Biscoe           42.2          19.5\n145    Adelie     Dream           42.3          21.2\n146 Chinstrap     Dream           42.4          17.3\n147    Adelie Torgersen           42.5          20.7\n148 Chinstrap     Dream           42.5          16.7\n149 Chinstrap     Dream           42.5          17.3\n150    Gentoo    Biscoe           42.6          13.7\n151    Adelie    Biscoe           42.7          18.3\n152    Gentoo    Biscoe           42.7          13.7\n153    Adelie Torgersen           42.8          18.5\n154    Gentoo    Biscoe           42.8          14.2\n155    Adelie Torgersen           42.9          17.6\n156    Gentoo    Biscoe           42.9          13.1\n157    Adelie Torgersen           43.1          19.2\n158    Adelie     Dream           43.2          18.5\n159    Adelie    Biscoe           43.2          19.0\n160    Gentoo    Biscoe           43.2          14.5\n161 Chinstrap     Dream           43.2          16.6\n162    Gentoo    Biscoe           43.3          13.4\n163    Gentoo    Biscoe           43.3          14.0\n164    Gentoo    Biscoe           43.4          14.4\n165    Gentoo    Biscoe           43.5          14.2\n166    Gentoo    Biscoe           43.5          15.2\n167 Chinstrap     Dream           43.5          18.1\n168    Gentoo    Biscoe           43.6          13.9\n169    Gentoo    Biscoe           43.8          13.9\n170    Gentoo    Biscoe           44.0          13.6\n171    Adelie     Dream           44.1          19.7\n172    Adelie Torgersen           44.1          18.0\n173    Gentoo    Biscoe           44.4          17.3\n174    Gentoo    Biscoe           44.5          14.3\n175    Gentoo    Biscoe           44.5          14.7\n176    Gentoo    Biscoe           44.5          15.7\n177    Gentoo    Biscoe           44.9          13.3\n178    Gentoo    Biscoe           44.9          13.8\n179    Gentoo    Biscoe           45.0          15.4\n180    Gentoo    Biscoe           45.1          14.5\n181    Gentoo    Biscoe           45.1          14.5\n182    Gentoo    Biscoe           45.1          14.4\n183    Gentoo    Biscoe           45.2          15.8\n184    Gentoo    Biscoe           45.2          13.8\n185    Gentoo    Biscoe           45.2          16.4\n186    Gentoo    Biscoe           45.2          14.8\n187 Chinstrap     Dream           45.2          17.8\n188 Chinstrap     Dream           45.2          16.6\n189    Gentoo    Biscoe           45.3          13.7\n190    Gentoo    Biscoe           45.3          13.8\n191    Gentoo    Biscoe           45.4          14.6\n192 Chinstrap     Dream           45.4          18.7\n193    Gentoo    Biscoe           45.5          13.7\n194    Gentoo    Biscoe           45.5          13.9\n195    Gentoo    Biscoe           45.5          15.0\n196    Gentoo    Biscoe           45.5          14.5\n197 Chinstrap     Dream           45.5          17.0\n198    Adelie    Biscoe           45.6          20.3\n199 Chinstrap     Dream           45.6          19.4\n200    Gentoo    Biscoe           45.7          13.9\n201 Chinstrap     Dream           45.7          17.3\n202 Chinstrap     Dream           45.7          17.0\n203    Adelie Torgersen           45.8          18.9\n204    Gentoo    Biscoe           45.8          14.6\n205    Gentoo    Biscoe           45.8          14.2\n206 Chinstrap     Dream           45.9          17.1\n207    Adelie Torgersen           46.0          21.5\n208 Chinstrap     Dream           46.0          18.9\n209    Gentoo    Biscoe           46.1          13.2\n210    Gentoo    Biscoe           46.1          15.1\n211 Chinstrap     Dream           46.1          18.2\n212    Gentoo    Biscoe           46.2          14.5\n213    Gentoo    Biscoe           46.2          14.9\n214    Gentoo    Biscoe           46.2          14.4\n215    Gentoo    Biscoe           46.2          14.1\n216 Chinstrap     Dream           46.2          17.5\n217    Gentoo    Biscoe           46.3          15.8\n218    Gentoo    Biscoe           46.4          15.6\n219    Gentoo    Biscoe           46.4          15.0\n220 Chinstrap     Dream           46.4          18.6\n221 Chinstrap     Dream           46.4          17.8\n222    Gentoo    Biscoe           46.5          13.5\n223    Gentoo    Biscoe           46.5          14.5\n224    Gentoo    Biscoe           46.5          14.4\n225    Gentoo    Biscoe           46.5          14.8\n226 Chinstrap     Dream           46.5          17.9\n227    Gentoo    Biscoe           46.6          14.2\n228 Chinstrap     Dream           46.6          17.8\n229    Gentoo    Biscoe           46.7          15.3\n230 Chinstrap     Dream           46.7          17.9\n231    Gentoo    Biscoe           46.8          15.4\n232    Gentoo    Biscoe           46.8          16.1\n233    Gentoo    Biscoe           46.8          14.3\n234 Chinstrap     Dream           46.8          16.5\n235    Gentoo    Biscoe           46.9          14.6\n236 Chinstrap     Dream           46.9          16.6\n237 Chinstrap     Dream           47.0          17.3\n238    Gentoo    Biscoe           47.2          15.5\n239    Gentoo    Biscoe           47.2          13.7\n240    Gentoo    Biscoe           47.3          15.3\n241    Gentoo    Biscoe           47.3          13.8\n242    Gentoo    Biscoe           47.4          14.6\n243    Gentoo    Biscoe           47.5          14.2\n244    Gentoo    Biscoe           47.5          14.0\n245    Gentoo    Biscoe           47.5          15.0\n246 Chinstrap     Dream           47.5          16.8\n247    Gentoo    Biscoe           47.6          14.5\n248 Chinstrap     Dream           47.6          18.3\n249    Gentoo    Biscoe           47.7          15.0\n250    Gentoo    Biscoe           47.8          15.0\n251    Gentoo    Biscoe           48.1          15.1\n252 Chinstrap     Dream           48.1          16.4\n253    Gentoo    Biscoe           48.2          14.3\n254    Gentoo    Biscoe           48.2          15.6\n255    Gentoo    Biscoe           48.4          14.6\n256    Gentoo    Biscoe           48.4          16.3\n257    Gentoo    Biscoe           48.4          14.4\n258    Gentoo    Biscoe           48.5          14.1\n259    Gentoo    Biscoe           48.5          15.0\n260 Chinstrap     Dream           48.5          17.5\n261    Gentoo    Biscoe           48.6          16.0\n262    Gentoo    Biscoe           48.7          14.1\n263    Gentoo    Biscoe           48.7          15.1\n264    Gentoo    Biscoe           48.7          15.7\n265    Gentoo    Biscoe           48.8          16.2\n266    Gentoo    Biscoe           49.0          16.1\n267 Chinstrap     Dream           49.0          19.5\n268 Chinstrap     Dream           49.0          19.6\n269    Gentoo    Biscoe           49.1          14.8\n270    Gentoo    Biscoe           49.1          14.5\n271    Gentoo    Biscoe           49.1          15.0\n272    Gentoo    Biscoe           49.2          15.2\n273 Chinstrap     Dream           49.2          18.2\n274    Gentoo    Biscoe           49.3          15.7\n275 Chinstrap     Dream           49.3          19.9\n276    Gentoo    Biscoe           49.4          15.8\n277    Gentoo    Biscoe           49.5          16.2\n278    Gentoo    Biscoe           49.5          16.1\n279 Chinstrap     Dream           49.5          19.0\n280    Gentoo    Biscoe           49.6          16.0\n281    Gentoo    Biscoe           49.6          15.0\n282 Chinstrap     Dream           49.6          18.2\n283 Chinstrap     Dream           49.7          18.6\n284    Gentoo    Biscoe           49.8          16.8\n285    Gentoo    Biscoe           49.8          15.9\n286 Chinstrap     Dream           49.8          17.3\n287    Gentoo    Biscoe           49.9          16.1\n288    Gentoo    Biscoe           50.0          16.3\n289    Gentoo    Biscoe           50.0          15.2\n290    Gentoo    Biscoe           50.0          15.3\n291    Gentoo    Biscoe           50.0          15.9\n292 Chinstrap     Dream           50.0          19.5\n293    Gentoo    Biscoe           50.1          15.0\n294 Chinstrap     Dream           50.1          17.9\n295    Gentoo    Biscoe           50.2          14.3\n296 Chinstrap     Dream           50.2          18.8\n297 Chinstrap     Dream           50.2          18.7\n298 Chinstrap     Dream           50.3          20.0\n299    Gentoo    Biscoe           50.4          15.3\n300    Gentoo    Biscoe           50.4          15.7\n301    Gentoo    Biscoe           50.5          15.9\n302    Gentoo    Biscoe           50.5          15.9\n303    Gentoo    Biscoe           50.5          15.2\n304 Chinstrap     Dream           50.5          19.6\n305 Chinstrap     Dream           50.5          18.4\n306 Chinstrap     Dream           50.6          19.4\n307    Gentoo    Biscoe           50.7          15.0\n308 Chinstrap     Dream           50.7          19.7\n309    Gentoo    Biscoe           50.8          17.3\n310    Gentoo    Biscoe           50.8          15.7\n311 Chinstrap     Dream           50.8          18.5\n312 Chinstrap     Dream           50.8          19.0\n313 Chinstrap     Dream           50.9          19.1\n314 Chinstrap     Dream           50.9          17.9\n315 Chinstrap     Dream           51.0          18.8\n316    Gentoo    Biscoe           51.1          16.3\n317    Gentoo    Biscoe           51.1          16.5\n318    Gentoo    Biscoe           51.3          14.2\n319 Chinstrap     Dream           51.3          19.2\n320 Chinstrap     Dream           51.3          18.2\n321 Chinstrap     Dream           51.3          19.9\n322 Chinstrap     Dream           51.4          19.0\n323    Gentoo    Biscoe           51.5          16.3\n324 Chinstrap     Dream           51.5          18.7\n325 Chinstrap     Dream           51.7          20.3\n326 Chinstrap     Dream           51.9          19.5\n327 Chinstrap     Dream           52.0          18.1\n328 Chinstrap     Dream           52.0          19.0\n329 Chinstrap     Dream           52.0          20.7\n330    Gentoo    Biscoe           52.1          17.0\n331    Gentoo    Biscoe           52.2          17.1\n332 Chinstrap     Dream           52.2          18.8\n333    Gentoo    Biscoe           52.5          15.6\n334 Chinstrap     Dream           52.7          19.8\n335 Chinstrap     Dream           52.8          20.0\n336    Gentoo    Biscoe           53.4          15.8\n337 Chinstrap     Dream           53.5          19.9\n338 Chinstrap     Dream           54.2          20.8\n339    Gentoo    Biscoe           54.3          15.7\n340    Gentoo    Biscoe           55.1          16.0\n341 Chinstrap     Dream           55.8          19.8\n342    Gentoo    Biscoe           55.9          17.0\n343 Chinstrap     Dream           58.0          17.8\n344    Gentoo    Biscoe           59.6          17.0"
  },
  {
    "objectID": "slides/week09.html#order-by-clause-1",
    "href": "slides/week09.html#order-by-clause-1",
    "title": "SQL",
    "section": "Order by clause",
    "text": "Order by clause\n\nSELECT species, island, bill_length_mm, bill_depth_mm\nFROM penguins\nORDER BY bill_length_mm DESC\n\n\n\n      species    island bill_length_mm bill_depth_mm\n1      Gentoo    Biscoe           59.6          17.0\n2   Chinstrap     Dream           58.0          17.8\n3      Gentoo    Biscoe           55.9          17.0\n4   Chinstrap     Dream           55.8          19.8\n5      Gentoo    Biscoe           55.1          16.0\n6      Gentoo    Biscoe           54.3          15.7\n7   Chinstrap     Dream           54.2          20.8\n8   Chinstrap     Dream           53.5          19.9\n9      Gentoo    Biscoe           53.4          15.8\n10  Chinstrap     Dream           52.8          20.0\n11  Chinstrap     Dream           52.7          19.8\n12     Gentoo    Biscoe           52.5          15.6\n13     Gentoo    Biscoe           52.2          17.1\n14  Chinstrap     Dream           52.2          18.8\n15     Gentoo    Biscoe           52.1          17.0\n16  Chinstrap     Dream           52.0          18.1\n17  Chinstrap     Dream           52.0          19.0\n18  Chinstrap     Dream           52.0          20.7\n19  Chinstrap     Dream           51.9          19.5\n20  Chinstrap     Dream           51.7          20.3\n21     Gentoo    Biscoe           51.5          16.3\n22  Chinstrap     Dream           51.5          18.7\n23  Chinstrap     Dream           51.4          19.0\n24     Gentoo    Biscoe           51.3          14.2\n25  Chinstrap     Dream           51.3          19.2\n26  Chinstrap     Dream           51.3          18.2\n27  Chinstrap     Dream           51.3          19.9\n28     Gentoo    Biscoe           51.1          16.3\n29     Gentoo    Biscoe           51.1          16.5\n30  Chinstrap     Dream           51.0          18.8\n31  Chinstrap     Dream           50.9          19.1\n32  Chinstrap     Dream           50.9          17.9\n33     Gentoo    Biscoe           50.8          17.3\n34     Gentoo    Biscoe           50.8          15.7\n35  Chinstrap     Dream           50.8          18.5\n36  Chinstrap     Dream           50.8          19.0\n37     Gentoo    Biscoe           50.7          15.0\n38  Chinstrap     Dream           50.7          19.7\n39  Chinstrap     Dream           50.6          19.4\n40     Gentoo    Biscoe           50.5          15.9\n41     Gentoo    Biscoe           50.5          15.9\n42     Gentoo    Biscoe           50.5          15.2\n43  Chinstrap     Dream           50.5          19.6\n44  Chinstrap     Dream           50.5          18.4\n45     Gentoo    Biscoe           50.4          15.3\n46     Gentoo    Biscoe           50.4          15.7\n47  Chinstrap     Dream           50.3          20.0\n48     Gentoo    Biscoe           50.2          14.3\n49  Chinstrap     Dream           50.2          18.8\n50  Chinstrap     Dream           50.2          18.7\n51     Gentoo    Biscoe           50.1          15.0\n52  Chinstrap     Dream           50.1          17.9\n53     Gentoo    Biscoe           50.0          16.3\n54     Gentoo    Biscoe           50.0          15.2\n55     Gentoo    Biscoe           50.0          15.3\n56     Gentoo    Biscoe           50.0          15.9\n57  Chinstrap     Dream           50.0          19.5\n58     Gentoo    Biscoe           49.9          16.1\n59     Gentoo    Biscoe           49.8          16.8\n60     Gentoo    Biscoe           49.8          15.9\n61  Chinstrap     Dream           49.8          17.3\n62  Chinstrap     Dream           49.7          18.6\n63     Gentoo    Biscoe           49.6          16.0\n64     Gentoo    Biscoe           49.6          15.0\n65  Chinstrap     Dream           49.6          18.2\n66     Gentoo    Biscoe           49.5          16.2\n67     Gentoo    Biscoe           49.5          16.1\n68  Chinstrap     Dream           49.5          19.0\n69     Gentoo    Biscoe           49.4          15.8\n70     Gentoo    Biscoe           49.3          15.7\n71  Chinstrap     Dream           49.3          19.9\n72     Gentoo    Biscoe           49.2          15.2\n73  Chinstrap     Dream           49.2          18.2\n74     Gentoo    Biscoe           49.1          14.8\n75     Gentoo    Biscoe           49.1          14.5\n76     Gentoo    Biscoe           49.1          15.0\n77     Gentoo    Biscoe           49.0          16.1\n78  Chinstrap     Dream           49.0          19.5\n79  Chinstrap     Dream           49.0          19.6\n80     Gentoo    Biscoe           48.8          16.2\n81     Gentoo    Biscoe           48.7          14.1\n82     Gentoo    Biscoe           48.7          15.1\n83     Gentoo    Biscoe           48.7          15.7\n84     Gentoo    Biscoe           48.6          16.0\n85     Gentoo    Biscoe           48.5          14.1\n86     Gentoo    Biscoe           48.5          15.0\n87  Chinstrap     Dream           48.5          17.5\n88     Gentoo    Biscoe           48.4          14.6\n89     Gentoo    Biscoe           48.4          16.3\n90     Gentoo    Biscoe           48.4          14.4\n91     Gentoo    Biscoe           48.2          14.3\n92     Gentoo    Biscoe           48.2          15.6\n93     Gentoo    Biscoe           48.1          15.1\n94  Chinstrap     Dream           48.1          16.4\n95     Gentoo    Biscoe           47.8          15.0\n96     Gentoo    Biscoe           47.7          15.0\n97     Gentoo    Biscoe           47.6          14.5\n98  Chinstrap     Dream           47.6          18.3\n99     Gentoo    Biscoe           47.5          14.2\n100    Gentoo    Biscoe           47.5          14.0\n101    Gentoo    Biscoe           47.5          15.0\n102 Chinstrap     Dream           47.5          16.8\n103    Gentoo    Biscoe           47.4          14.6\n104    Gentoo    Biscoe           47.3          15.3\n105    Gentoo    Biscoe           47.3          13.8\n106    Gentoo    Biscoe           47.2          15.5\n107    Gentoo    Biscoe           47.2          13.7\n108 Chinstrap     Dream           47.0          17.3\n109    Gentoo    Biscoe           46.9          14.6\n110 Chinstrap     Dream           46.9          16.6\n111    Gentoo    Biscoe           46.8          15.4\n112    Gentoo    Biscoe           46.8          16.1\n113    Gentoo    Biscoe           46.8          14.3\n114 Chinstrap     Dream           46.8          16.5\n115    Gentoo    Biscoe           46.7          15.3\n116 Chinstrap     Dream           46.7          17.9\n117    Gentoo    Biscoe           46.6          14.2\n118 Chinstrap     Dream           46.6          17.8\n119    Gentoo    Biscoe           46.5          13.5\n120    Gentoo    Biscoe           46.5          14.5\n121    Gentoo    Biscoe           46.5          14.4\n122    Gentoo    Biscoe           46.5          14.8\n123 Chinstrap     Dream           46.5          17.9\n124    Gentoo    Biscoe           46.4          15.6\n125    Gentoo    Biscoe           46.4          15.0\n126 Chinstrap     Dream           46.4          18.6\n127 Chinstrap     Dream           46.4          17.8\n128    Gentoo    Biscoe           46.3          15.8\n129    Gentoo    Biscoe           46.2          14.5\n130    Gentoo    Biscoe           46.2          14.9\n131    Gentoo    Biscoe           46.2          14.4\n132    Gentoo    Biscoe           46.2          14.1\n133 Chinstrap     Dream           46.2          17.5\n134    Gentoo    Biscoe           46.1          13.2\n135    Gentoo    Biscoe           46.1          15.1\n136 Chinstrap     Dream           46.1          18.2\n137    Adelie Torgersen           46.0          21.5\n138 Chinstrap     Dream           46.0          18.9\n139 Chinstrap     Dream           45.9          17.1\n140    Adelie Torgersen           45.8          18.9\n141    Gentoo    Biscoe           45.8          14.6\n142    Gentoo    Biscoe           45.8          14.2\n143    Gentoo    Biscoe           45.7          13.9\n144 Chinstrap     Dream           45.7          17.3\n145 Chinstrap     Dream           45.7          17.0\n146    Adelie    Biscoe           45.6          20.3\n147 Chinstrap     Dream           45.6          19.4\n148    Gentoo    Biscoe           45.5          13.7\n149    Gentoo    Biscoe           45.5          13.9\n150    Gentoo    Biscoe           45.5          15.0\n151    Gentoo    Biscoe           45.5          14.5\n152 Chinstrap     Dream           45.5          17.0\n153    Gentoo    Biscoe           45.4          14.6\n154 Chinstrap     Dream           45.4          18.7\n155    Gentoo    Biscoe           45.3          13.7\n156    Gentoo    Biscoe           45.3          13.8\n157    Gentoo    Biscoe           45.2          15.8\n158    Gentoo    Biscoe           45.2          13.8\n159    Gentoo    Biscoe           45.2          16.4\n160    Gentoo    Biscoe           45.2          14.8\n161 Chinstrap     Dream           45.2          17.8\n162 Chinstrap     Dream           45.2          16.6\n163    Gentoo    Biscoe           45.1          14.5\n164    Gentoo    Biscoe           45.1          14.5\n165    Gentoo    Biscoe           45.1          14.4\n166    Gentoo    Biscoe           45.0          15.4\n167    Gentoo    Biscoe           44.9          13.3\n168    Gentoo    Biscoe           44.9          13.8\n169    Gentoo    Biscoe           44.5          14.3\n170    Gentoo    Biscoe           44.5          14.7\n171    Gentoo    Biscoe           44.5          15.7\n172    Gentoo    Biscoe           44.4          17.3\n173    Adelie     Dream           44.1          19.7\n174    Adelie Torgersen           44.1          18.0\n175    Gentoo    Biscoe           44.0          13.6\n176    Gentoo    Biscoe           43.8          13.9\n177    Gentoo    Biscoe           43.6          13.9\n178    Gentoo    Biscoe           43.5          14.2\n179    Gentoo    Biscoe           43.5          15.2\n180 Chinstrap     Dream           43.5          18.1\n181    Gentoo    Biscoe           43.4          14.4\n182    Gentoo    Biscoe           43.3          13.4\n183    Gentoo    Biscoe           43.3          14.0\n184    Adelie     Dream           43.2          18.5\n185    Adelie    Biscoe           43.2          19.0\n186    Gentoo    Biscoe           43.2          14.5\n187 Chinstrap     Dream           43.2          16.6\n188    Adelie Torgersen           43.1          19.2\n189    Adelie Torgersen           42.9          17.6\n190    Gentoo    Biscoe           42.9          13.1\n191    Adelie Torgersen           42.8          18.5\n192    Gentoo    Biscoe           42.8          14.2\n193    Adelie    Biscoe           42.7          18.3\n194    Gentoo    Biscoe           42.7          13.7\n195    Gentoo    Biscoe           42.6          13.7\n196    Adelie Torgersen           42.5          20.7\n197 Chinstrap     Dream           42.5          16.7\n198 Chinstrap     Dream           42.5          17.3\n199 Chinstrap     Dream           42.4          17.3\n200    Adelie     Dream           42.3          21.2\n201    Adelie     Dream           42.2          18.5\n202    Adelie    Biscoe           42.2          19.5\n203    Adelie Torgersen           42.1          19.1\n204    Adelie Torgersen           42.0          20.2\n205    Adelie    Biscoe           42.0          19.5\n206    Gentoo    Biscoe           42.0          13.5\n207    Adelie Torgersen           41.8          19.4\n208    Gentoo    Biscoe           41.7          14.7\n209    Adelie    Biscoe           41.6          18.0\n210    Adelie Torgersen           41.5          18.3\n211    Adelie     Dream           41.5          18.5\n212    Adelie    Biscoe           41.4          18.6\n213    Adelie Torgersen           41.4          18.5\n214    Adelie    Biscoe           41.3          21.1\n215    Adelie     Dream           41.3          20.3\n216    Adelie Torgersen           41.1          17.6\n217    Adelie     Dream           41.1          19.0\n218    Adelie    Biscoe           41.1          18.2\n219    Adelie    Biscoe           41.1          19.1\n220    Adelie     Dream           41.1          18.1\n221    Adelie Torgersen           41.1          18.6\n222    Adelie     Dream           41.1          17.5\n223    Adelie    Biscoe           41.0          20.0\n224    Adelie     Dream           40.9          18.9\n225    Adelie Torgersen           40.9          16.8\n226    Gentoo    Biscoe           40.9          13.7\n227 Chinstrap     Dream           40.9          16.6\n228    Adelie     Dream           40.8          18.4\n229    Adelie     Dream           40.8          18.9\n230    Adelie     Dream           40.7          17.0\n231    Adelie    Biscoe           40.6          18.6\n232    Adelie    Biscoe           40.6          18.8\n233    Adelie Torgersen           40.6          19.0\n234    Adelie     Dream           40.6          17.2\n235    Adelie    Biscoe           40.5          17.9\n236    Adelie    Biscoe           40.5          18.9\n237    Adelie Torgersen           40.3          18.0\n238    Adelie     Dream           40.3          18.5\n239    Adelie Torgersen           40.2          17.0\n240    Adelie     Dream           40.2          20.1\n241    Adelie     Dream           40.2          17.1\n242    Adelie    Biscoe           40.1          18.9\n243    Adelie     Dream           39.8          19.1\n244    Adelie Torgersen           39.7          18.4\n245    Adelie    Biscoe           39.7          18.9\n246    Adelie    Biscoe           39.7          17.7\n247    Adelie     Dream           39.7          17.9\n248    Adelie     Dream           39.6          18.8\n249    Adelie    Biscoe           39.6          17.7\n250    Adelie Torgersen           39.6          17.2\n251    Adelie     Dream           39.6          18.1\n252    Adelie    Biscoe           39.6          20.7\n253    Adelie Torgersen           39.5          17.4\n254    Adelie     Dream           39.5          16.7\n255    Adelie     Dream           39.5          17.8\n256    Adelie Torgersen           39.3          20.6\n257    Adelie Torgersen           39.2          19.6\n258    Adelie     Dream           39.2          21.1\n259    Adelie     Dream           39.2          18.6\n260    Adelie Torgersen           39.1          18.7\n261    Adelie    Biscoe           39.0          17.5\n262    Adelie Torgersen           39.0          17.1\n263    Adelie     Dream           39.0          18.7\n264    Adelie Torgersen           38.9          17.8\n265    Adelie     Dream           38.9          18.8\n266    Adelie    Biscoe           38.8          17.2\n267    Adelie     Dream           38.8          20.0\n268    Adelie Torgersen           38.8          17.6\n269    Adelie Torgersen           38.7          19.0\n270    Adelie Torgersen           38.6          21.2\n271    Adelie    Biscoe           38.6          17.2\n272    Adelie Torgersen           38.6          17.0\n273    Adelie Torgersen           38.5          17.9\n274    Adelie     Dream           38.3          19.2\n275    Adelie    Biscoe           38.2          18.1\n276    Adelie    Biscoe           38.2          20.0\n277    Adelie     Dream           38.1          18.6\n278    Adelie    Biscoe           38.1          17.0\n279    Adelie    Biscoe           38.1          16.5\n280    Adelie     Dream           38.1          17.6\n281    Adelie    Biscoe           37.9          18.6\n282    Adelie    Biscoe           37.9          18.6\n283    Adelie Torgersen           37.8          17.1\n284    Adelie Torgersen           37.8          17.3\n285    Adelie    Biscoe           37.8          18.3\n286    Adelie    Biscoe           37.8          20.0\n287    Adelie     Dream           37.8          18.1\n288    Adelie    Biscoe           37.7          18.7\n289    Adelie    Biscoe           37.7          16.0\n290    Adelie Torgersen           37.7          19.8\n291    Adelie     Dream           37.6          19.3\n292    Adelie    Biscoe           37.6          19.1\n293    Adelie    Biscoe           37.6          17.0\n294    Adelie     Dream           37.5          18.9\n295    Adelie     Dream           37.5          18.5\n296    Adelie     Dream           37.3          17.8\n297    Adelie Torgersen           37.3          20.5\n298    Adelie     Dream           37.3          16.8\n299    Adelie     Dream           37.2          18.1\n300    Adelie Torgersen           37.2          19.4\n301    Adelie     Dream           37.0          16.9\n302    Adelie     Dream           37.0          16.5\n303    Adelie     Dream           36.9          18.6\n304    Adelie     Dream           36.8          18.5\n305    Adelie Torgersen           36.7          19.3\n306    Adelie Torgersen           36.7          18.8\n307    Adelie Torgersen           36.6          17.8\n308    Adelie     Dream           36.6          18.4\n309    Adelie     Dream           36.5          18.0\n310    Adelie    Biscoe           36.5          16.6\n311    Adelie     Dream           36.4          17.0\n312    Adelie    Biscoe           36.4          17.1\n313    Adelie     Dream           36.3          19.5\n314    Adelie Torgersen           36.2          16.1\n315    Adelie     Dream           36.2          17.3\n316    Adelie Torgersen           36.2          17.2\n317    Adelie     Dream           36.0          18.5\n318    Adelie     Dream           36.0          17.9\n319    Adelie     Dream           36.0          17.8\n320    Adelie     Dream           36.0          17.1\n321    Adelie    Biscoe           35.9          19.2\n322    Adelie Torgersen           35.9          16.6\n323    Adelie    Biscoe           35.7          16.9\n324    Adelie     Dream           35.7          18.0\n325    Adelie Torgersen           35.7          17.0\n326    Adelie     Dream           35.6          17.5\n327    Adelie    Biscoe           35.5          16.2\n328    Adelie Torgersen           35.5          17.5\n329    Adelie    Biscoe           35.3          18.9\n330    Adelie Torgersen           35.2          15.9\n331    Adelie Torgersen           35.1          19.4\n332    Adelie    Biscoe           35.0          17.9\n333    Adelie    Biscoe           35.0          17.9\n334    Adelie Torgersen           34.6          21.1\n335    Adelie Torgersen           34.6          17.2\n336    Adelie    Biscoe           34.5          18.1\n337    Adelie Torgersen           34.4          18.4\n338    Adelie Torgersen           34.1          18.1\n339    Adelie     Dream           34.0          17.1\n340    Adelie Torgersen           33.5          19.0\n341    Adelie     Dream           33.1          16.1\n342    Adelie     Dream           32.1          15.5\n343    Adelie Torgersen             NA            NA\n344    Gentoo    Biscoe             NA            NA"
  },
  {
    "objectID": "slides/week09.html#order-by-clause-2",
    "href": "slides/week09.html#order-by-clause-2",
    "title": "SQL",
    "section": "Order by clause",
    "text": "Order by clause\n\nSELECT species, island, bill_length_mm, bill_depth_mm\nFROM penguins\nORDER BY bill_length_mm ASC\n\n\n\n      species    island bill_length_mm bill_depth_mm\n1      Adelie Torgersen             NA            NA\n2      Gentoo    Biscoe             NA            NA\n3      Adelie     Dream           32.1          15.5\n4      Adelie     Dream           33.1          16.1\n5      Adelie Torgersen           33.5          19.0\n6      Adelie     Dream           34.0          17.1\n7      Adelie Torgersen           34.1          18.1\n8      Adelie Torgersen           34.4          18.4\n9      Adelie    Biscoe           34.5          18.1\n10     Adelie Torgersen           34.6          21.1\n11     Adelie Torgersen           34.6          17.2\n12     Adelie    Biscoe           35.0          17.9\n13     Adelie    Biscoe           35.0          17.9\n14     Adelie Torgersen           35.1          19.4\n15     Adelie Torgersen           35.2          15.9\n16     Adelie    Biscoe           35.3          18.9\n17     Adelie    Biscoe           35.5          16.2\n18     Adelie Torgersen           35.5          17.5\n19     Adelie     Dream           35.6          17.5\n20     Adelie    Biscoe           35.7          16.9\n21     Adelie     Dream           35.7          18.0\n22     Adelie Torgersen           35.7          17.0\n23     Adelie    Biscoe           35.9          19.2\n24     Adelie Torgersen           35.9          16.6\n25     Adelie     Dream           36.0          18.5\n26     Adelie     Dream           36.0          17.9\n27     Adelie     Dream           36.0          17.8\n28     Adelie     Dream           36.0          17.1\n29     Adelie Torgersen           36.2          16.1\n30     Adelie     Dream           36.2          17.3\n31     Adelie Torgersen           36.2          17.2\n32     Adelie     Dream           36.3          19.5\n33     Adelie     Dream           36.4          17.0\n34     Adelie    Biscoe           36.4          17.1\n35     Adelie     Dream           36.5          18.0\n36     Adelie    Biscoe           36.5          16.6\n37     Adelie Torgersen           36.6          17.8\n38     Adelie     Dream           36.6          18.4\n39     Adelie Torgersen           36.7          19.3\n40     Adelie Torgersen           36.7          18.8\n41     Adelie     Dream           36.8          18.5\n42     Adelie     Dream           36.9          18.6\n43     Adelie     Dream           37.0          16.9\n44     Adelie     Dream           37.0          16.5\n45     Adelie     Dream           37.2          18.1\n46     Adelie Torgersen           37.2          19.4\n47     Adelie     Dream           37.3          17.8\n48     Adelie Torgersen           37.3          20.5\n49     Adelie     Dream           37.3          16.8\n50     Adelie     Dream           37.5          18.9\n51     Adelie     Dream           37.5          18.5\n52     Adelie     Dream           37.6          19.3\n53     Adelie    Biscoe           37.6          19.1\n54     Adelie    Biscoe           37.6          17.0\n55     Adelie    Biscoe           37.7          18.7\n56     Adelie    Biscoe           37.7          16.0\n57     Adelie Torgersen           37.7          19.8\n58     Adelie Torgersen           37.8          17.1\n59     Adelie Torgersen           37.8          17.3\n60     Adelie    Biscoe           37.8          18.3\n61     Adelie    Biscoe           37.8          20.0\n62     Adelie     Dream           37.8          18.1\n63     Adelie    Biscoe           37.9          18.6\n64     Adelie    Biscoe           37.9          18.6\n65     Adelie     Dream           38.1          18.6\n66     Adelie    Biscoe           38.1          17.0\n67     Adelie    Biscoe           38.1          16.5\n68     Adelie     Dream           38.1          17.6\n69     Adelie    Biscoe           38.2          18.1\n70     Adelie    Biscoe           38.2          20.0\n71     Adelie     Dream           38.3          19.2\n72     Adelie Torgersen           38.5          17.9\n73     Adelie Torgersen           38.6          21.2\n74     Adelie    Biscoe           38.6          17.2\n75     Adelie Torgersen           38.6          17.0\n76     Adelie Torgersen           38.7          19.0\n77     Adelie    Biscoe           38.8          17.2\n78     Adelie     Dream           38.8          20.0\n79     Adelie Torgersen           38.8          17.6\n80     Adelie Torgersen           38.9          17.8\n81     Adelie     Dream           38.9          18.8\n82     Adelie    Biscoe           39.0          17.5\n83     Adelie Torgersen           39.0          17.1\n84     Adelie     Dream           39.0          18.7\n85     Adelie Torgersen           39.1          18.7\n86     Adelie Torgersen           39.2          19.6\n87     Adelie     Dream           39.2          21.1\n88     Adelie     Dream           39.2          18.6\n89     Adelie Torgersen           39.3          20.6\n90     Adelie Torgersen           39.5          17.4\n91     Adelie     Dream           39.5          16.7\n92     Adelie     Dream           39.5          17.8\n93     Adelie     Dream           39.6          18.8\n94     Adelie    Biscoe           39.6          17.7\n95     Adelie Torgersen           39.6          17.2\n96     Adelie     Dream           39.6          18.1\n97     Adelie    Biscoe           39.6          20.7\n98     Adelie Torgersen           39.7          18.4\n99     Adelie    Biscoe           39.7          18.9\n100    Adelie    Biscoe           39.7          17.7\n101    Adelie     Dream           39.7          17.9\n102    Adelie     Dream           39.8          19.1\n103    Adelie    Biscoe           40.1          18.9\n104    Adelie Torgersen           40.2          17.0\n105    Adelie     Dream           40.2          20.1\n106    Adelie     Dream           40.2          17.1\n107    Adelie Torgersen           40.3          18.0\n108    Adelie     Dream           40.3          18.5\n109    Adelie    Biscoe           40.5          17.9\n110    Adelie    Biscoe           40.5          18.9\n111    Adelie    Biscoe           40.6          18.6\n112    Adelie    Biscoe           40.6          18.8\n113    Adelie Torgersen           40.6          19.0\n114    Adelie     Dream           40.6          17.2\n115    Adelie     Dream           40.7          17.0\n116    Adelie     Dream           40.8          18.4\n117    Adelie     Dream           40.8          18.9\n118    Adelie     Dream           40.9          18.9\n119    Adelie Torgersen           40.9          16.8\n120    Gentoo    Biscoe           40.9          13.7\n121 Chinstrap     Dream           40.9          16.6\n122    Adelie    Biscoe           41.0          20.0\n123    Adelie Torgersen           41.1          17.6\n124    Adelie     Dream           41.1          19.0\n125    Adelie    Biscoe           41.1          18.2\n126    Adelie    Biscoe           41.1          19.1\n127    Adelie     Dream           41.1          18.1\n128    Adelie Torgersen           41.1          18.6\n129    Adelie     Dream           41.1          17.5\n130    Adelie    Biscoe           41.3          21.1\n131    Adelie     Dream           41.3          20.3\n132    Adelie    Biscoe           41.4          18.6\n133    Adelie Torgersen           41.4          18.5\n134    Adelie Torgersen           41.5          18.3\n135    Adelie     Dream           41.5          18.5\n136    Adelie    Biscoe           41.6          18.0\n137    Gentoo    Biscoe           41.7          14.7\n138    Adelie Torgersen           41.8          19.4\n139    Adelie Torgersen           42.0          20.2\n140    Adelie    Biscoe           42.0          19.5\n141    Gentoo    Biscoe           42.0          13.5\n142    Adelie Torgersen           42.1          19.1\n143    Adelie     Dream           42.2          18.5\n144    Adelie    Biscoe           42.2          19.5\n145    Adelie     Dream           42.3          21.2\n146 Chinstrap     Dream           42.4          17.3\n147    Adelie Torgersen           42.5          20.7\n148 Chinstrap     Dream           42.5          16.7\n149 Chinstrap     Dream           42.5          17.3\n150    Gentoo    Biscoe           42.6          13.7\n151    Adelie    Biscoe           42.7          18.3\n152    Gentoo    Biscoe           42.7          13.7\n153    Adelie Torgersen           42.8          18.5\n154    Gentoo    Biscoe           42.8          14.2\n155    Adelie Torgersen           42.9          17.6\n156    Gentoo    Biscoe           42.9          13.1\n157    Adelie Torgersen           43.1          19.2\n158    Adelie     Dream           43.2          18.5\n159    Adelie    Biscoe           43.2          19.0\n160    Gentoo    Biscoe           43.2          14.5\n161 Chinstrap     Dream           43.2          16.6\n162    Gentoo    Biscoe           43.3          13.4\n163    Gentoo    Biscoe           43.3          14.0\n164    Gentoo    Biscoe           43.4          14.4\n165    Gentoo    Biscoe           43.5          14.2\n166    Gentoo    Biscoe           43.5          15.2\n167 Chinstrap     Dream           43.5          18.1\n168    Gentoo    Biscoe           43.6          13.9\n169    Gentoo    Biscoe           43.8          13.9\n170    Gentoo    Biscoe           44.0          13.6\n171    Adelie     Dream           44.1          19.7\n172    Adelie Torgersen           44.1          18.0\n173    Gentoo    Biscoe           44.4          17.3\n174    Gentoo    Biscoe           44.5          14.3\n175    Gentoo    Biscoe           44.5          14.7\n176    Gentoo    Biscoe           44.5          15.7\n177    Gentoo    Biscoe           44.9          13.3\n178    Gentoo    Biscoe           44.9          13.8\n179    Gentoo    Biscoe           45.0          15.4\n180    Gentoo    Biscoe           45.1          14.5\n181    Gentoo    Biscoe           45.1          14.5\n182    Gentoo    Biscoe           45.1          14.4\n183    Gentoo    Biscoe           45.2          15.8\n184    Gentoo    Biscoe           45.2          13.8\n185    Gentoo    Biscoe           45.2          16.4\n186    Gentoo    Biscoe           45.2          14.8\n187 Chinstrap     Dream           45.2          17.8\n188 Chinstrap     Dream           45.2          16.6\n189    Gentoo    Biscoe           45.3          13.7\n190    Gentoo    Biscoe           45.3          13.8\n191    Gentoo    Biscoe           45.4          14.6\n192 Chinstrap     Dream           45.4          18.7\n193    Gentoo    Biscoe           45.5          13.7\n194    Gentoo    Biscoe           45.5          13.9\n195    Gentoo    Biscoe           45.5          15.0\n196    Gentoo    Biscoe           45.5          14.5\n197 Chinstrap     Dream           45.5          17.0\n198    Adelie    Biscoe           45.6          20.3\n199 Chinstrap     Dream           45.6          19.4\n200    Gentoo    Biscoe           45.7          13.9\n201 Chinstrap     Dream           45.7          17.3\n202 Chinstrap     Dream           45.7          17.0\n203    Adelie Torgersen           45.8          18.9\n204    Gentoo    Biscoe           45.8          14.6\n205    Gentoo    Biscoe           45.8          14.2\n206 Chinstrap     Dream           45.9          17.1\n207    Adelie Torgersen           46.0          21.5\n208 Chinstrap     Dream           46.0          18.9\n209    Gentoo    Biscoe           46.1          13.2\n210    Gentoo    Biscoe           46.1          15.1\n211 Chinstrap     Dream           46.1          18.2\n212    Gentoo    Biscoe           46.2          14.5\n213    Gentoo    Biscoe           46.2          14.9\n214    Gentoo    Biscoe           46.2          14.4\n215    Gentoo    Biscoe           46.2          14.1\n216 Chinstrap     Dream           46.2          17.5\n217    Gentoo    Biscoe           46.3          15.8\n218    Gentoo    Biscoe           46.4          15.6\n219    Gentoo    Biscoe           46.4          15.0\n220 Chinstrap     Dream           46.4          18.6\n221 Chinstrap     Dream           46.4          17.8\n222    Gentoo    Biscoe           46.5          13.5\n223    Gentoo    Biscoe           46.5          14.5\n224    Gentoo    Biscoe           46.5          14.4\n225    Gentoo    Biscoe           46.5          14.8\n226 Chinstrap     Dream           46.5          17.9\n227    Gentoo    Biscoe           46.6          14.2\n228 Chinstrap     Dream           46.6          17.8\n229    Gentoo    Biscoe           46.7          15.3\n230 Chinstrap     Dream           46.7          17.9\n231    Gentoo    Biscoe           46.8          15.4\n232    Gentoo    Biscoe           46.8          16.1\n233    Gentoo    Biscoe           46.8          14.3\n234 Chinstrap     Dream           46.8          16.5\n235    Gentoo    Biscoe           46.9          14.6\n236 Chinstrap     Dream           46.9          16.6\n237 Chinstrap     Dream           47.0          17.3\n238    Gentoo    Biscoe           47.2          15.5\n239    Gentoo    Biscoe           47.2          13.7\n240    Gentoo    Biscoe           47.3          15.3\n241    Gentoo    Biscoe           47.3          13.8\n242    Gentoo    Biscoe           47.4          14.6\n243    Gentoo    Biscoe           47.5          14.2\n244    Gentoo    Biscoe           47.5          14.0\n245    Gentoo    Biscoe           47.5          15.0\n246 Chinstrap     Dream           47.5          16.8\n247    Gentoo    Biscoe           47.6          14.5\n248 Chinstrap     Dream           47.6          18.3\n249    Gentoo    Biscoe           47.7          15.0\n250    Gentoo    Biscoe           47.8          15.0\n251    Gentoo    Biscoe           48.1          15.1\n252 Chinstrap     Dream           48.1          16.4\n253    Gentoo    Biscoe           48.2          14.3\n254    Gentoo    Biscoe           48.2          15.6\n255    Gentoo    Biscoe           48.4          14.6\n256    Gentoo    Biscoe           48.4          16.3\n257    Gentoo    Biscoe           48.4          14.4\n258    Gentoo    Biscoe           48.5          14.1\n259    Gentoo    Biscoe           48.5          15.0\n260 Chinstrap     Dream           48.5          17.5\n261    Gentoo    Biscoe           48.6          16.0\n262    Gentoo    Biscoe           48.7          14.1\n263    Gentoo    Biscoe           48.7          15.1\n264    Gentoo    Biscoe           48.7          15.7\n265    Gentoo    Biscoe           48.8          16.2\n266    Gentoo    Biscoe           49.0          16.1\n267 Chinstrap     Dream           49.0          19.5\n268 Chinstrap     Dream           49.0          19.6\n269    Gentoo    Biscoe           49.1          14.8\n270    Gentoo    Biscoe           49.1          14.5\n271    Gentoo    Biscoe           49.1          15.0\n272    Gentoo    Biscoe           49.2          15.2\n273 Chinstrap     Dream           49.2          18.2\n274    Gentoo    Biscoe           49.3          15.7\n275 Chinstrap     Dream           49.3          19.9\n276    Gentoo    Biscoe           49.4          15.8\n277    Gentoo    Biscoe           49.5          16.2\n278    Gentoo    Biscoe           49.5          16.1\n279 Chinstrap     Dream           49.5          19.0\n280    Gentoo    Biscoe           49.6          16.0\n281    Gentoo    Biscoe           49.6          15.0\n282 Chinstrap     Dream           49.6          18.2\n283 Chinstrap     Dream           49.7          18.6\n284    Gentoo    Biscoe           49.8          16.8\n285    Gentoo    Biscoe           49.8          15.9\n286 Chinstrap     Dream           49.8          17.3\n287    Gentoo    Biscoe           49.9          16.1\n288    Gentoo    Biscoe           50.0          16.3\n289    Gentoo    Biscoe           50.0          15.2\n290    Gentoo    Biscoe           50.0          15.3\n291    Gentoo    Biscoe           50.0          15.9\n292 Chinstrap     Dream           50.0          19.5\n293    Gentoo    Biscoe           50.1          15.0\n294 Chinstrap     Dream           50.1          17.9\n295    Gentoo    Biscoe           50.2          14.3\n296 Chinstrap     Dream           50.2          18.8\n297 Chinstrap     Dream           50.2          18.7\n298 Chinstrap     Dream           50.3          20.0\n299    Gentoo    Biscoe           50.4          15.3\n300    Gentoo    Biscoe           50.4          15.7\n301    Gentoo    Biscoe           50.5          15.9\n302    Gentoo    Biscoe           50.5          15.9\n303    Gentoo    Biscoe           50.5          15.2\n304 Chinstrap     Dream           50.5          19.6\n305 Chinstrap     Dream           50.5          18.4\n306 Chinstrap     Dream           50.6          19.4\n307    Gentoo    Biscoe           50.7          15.0\n308 Chinstrap     Dream           50.7          19.7\n309    Gentoo    Biscoe           50.8          17.3\n310    Gentoo    Biscoe           50.8          15.7\n311 Chinstrap     Dream           50.8          18.5\n312 Chinstrap     Dream           50.8          19.0\n313 Chinstrap     Dream           50.9          19.1\n314 Chinstrap     Dream           50.9          17.9\n315 Chinstrap     Dream           51.0          18.8\n316    Gentoo    Biscoe           51.1          16.3\n317    Gentoo    Biscoe           51.1          16.5\n318    Gentoo    Biscoe           51.3          14.2\n319 Chinstrap     Dream           51.3          19.2\n320 Chinstrap     Dream           51.3          18.2\n321 Chinstrap     Dream           51.3          19.9\n322 Chinstrap     Dream           51.4          19.0\n323    Gentoo    Biscoe           51.5          16.3\n324 Chinstrap     Dream           51.5          18.7\n325 Chinstrap     Dream           51.7          20.3\n326 Chinstrap     Dream           51.9          19.5\n327 Chinstrap     Dream           52.0          18.1\n328 Chinstrap     Dream           52.0          19.0\n329 Chinstrap     Dream           52.0          20.7\n330    Gentoo    Biscoe           52.1          17.0\n331    Gentoo    Biscoe           52.2          17.1\n332 Chinstrap     Dream           52.2          18.8\n333    Gentoo    Biscoe           52.5          15.6\n334 Chinstrap     Dream           52.7          19.8\n335 Chinstrap     Dream           52.8          20.0\n336    Gentoo    Biscoe           53.4          15.8\n337 Chinstrap     Dream           53.5          19.9\n338 Chinstrap     Dream           54.2          20.8\n339    Gentoo    Biscoe           54.3          15.7\n340    Gentoo    Biscoe           55.1          16.0\n341 Chinstrap     Dream           55.8          19.8\n342    Gentoo    Biscoe           55.9          17.0\n343 Chinstrap     Dream           58.0          17.8\n344    Gentoo    Biscoe           59.6          17.0"
  },
  {
    "objectID": "slides/week09.html#order-by-clause-3",
    "href": "slides/week09.html#order-by-clause-3",
    "title": "SQL",
    "section": "Order by clause",
    "text": "Order by clause\n\nSELECT species, island, bill_length_mm, bill_depth_mm\nFROM penguins\nORDER BY bill_length_mm, bill_depth_mm\n\n\n\n      species    island bill_length_mm bill_depth_mm\n1      Adelie Torgersen             NA            NA\n2      Gentoo    Biscoe             NA            NA\n3      Adelie     Dream           32.1          15.5\n4      Adelie     Dream           33.1          16.1\n5      Adelie Torgersen           33.5          19.0\n6      Adelie     Dream           34.0          17.1\n7      Adelie Torgersen           34.1          18.1\n8      Adelie Torgersen           34.4          18.4\n9      Adelie    Biscoe           34.5          18.1\n10     Adelie Torgersen           34.6          17.2\n11     Adelie Torgersen           34.6          21.1\n12     Adelie    Biscoe           35.0          17.9\n13     Adelie    Biscoe           35.0          17.9\n14     Adelie Torgersen           35.1          19.4\n15     Adelie Torgersen           35.2          15.9\n16     Adelie    Biscoe           35.3          18.9\n17     Adelie    Biscoe           35.5          16.2\n18     Adelie Torgersen           35.5          17.5\n19     Adelie     Dream           35.6          17.5\n20     Adelie    Biscoe           35.7          16.9\n21     Adelie Torgersen           35.7          17.0\n22     Adelie     Dream           35.7          18.0\n23     Adelie Torgersen           35.9          16.6\n24     Adelie    Biscoe           35.9          19.2\n25     Adelie     Dream           36.0          17.1\n26     Adelie     Dream           36.0          17.8\n27     Adelie     Dream           36.0          17.9\n28     Adelie     Dream           36.0          18.5\n29     Adelie Torgersen           36.2          16.1\n30     Adelie Torgersen           36.2          17.2\n31     Adelie     Dream           36.2          17.3\n32     Adelie     Dream           36.3          19.5\n33     Adelie     Dream           36.4          17.0\n34     Adelie    Biscoe           36.4          17.1\n35     Adelie    Biscoe           36.5          16.6\n36     Adelie     Dream           36.5          18.0\n37     Adelie Torgersen           36.6          17.8\n38     Adelie     Dream           36.6          18.4\n39     Adelie Torgersen           36.7          18.8\n40     Adelie Torgersen           36.7          19.3\n41     Adelie     Dream           36.8          18.5\n42     Adelie     Dream           36.9          18.6\n43     Adelie     Dream           37.0          16.5\n44     Adelie     Dream           37.0          16.9\n45     Adelie     Dream           37.2          18.1\n46     Adelie Torgersen           37.2          19.4\n47     Adelie     Dream           37.3          16.8\n48     Adelie     Dream           37.3          17.8\n49     Adelie Torgersen           37.3          20.5\n50     Adelie     Dream           37.5          18.5\n51     Adelie     Dream           37.5          18.9\n52     Adelie    Biscoe           37.6          17.0\n53     Adelie    Biscoe           37.6          19.1\n54     Adelie     Dream           37.6          19.3\n55     Adelie    Biscoe           37.7          16.0\n56     Adelie    Biscoe           37.7          18.7\n57     Adelie Torgersen           37.7          19.8\n58     Adelie Torgersen           37.8          17.1\n59     Adelie Torgersen           37.8          17.3\n60     Adelie     Dream           37.8          18.1\n61     Adelie    Biscoe           37.8          18.3\n62     Adelie    Biscoe           37.8          20.0\n63     Adelie    Biscoe           37.9          18.6\n64     Adelie    Biscoe           37.9          18.6\n65     Adelie    Biscoe           38.1          16.5\n66     Adelie    Biscoe           38.1          17.0\n67     Adelie     Dream           38.1          17.6\n68     Adelie     Dream           38.1          18.6\n69     Adelie    Biscoe           38.2          18.1\n70     Adelie    Biscoe           38.2          20.0\n71     Adelie     Dream           38.3          19.2\n72     Adelie Torgersen           38.5          17.9\n73     Adelie Torgersen           38.6          17.0\n74     Adelie    Biscoe           38.6          17.2\n75     Adelie Torgersen           38.6          21.2\n76     Adelie Torgersen           38.7          19.0\n77     Adelie    Biscoe           38.8          17.2\n78     Adelie Torgersen           38.8          17.6\n79     Adelie     Dream           38.8          20.0\n80     Adelie Torgersen           38.9          17.8\n81     Adelie     Dream           38.9          18.8\n82     Adelie Torgersen           39.0          17.1\n83     Adelie    Biscoe           39.0          17.5\n84     Adelie     Dream           39.0          18.7\n85     Adelie Torgersen           39.1          18.7\n86     Adelie     Dream           39.2          18.6\n87     Adelie Torgersen           39.2          19.6\n88     Adelie     Dream           39.2          21.1\n89     Adelie Torgersen           39.3          20.6\n90     Adelie     Dream           39.5          16.7\n91     Adelie Torgersen           39.5          17.4\n92     Adelie     Dream           39.5          17.8\n93     Adelie Torgersen           39.6          17.2\n94     Adelie    Biscoe           39.6          17.7\n95     Adelie     Dream           39.6          18.1\n96     Adelie     Dream           39.6          18.8\n97     Adelie    Biscoe           39.6          20.7\n98     Adelie    Biscoe           39.7          17.7\n99     Adelie     Dream           39.7          17.9\n100    Adelie Torgersen           39.7          18.4\n101    Adelie    Biscoe           39.7          18.9\n102    Adelie     Dream           39.8          19.1\n103    Adelie    Biscoe           40.1          18.9\n104    Adelie Torgersen           40.2          17.0\n105    Adelie     Dream           40.2          17.1\n106    Adelie     Dream           40.2          20.1\n107    Adelie Torgersen           40.3          18.0\n108    Adelie     Dream           40.3          18.5\n109    Adelie    Biscoe           40.5          17.9\n110    Adelie    Biscoe           40.5          18.9\n111    Adelie     Dream           40.6          17.2\n112    Adelie    Biscoe           40.6          18.6\n113    Adelie    Biscoe           40.6          18.8\n114    Adelie Torgersen           40.6          19.0\n115    Adelie     Dream           40.7          17.0\n116    Adelie     Dream           40.8          18.4\n117    Adelie     Dream           40.8          18.9\n118    Gentoo    Biscoe           40.9          13.7\n119 Chinstrap     Dream           40.9          16.6\n120    Adelie Torgersen           40.9          16.8\n121    Adelie     Dream           40.9          18.9\n122    Adelie    Biscoe           41.0          20.0\n123    Adelie     Dream           41.1          17.5\n124    Adelie Torgersen           41.1          17.6\n125    Adelie     Dream           41.1          18.1\n126    Adelie    Biscoe           41.1          18.2\n127    Adelie Torgersen           41.1          18.6\n128    Adelie     Dream           41.1          19.0\n129    Adelie    Biscoe           41.1          19.1\n130    Adelie     Dream           41.3          20.3\n131    Adelie    Biscoe           41.3          21.1\n132    Adelie Torgersen           41.4          18.5\n133    Adelie    Biscoe           41.4          18.6\n134    Adelie Torgersen           41.5          18.3\n135    Adelie     Dream           41.5          18.5\n136    Adelie    Biscoe           41.6          18.0\n137    Gentoo    Biscoe           41.7          14.7\n138    Adelie Torgersen           41.8          19.4\n139    Gentoo    Biscoe           42.0          13.5\n140    Adelie    Biscoe           42.0          19.5\n141    Adelie Torgersen           42.0          20.2\n142    Adelie Torgersen           42.1          19.1\n143    Adelie     Dream           42.2          18.5\n144    Adelie    Biscoe           42.2          19.5\n145    Adelie     Dream           42.3          21.2\n146 Chinstrap     Dream           42.4          17.3\n147 Chinstrap     Dream           42.5          16.7\n148 Chinstrap     Dream           42.5          17.3\n149    Adelie Torgersen           42.5          20.7\n150    Gentoo    Biscoe           42.6          13.7\n151    Gentoo    Biscoe           42.7          13.7\n152    Adelie    Biscoe           42.7          18.3\n153    Gentoo    Biscoe           42.8          14.2\n154    Adelie Torgersen           42.8          18.5\n155    Gentoo    Biscoe           42.9          13.1\n156    Adelie Torgersen           42.9          17.6\n157    Adelie Torgersen           43.1          19.2\n158    Gentoo    Biscoe           43.2          14.5\n159 Chinstrap     Dream           43.2          16.6\n160    Adelie     Dream           43.2          18.5\n161    Adelie    Biscoe           43.2          19.0\n162    Gentoo    Biscoe           43.3          13.4\n163    Gentoo    Biscoe           43.3          14.0\n164    Gentoo    Biscoe           43.4          14.4\n165    Gentoo    Biscoe           43.5          14.2\n166    Gentoo    Biscoe           43.5          15.2\n167 Chinstrap     Dream           43.5          18.1\n168    Gentoo    Biscoe           43.6          13.9\n169    Gentoo    Biscoe           43.8          13.9\n170    Gentoo    Biscoe           44.0          13.6\n171    Adelie Torgersen           44.1          18.0\n172    Adelie     Dream           44.1          19.7\n173    Gentoo    Biscoe           44.4          17.3\n174    Gentoo    Biscoe           44.5          14.3\n175    Gentoo    Biscoe           44.5          14.7\n176    Gentoo    Biscoe           44.5          15.7\n177    Gentoo    Biscoe           44.9          13.3\n178    Gentoo    Biscoe           44.9          13.8\n179    Gentoo    Biscoe           45.0          15.4\n180    Gentoo    Biscoe           45.1          14.4\n181    Gentoo    Biscoe           45.1          14.5\n182    Gentoo    Biscoe           45.1          14.5\n183    Gentoo    Biscoe           45.2          13.8\n184    Gentoo    Biscoe           45.2          14.8\n185    Gentoo    Biscoe           45.2          15.8\n186    Gentoo    Biscoe           45.2          16.4\n187 Chinstrap     Dream           45.2          16.6\n188 Chinstrap     Dream           45.2          17.8\n189    Gentoo    Biscoe           45.3          13.7\n190    Gentoo    Biscoe           45.3          13.8\n191    Gentoo    Biscoe           45.4          14.6\n192 Chinstrap     Dream           45.4          18.7\n193    Gentoo    Biscoe           45.5          13.7\n194    Gentoo    Biscoe           45.5          13.9\n195    Gentoo    Biscoe           45.5          14.5\n196    Gentoo    Biscoe           45.5          15.0\n197 Chinstrap     Dream           45.5          17.0\n198 Chinstrap     Dream           45.6          19.4\n199    Adelie    Biscoe           45.6          20.3\n200    Gentoo    Biscoe           45.7          13.9\n201 Chinstrap     Dream           45.7          17.0\n202 Chinstrap     Dream           45.7          17.3\n203    Gentoo    Biscoe           45.8          14.2\n204    Gentoo    Biscoe           45.8          14.6\n205    Adelie Torgersen           45.8          18.9\n206 Chinstrap     Dream           45.9          17.1\n207 Chinstrap     Dream           46.0          18.9\n208    Adelie Torgersen           46.0          21.5\n209    Gentoo    Biscoe           46.1          13.2\n210    Gentoo    Biscoe           46.1          15.1\n211 Chinstrap     Dream           46.1          18.2\n212    Gentoo    Biscoe           46.2          14.1\n213    Gentoo    Biscoe           46.2          14.4\n214    Gentoo    Biscoe           46.2          14.5\n215    Gentoo    Biscoe           46.2          14.9\n216 Chinstrap     Dream           46.2          17.5\n217    Gentoo    Biscoe           46.3          15.8\n218    Gentoo    Biscoe           46.4          15.0\n219    Gentoo    Biscoe           46.4          15.6\n220 Chinstrap     Dream           46.4          17.8\n221 Chinstrap     Dream           46.4          18.6\n222    Gentoo    Biscoe           46.5          13.5\n223    Gentoo    Biscoe           46.5          14.4\n224    Gentoo    Biscoe           46.5          14.5\n225    Gentoo    Biscoe           46.5          14.8\n226 Chinstrap     Dream           46.5          17.9\n227    Gentoo    Biscoe           46.6          14.2\n228 Chinstrap     Dream           46.6          17.8\n229    Gentoo    Biscoe           46.7          15.3\n230 Chinstrap     Dream           46.7          17.9\n231    Gentoo    Biscoe           46.8          14.3\n232    Gentoo    Biscoe           46.8          15.4\n233    Gentoo    Biscoe           46.8          16.1\n234 Chinstrap     Dream           46.8          16.5\n235    Gentoo    Biscoe           46.9          14.6\n236 Chinstrap     Dream           46.9          16.6\n237 Chinstrap     Dream           47.0          17.3\n238    Gentoo    Biscoe           47.2          13.7\n239    Gentoo    Biscoe           47.2          15.5\n240    Gentoo    Biscoe           47.3          13.8\n241    Gentoo    Biscoe           47.3          15.3\n242    Gentoo    Biscoe           47.4          14.6\n243    Gentoo    Biscoe           47.5          14.0\n244    Gentoo    Biscoe           47.5          14.2\n245    Gentoo    Biscoe           47.5          15.0\n246 Chinstrap     Dream           47.5          16.8\n247    Gentoo    Biscoe           47.6          14.5\n248 Chinstrap     Dream           47.6          18.3\n249    Gentoo    Biscoe           47.7          15.0\n250    Gentoo    Biscoe           47.8          15.0\n251    Gentoo    Biscoe           48.1          15.1\n252 Chinstrap     Dream           48.1          16.4\n253    Gentoo    Biscoe           48.2          14.3\n254    Gentoo    Biscoe           48.2          15.6\n255    Gentoo    Biscoe           48.4          14.4\n256    Gentoo    Biscoe           48.4          14.6\n257    Gentoo    Biscoe           48.4          16.3\n258    Gentoo    Biscoe           48.5          14.1\n259    Gentoo    Biscoe           48.5          15.0\n260 Chinstrap     Dream           48.5          17.5\n261    Gentoo    Biscoe           48.6          16.0\n262    Gentoo    Biscoe           48.7          14.1\n263    Gentoo    Biscoe           48.7          15.1\n264    Gentoo    Biscoe           48.7          15.7\n265    Gentoo    Biscoe           48.8          16.2\n266    Gentoo    Biscoe           49.0          16.1\n267 Chinstrap     Dream           49.0          19.5\n268 Chinstrap     Dream           49.0          19.6\n269    Gentoo    Biscoe           49.1          14.5\n270    Gentoo    Biscoe           49.1          14.8\n271    Gentoo    Biscoe           49.1          15.0\n272    Gentoo    Biscoe           49.2          15.2\n273 Chinstrap     Dream           49.2          18.2\n274    Gentoo    Biscoe           49.3          15.7\n275 Chinstrap     Dream           49.3          19.9\n276    Gentoo    Biscoe           49.4          15.8\n277    Gentoo    Biscoe           49.5          16.1\n278    Gentoo    Biscoe           49.5          16.2\n279 Chinstrap     Dream           49.5          19.0\n280    Gentoo    Biscoe           49.6          15.0\n281    Gentoo    Biscoe           49.6          16.0\n282 Chinstrap     Dream           49.6          18.2\n283 Chinstrap     Dream           49.7          18.6\n284    Gentoo    Biscoe           49.8          15.9\n285    Gentoo    Biscoe           49.8          16.8\n286 Chinstrap     Dream           49.8          17.3\n287    Gentoo    Biscoe           49.9          16.1\n288    Gentoo    Biscoe           50.0          15.2\n289    Gentoo    Biscoe           50.0          15.3\n290    Gentoo    Biscoe           50.0          15.9\n291    Gentoo    Biscoe           50.0          16.3\n292 Chinstrap     Dream           50.0          19.5\n293    Gentoo    Biscoe           50.1          15.0\n294 Chinstrap     Dream           50.1          17.9\n295    Gentoo    Biscoe           50.2          14.3\n296 Chinstrap     Dream           50.2          18.7\n297 Chinstrap     Dream           50.2          18.8\n298 Chinstrap     Dream           50.3          20.0\n299    Gentoo    Biscoe           50.4          15.3\n300    Gentoo    Biscoe           50.4          15.7\n301    Gentoo    Biscoe           50.5          15.2\n302    Gentoo    Biscoe           50.5          15.9\n303    Gentoo    Biscoe           50.5          15.9\n304 Chinstrap     Dream           50.5          18.4\n305 Chinstrap     Dream           50.5          19.6\n306 Chinstrap     Dream           50.6          19.4\n307    Gentoo    Biscoe           50.7          15.0\n308 Chinstrap     Dream           50.7          19.7\n309    Gentoo    Biscoe           50.8          15.7\n310    Gentoo    Biscoe           50.8          17.3\n311 Chinstrap     Dream           50.8          18.5\n312 Chinstrap     Dream           50.8          19.0\n313 Chinstrap     Dream           50.9          17.9\n314 Chinstrap     Dream           50.9          19.1\n315 Chinstrap     Dream           51.0          18.8\n316    Gentoo    Biscoe           51.1          16.3\n317    Gentoo    Biscoe           51.1          16.5\n318    Gentoo    Biscoe           51.3          14.2\n319 Chinstrap     Dream           51.3          18.2\n320 Chinstrap     Dream           51.3          19.2\n321 Chinstrap     Dream           51.3          19.9\n322 Chinstrap     Dream           51.4          19.0\n323    Gentoo    Biscoe           51.5          16.3\n324 Chinstrap     Dream           51.5          18.7\n325 Chinstrap     Dream           51.7          20.3\n326 Chinstrap     Dream           51.9          19.5\n327 Chinstrap     Dream           52.0          18.1\n328 Chinstrap     Dream           52.0          19.0\n329 Chinstrap     Dream           52.0          20.7\n330    Gentoo    Biscoe           52.1          17.0\n331    Gentoo    Biscoe           52.2          17.1\n332 Chinstrap     Dream           52.2          18.8\n333    Gentoo    Biscoe           52.5          15.6\n334 Chinstrap     Dream           52.7          19.8\n335 Chinstrap     Dream           52.8          20.0\n336    Gentoo    Biscoe           53.4          15.8\n337 Chinstrap     Dream           53.5          19.9\n338 Chinstrap     Dream           54.2          20.8\n339    Gentoo    Biscoe           54.3          15.7\n340    Gentoo    Biscoe           55.1          16.0\n341 Chinstrap     Dream           55.8          19.8\n342    Gentoo    Biscoe           55.9          17.0\n343 Chinstrap     Dream           58.0          17.8\n344    Gentoo    Biscoe           59.6          17.0"
  },
  {
    "objectID": "slides/week09.html#group-by-clause",
    "href": "slides/week09.html#group-by-clause",
    "title": "SQL",
    "section": "group by clause",
    "text": "group by clause\n\nSELECT \n  AVG(bill_length_mm) AS avg_bill_length, \n  AVG(bill_depth_mm) AS avg_bill_depth\nFROM penguins\n\n\n\n  avg_bill_length avg_bill_depth\n1        43.92193       17.15117"
  },
  {
    "objectID": "slides/week09.html#group-by-clause-1",
    "href": "slides/week09.html#group-by-clause-1",
    "title": "SQL",
    "section": "group by clause",
    "text": "group by clause\n\nSELECT island,\n  AVG(bill_length_mm) AS avg_bill_length, \n  AVG(bill_depth_mm) AS avg_bill_depth\nFROM penguins\nGROUP BY island\n\n\n\n     island avg_bill_length avg_bill_depth\n1    Biscoe        45.25749       15.87485\n2     Dream        44.16774       18.34435\n3 Torgersen        38.95098       18.42941"
  },
  {
    "objectID": "slides/week09.html#group-by-clause-2",
    "href": "slides/week09.html#group-by-clause-2",
    "title": "SQL",
    "section": "group by clause",
    "text": "group by clause\n\nSELECT island, species,\n  AVG(bill_length_mm) AS avg_bill_length, \n  AVG(bill_depth_mm) AS avg_bill_depth\nFROM penguins\nGROUP BY island, species\n\n\n\n     island   species avg_bill_length avg_bill_depth\n1    Biscoe    Adelie        38.97500       18.37045\n2    Biscoe    Gentoo        47.50488       14.98211\n3     Dream    Adelie        38.50179       18.25179\n4     Dream Chinstrap        48.83382       18.42059\n5 Torgersen    Adelie        38.95098       18.42941"
  },
  {
    "objectID": "slides/week09.html#group-by-clause---count",
    "href": "slides/week09.html#group-by-clause---count",
    "title": "SQL",
    "section": "group by clause - count",
    "text": "group by clause - count\n\nSELECT island, species,\n  COUNT(*) AS count\nFROM penguins\nGROUP BY island, species\n\n\n\n     island   species count\n1    Biscoe    Adelie    44\n2    Biscoe    Gentoo   124\n3     Dream    Adelie    56\n4     Dream Chinstrap    68\n5 Torgersen    Adelie    52"
  },
  {
    "objectID": "slides/week09.html#group-by-clause---count-1",
    "href": "slides/week09.html#group-by-clause---count-1",
    "title": "SQL",
    "section": "group by clause - count",
    "text": "group by clause - count\n\nSELECT island, species,\n  COUNT(*) AS count\nFROM penguins\nGROUP BY island, species\nHAVING COUNT(*) &lt; 100\n\n\n\n     island   species count\n1    Biscoe    Adelie    44\n2     Dream    Adelie    56\n3     Dream Chinstrap    68\n4 Torgersen    Adelie    52"
  },
  {
    "objectID": "slides/week09.html#sql-joins-cont.-1",
    "href": "slides/week09.html#sql-joins-cont.-1",
    "title": "SQL",
    "section": "SQL Joins (cont. 1)",
    "text": "SQL Joins (cont. 1)\n\n\nmerge(x, y, all.x = FALSE, all.y = FALSE)\n\nmerge(x, y, all.x = TRUE, all.y = FALSE)"
  },
  {
    "objectID": "slides/week09.html#sql-joins-cont.-2",
    "href": "slides/week09.html#sql-joins-cont.-2",
    "title": "SQL",
    "section": "SQL Joins (cont. 2)",
    "text": "SQL Joins (cont. 2)\n\n\nmerge(x, y, all.x = FALSE, all.y = TRUE)\n\nmerge(x, y, all.x = TRUE, all.y = TRUE)"
  },
  {
    "objectID": "slides/week09.html#sql-joins-with-chs-data",
    "href": "slides/week09.html#sql-joins-with-chs-data",
    "title": "SQL",
    "section": "SQL Joins with CHS Data",
    "text": "SQL Joins with CHS Data\nWe first start by loading the datasets from https://github.com/USCBiostats/data-science-data\n\n# Download\nchs_regional   &lt;- read.csv(\"https://github.com/USCbiostats/data-science-data/raw/master/01_chs/chs_regional.csv\")\nchs_individual &lt;- read.csv(\"https://github.com/USCbiostats/data-science-data/raw/master/01_chs/chs_individual.csv\")\n\n# Dropping some regions\nchs_regional   &lt;- subset(chs_regional, !townname %in% c(\"Alpine\", \"Lompoc\"))\nchs_individual &lt;- subset(chs_individual, townname != \"Lancaster\")\n\nAnd we drop a few observations from both datasets so that they only have partially overlapping town information."
  },
  {
    "objectID": "slides/week09.html#data-intro-regional",
    "href": "slides/week09.html#data-intro-regional",
    "title": "SQL",
    "section": "Data Intro: Regional",
    "text": "Data Intro: Regional\n\nhead(chs_regional)\n\n       townname pm25_mass pm25_so4 pm25_no3 pm25_nh4 pm25_oc pm25_ec pm25_om\n2 Lake Elsinore     12.35     1.90     2.98     1.36    3.64    0.62    4.36\n3  Lake Gregory      7.66     1.07     2.07     0.91    2.46    0.40    2.96\n4     Lancaster      8.50     0.91     1.87     0.78    4.43    0.55    5.32\n6    Long Beach     19.12     3.23     6.22     2.57    5.21    1.36    6.25\n7     Mira Loma     29.97     2.69    12.20     4.25   11.83    1.25   14.20\n8     Riverside     22.39     2.43     8.66     3.14    5.27    0.94    6.32\n  pm10_oc pm10_ec pm10_tc formic acetic  hcl hno3 o3_max o3106 o3_24   no2\n2    4.66    0.63    5.29   1.18   3.56 0.46 2.63  66.70 54.42 32.23 17.03\n3    3.16    0.41    3.57   0.66   2.36 0.28 2.28  84.44 67.01 57.76  7.62\n4    5.68    0.56    8.61   0.88   2.88 0.22 1.80  54.81 43.88 32.86 15.77\n6    6.68    1.39    8.07   1.57   2.94 0.73 2.67  39.44 28.22 18.22 33.11\n7   15.16    1.28   16.44   1.90   5.14 0.46 3.33  70.65 55.81 26.81 19.62\n8    6.75    0.96    7.72   1.72   3.92 0.47 3.43  77.90 62.04 31.50 19.95\n   pm10 no_24hr pm2_5_fr iacid oacid total_acids       lon      lat\n2 34.25    7.07    14.53  3.09  4.74        7.37 -117.3273 33.66808\n3 20.05      NA     9.01  2.56  3.02        5.30 -117.2752 34.24290\n4 25.04   12.68       NA  2.02  3.76        5.56 -118.1542 34.68678\n6 38.41   36.76    22.23  3.40  4.51        7.18 -118.1937 33.77005\n7 70.39   26.90    31.55  3.79  7.04       10.37 -117.5159 33.98454\n8 41.55   15.48    27.99  3.90  5.64        9.07 -117.3755 33.98060\n\ndim(chs_regional)\n\n[1] 10 27"
  },
  {
    "objectID": "slides/week09.html#data-intro-regional-cont.",
    "href": "slides/week09.html#data-intro-regional-cont.",
    "title": "SQL",
    "section": "Data Intro: Regional (cont.)",
    "text": "Data Intro: Regional (cont.)\n\nunique(chs_regional$townname)\n\n [1] \"Lake Elsinore\" \"Lake Gregory\"  \"Lancaster\"     \"Long Beach\"   \n [5] \"Mira Loma\"     \"Riverside\"     \"San Dimas\"     \"Atascadero\"   \n [9] \"Santa Maria\"   \"Upland\""
  },
  {
    "objectID": "slides/week09.html#data-intro-individual",
    "href": "slides/week09.html#data-intro-individual",
    "title": "SQL",
    "section": "Data Intro: Individual",
    "text": "Data Intro: Individual\n\nhead(chs_individual)\n\n   sid  townname male race hispanic    agepft height weight      bmi asthma\n91 176 San Dimas    0    W        0  9.954825    140     69 16.00186      0\n92 178 San Dimas    1    A        0  9.744011    138     78 18.61717      1\n93 179 San Dimas    1    M        1 10.496920    143     93 20.67227      0\n94 181 San Dimas    1    M        0 10.275154    143    119 26.45162      1\n95 183 San Dimas    0    W        1  9.804244    141     79 18.06201      1\n96 184 San Dimas    0    O        1 11.008898    144     72 15.78283      0\n   active_asthma father_asthma mother_asthma wheeze hayfever allergy\n91             0             0             1      0       NA       0\n92             1             1             0      1        1       0\n93             0             0             0      0        0       0\n94             1             0             1      1        1       1\n95             1             0             0      1        0       1\n96             0             0             0      0        0       0\n   educ_parent smoke pets gasstove      fev      fvc      mmef\n91           5     0    1        1 2130.232 2377.698 2411.0302\n92           4     1    1        0 1658.054 2075.839  869.7987\n93           3     0    1        1 2187.198 2566.509 2310.3511\n94           3     0    1        1 2206.000 2501.000 2659.0000\n95           3     0    1        1 2178.331 2598.037 2267.0012\n96           3     0    1        0 2250.000 2418.000 3300.0000\n\ndim(chs_individual)\n\n[1] 1100   23"
  },
  {
    "objectID": "slides/week09.html#data-intro-individual-cont.",
    "href": "slides/week09.html#data-intro-individual-cont.",
    "title": "SQL",
    "section": "Data Intro: Individual (cont.)",
    "text": "Data Intro: Individual (cont.)\n\nunique(chs_individual$townname)\n\n [1] \"San Dimas\"     \"Atascadero\"    \"Riverside\"     \"Mira Loma\"    \n [5] \"Alpine\"        \"Lake Elsinore\" \"Lake Gregory\"  \"Long Beach\"   \n [9] \"Santa Maria\"   \"Upland\"        \"Lompoc\""
  },
  {
    "objectID": "slides/week09.html#set-up-sql-database",
    "href": "slides/week09.html#set-up-sql-database",
    "title": "SQL",
    "section": "Set up SQL database",
    "text": "Set up SQL database\n\n# Set up the dataset\ncon &lt;- dbConnect(SQLite(), \":memory:\")\ndbWriteTable(con, \"regional\", chs_regional)\ndbWriteTable(con, \"individual\", chs_individual)\n\nWe now can illustrate the joins."
  },
  {
    "objectID": "slides/week09.html#sql-inner-join",
    "href": "slides/week09.html#sql-inner-join",
    "title": "SQL",
    "section": "SQL INNER join",
    "text": "SQL INNER join\n\n\nchs_individual has 1100 rows\nchs_regional has 10 rows\n\n\nans &lt;- dbGetQuery(con,\n  \"SELECT *\n  FROM regional AS a INNER JOIN individual AS b \n  ON a.townname = b.townname\n  \")\nnrow(ans)\n\n[1] 900"
  },
  {
    "objectID": "slides/week09.html#sql-left-join",
    "href": "slides/week09.html#sql-left-join",
    "title": "SQL",
    "section": "SQL LEFT join",
    "text": "SQL LEFT join\n\n\nchs_individual has 1100 rows\nchs_regional has 10 rows\n\n\nans &lt;- dbGetQuery(con,\n  \"SELECT *\n  FROM regional AS a LEFT JOIN individual AS b \n  ON a.townname = b.townname\")\nnrow(ans)\n\n[1] 901"
  },
  {
    "objectID": "slides/week09.html#sql-right-join",
    "href": "slides/week09.html#sql-right-join",
    "title": "SQL",
    "section": "SQL RIGHT join",
    "text": "SQL RIGHT join\n\n\nchs_individual has 1100 rows\nchs_regional has 10 rows\n\n\nans &lt;- dbGetQuery(con,\n  \"SELECT * /* RIGHT joins are not supported by SQLite*/\n  FROM individual AS a LEFT JOIN regional AS b \n  ON a.townname = b.townname\")\nnrow(ans)\n\n[1] 1100"
  },
  {
    "objectID": "slides/week09.html#sql-full-join",
    "href": "slides/week09.html#sql-full-join",
    "title": "SQL",
    "section": "SQL FULL join",
    "text": "SQL FULL join\n\n\nchs_individual has 1100 rows\nchs_regional has 10 rows\n\n\nans &lt;- dbGetQuery(con,\n  \"SELECT *\n  FROM individual AS a FULL JOIN regional AS b \n  ON a.townname = b.townname\")\nnrow(ans)\n\n[1] 1101"
  },
  {
    "objectID": "slides/week09.html#disconnect-database",
    "href": "slides/week09.html#disconnect-database",
    "title": "SQL",
    "section": "Disconnect database",
    "text": "Disconnect database\n\ndbDisconnect(con)"
  },
  {
    "objectID": "slides/week09.html#what-happens-when-there-are-no-records-matching",
    "href": "slides/week09.html#what-happens-when-there-are-no-records-matching",
    "title": "SQL",
    "section": "What happens when there are no records matching",
    "text": "What happens when there are no records matching\nStep 1: Let’s break things\n\nchs_individual2 &lt;- subset(\n  chs_individual, !(townname %in% chs_regional$townname)\n)\n\nunique(chs_individual2$townname)\n\n[1] \"Alpine\" \"Lompoc\"\n\nchs_regional$townname\n\n [1] \"Lake Elsinore\" \"Lake Gregory\"  \"Lancaster\"     \"Long Beach\"   \n [5] \"Mira Loma\"     \"Riverside\"     \"San Dimas\"     \"Atascadero\"   \n [9] \"Santa Maria\"   \"Upland\""
  },
  {
    "objectID": "slides/week09.html#joins-with-duplicates",
    "href": "slides/week09.html#joins-with-duplicates",
    "title": "SQL",
    "section": "Joins with duplicates",
    "text": "Joins with duplicates\n\nans &lt;- dbGetQuery(con,\n  \"SELECT *\n  FROM regional_dpl AS a FULL JOIN regional_dpl AS b \n  ON a.townname = b.townname\")\nnrow(ans)\n\n[1] 40\n\n\n\nans &lt;- dbGetQuery(con,\n  \"SELECT * FROM regional_dpl AS a INNER JOIN regional_dpl AS b \n    ON a.townname = b.townname\n  \")\nnrow(ans)\n\n[1] 40"
  },
  {
    "objectID": "slides/week09.html#distinct-entries",
    "href": "slides/week09.html#distinct-entries",
    "title": "SQL",
    "section": "Distinct entries",
    "text": "Distinct entries\n\nans &lt;- dbGetQuery(con,\n  \"SELECT DISTINCT * FROM regional_dpl AS a INNER JOIN regional_dpl AS b \n    ON a.townname = b.townname\n  \")\nnrow(ans)\n\n[1] 10\n\ndbDisconnect(con)"
  },
  {
    "objectID": "assignments/hw4.html",
    "href": "assignments/hw4.html",
    "title": "Assignment 4 - HPC and SQL",
    "section": "",
    "text": "This assignment is due by 11:59pm Pacific Time on Friday, November 21st, 2025.\nThe learning objectives are to write faster code for computational task requiring a loop and to implement some queries and basic data wrangling in SQL."
  },
  {
    "objectID": "assignments/hw4.html#due-date",
    "href": "assignments/hw4.html#due-date",
    "title": "Assignment 4 - HPC and SQL",
    "section": "",
    "text": "This assignment is due by 11:59pm Pacific Time on Friday, November 21st, 2025.\nThe learning objectives are to write faster code for computational task requiring a loop and to implement some queries and basic data wrangling in SQL."
  },
  {
    "objectID": "assignments/hw4.html#hpc",
    "href": "assignments/hw4.html#hpc",
    "title": "Assignment 4 - HPC and SQL",
    "section": "HPC",
    "text": "HPC\n\nMake things run faster\nRewrite the following R functions to make them faster. It is OK (and recommended) to take a look at StackOverflow and Google.\n\n# Total for each row\nfun1 &lt;- function(mat) {\n  n &lt;- nrow(mat)\n  ans &lt;- double(n) \n  for (i in 1:n) {\n    ans[i] &lt;- sum(mat[i, ])\n  }\n  ans\n}\n\nfun1alt &lt;- function(mat) {\n  # YOUR CODE HERE\n}\n\n# running cumulative sum by row\nfun2 &lt;- function(mat) {\n  n &lt;- nrow(mat)\n  k &lt;- ncol(mat)\n  ans &lt;- mat\n  for (i in 1:n) {\n    for (j in 2:k) {\n      ans[i,j] &lt;- mat[i, j] + ans[i, j - 1]\n    }\n  }\n  ans\n}\n\nfun2alt &lt;- function(mat) {\n  # YOUR CODE HERE\n}\n\n\n\nQuestion 1 (30 points)\nUsing the dataset generated below (dat), check that both of your new functions produce the same outputs as the corresponding original functions.\n\n# Use the data with this code\nset.seed(2315)\ndat &lt;- matrix(rnorm(200 * 100), nrow = 200)\n\nThen use microbenchmark (as in the code below) to check that your version is actually faster. How much faster is it?\n\n# Test for the first\nmicrobenchmark::microbenchmark(\n  fun1(dat),\n  fun1alt(dat), unit = \"relative\"\n)\n\n# Test for the second\nmicrobenchmark::microbenchmark(\n  fun2(dat),\n  fun2alt(dat), unit = \"relative\"\n)\n\n\n\nMake things run faster with parallel computing\nThe following function allows us to estimate the value of \\(\\pi\\) through simulation:\n\nsim_pi &lt;- function(n = 1000, i = NULL) {\n  p &lt;- matrix(runif(n*2), ncol = 2)\n  mean(rowSums(p^2) &lt; 1) * 4\n}\n\n# Here is an example of the run\nset.seed(156)\nsim_pi(1000) # 3.132\n\nIn order to get accurate estimates, we can run this function multiple times, with the following code:\n\n# This runs the simulation a 4,000 times, each with 10,000 points\nset.seed(1231)\nsystem.time({\n  ans &lt;- unlist(lapply(1:4000, sim_pi, n = 10000))\n  print(mean(ans))\n})\n\n\n\nQuestion 2 (30 points)\nRewrite the previous code using parLapply() (or your parallelization method of choice) to parallelize it. Run the code once, using system.time(), to show that your version is faster.\n\n# YOUR CODE HERE\nsystem.time({\n  # YOUR CODE HERE\n  ans &lt;- # YOUR CODE HERE\n  print(mean(ans))\n  # YOUR CODE HERE\n})"
  },
  {
    "objectID": "assignments/hw4.html#sql",
    "href": "assignments/hw4.html#sql",
    "title": "Assignment 4 - HPC and SQL",
    "section": "SQL",
    "text": "SQL\nSetup a temporary database by running the following code chunk:\n\n# install.packages(c(\"RSQLite\", \"DBI\"))\n\nlibrary(RSQLite)\nlibrary(DBI)\n\n# Initialize a temporary in memory database\ncon &lt;- dbConnect(SQLite(), \":memory:\")\n\n# Download tables\nfilm &lt;- read.csv(\"https://raw.githubusercontent.com/ivanceras/sakila/master/csv-sakila-db/film.csv\")\nfilm_category &lt;- read.csv(\"https://raw.githubusercontent.com/ivanceras/sakila/master/csv-sakila-db/film_category.csv\")\ncategory &lt;- read.csv(\"https://raw.githubusercontent.com/ivanceras/sakila/master/csv-sakila-db/category.csv\")\n\n# Copy data.frames to database\ndbWriteTable(con, \"film\", film)\ndbWriteTable(con, \"film_category\", film_category)\ndbWriteTable(con, \"category\", category)\n\nWhen you write a new chunk, remember to replace the r with sql, connection=con. Some of these questions will require you to use an inner join. Read more about them here https://www.w3schools.com/sql/sql_join_inner.asp"
  },
  {
    "objectID": "assignments/hw4.html#question-3-10-points",
    "href": "assignments/hw4.html#question-3-10-points",
    "title": "Assignment 4 - HPC and SQL",
    "section": "Question 3 (10 points)",
    "text": "Question 3 (10 points)\nHow many many movies are available in each rating category?"
  },
  {
    "objectID": "assignments/hw4.html#question-4-10-points",
    "href": "assignments/hw4.html#question-4-10-points",
    "title": "Assignment 4 - HPC and SQL",
    "section": "Question 4 (10 points)",
    "text": "Question 4 (10 points)\nWhat is the average replacement cost and rental rate for each rating category?"
  },
  {
    "objectID": "assignments/hw4.html#question-5-10-points",
    "href": "assignments/hw4.html#question-5-10-points",
    "title": "Assignment 4 - HPC and SQL",
    "section": "Question 5 (10 points)",
    "text": "Question 5 (10 points)\nUse table film_category together with film to find how many films there are with each category ID."
  },
  {
    "objectID": "assignments/hw4.html#question-6-10-points",
    "href": "assignments/hw4.html#question-6-10-points",
    "title": "Assignment 4 - HPC and SQL",
    "section": "Question 6 (10 points)",
    "text": "Question 6 (10 points)\nIncorporate the category table into the answer to the previous question to find the name of the most popular category."
  },
  {
    "objectID": "assignments/midterm.html",
    "href": "assignments/midterm.html",
    "title": "Midterm Project",
    "section": "",
    "text": "Due Sunday, October 26th, 2024 by 11:59pm Pacific Time.\nLearning Objective: To apply the skills learned in PM 566 (through Week 6) by analyzing and interpreting a dataset of your choice.\nNarrative: As we have discussed in class, the practice of data science requires both quantitative skills and qualitative knowledge of the domain from which the data was collected. The first step in any data analysis is to have a dataset for which you have formulated an interesting question. If you do not have a dataset to work with, you may choose one from our list of suggestions. With your dataset, formulate a clear and concise question to answer and conduct data wrangling, exploratory data analysis, and data visualization to explore/answer this question.\nDeliverable: A written report generated in Quarto (HTML or PDF) with embedded tables and figures that is submitted to a project-specific GitHub repository that you create. The report should have the following sections:\n\nIntroduction - provide background on your dataset and formulated question\nData Preparation - how and where the data were acquired, how you cleaned and wrangled the data\nExploratory Analysis - dataset characteristics, variables included, distribution of key variables\nPreliminary Results - analysis of the primary research question and any subsequent follow-up questions, including summary statistics in tabular form and publication-quality figures (look at the kable() function from knitr for making nice tables)\na brief Conclusion - summary of what you found in the data\n\nIn your report, please do not include any unformatted text output (e.g. output from head(), str(), print(), etc.). You should summarize these aspects of your data within the text, figures, and/or tables.\nNote that you cannot use the same dataset on both the Midterm and Final. So if you came into this class with a dataset that you wanted to analyze, you may want to save that for later."
  },
  {
    "objectID": "assignments/hw1.html",
    "href": "assignments/hw1.html",
    "title": "Assignment 1 - Exploratory Data Analysis",
    "section": "",
    "text": "Due Date\nThis assignment is due by 11:59pm Pacific Time on Friday, September 26th, 2025.\n\n\nLearning Goals\n\nDownload, read, and get familiar with an external dataset.\nStep through the EDA “checklist” presented in class\nPractice making exploratory plots\n\n\n\nAssignment Description\nWe will work with air pollution data from the U.S. Environmental Protection Agency (EPA). The EPA has a national monitoring network of air pollution sites that measure particulate matter (PM) concentrations. A primer on particulate matter air pollution can be found here.\nThe primary question you will answer is whether daily concentrations of PM\\(_{2.5}\\) (particulate matter air pollution with aerodynamic diameter less than 2.5 \\(\\mu\\)m) decreased in California over the 20 years spanning from 2002 to 2022.\nYour assignment should be completed in Quarto and all code should be included.\n\n\nSteps\n\n(30 points) Given the formulated question from the assignment description, you will now conduct EDA Checklist items 1-5. First, download 2002 and 2022 data for all sites in California from the EPA Air Quality Data website, then read the data into R. For each of the two datasets, check the dimensions, headers, footers, variable names and variable types. Check the distribution of the key variable we are analyzing (PM\\(_{2.5}\\)). Write up a summary of all of your findings.\n(10 points) Combine the two years of data into one data frame. Use the Date variable to create a new column for year, which will serve as an identifier. Change the names of the key variables so that they are easier to refer to in your code.\n(20 points) Create a basic map (or maps) in either leaflet or ggplot showing the locations of the monitoring sites, using different colors for each year. Summarize the spatial distribution of the sites. Does this distribution change from 2002 to 2022?\n(10 points) Check for any data issues such as missing or implausible values of PM\\(_{2.5}\\) in the combined dataset. Calculate the proportion of missing/implausible values for each year and report any temporal patterns you see in these observations.\n(30 points) Explore the main question of interest at three different levels of spatial resolution. Create data visualizations (e.g. boxplots, histograms, line plots, violin plots) and summary statistics that best suit each level of the analysis. Be sure to write up explanations of what you observe at each level.\n\n\nLevel 1: State. Examine the primary question for the entire state.\nLevel 2: County. Examine the primary question for every county in California.\nLevel 3: City. Restrict the data to sites in Los Angeles county and examine the primary question for every site.\n\nReminder: after you upload your final rendered document to GitHub, you should download it to make sure that it looks right! If you haven’t included embed-resources: true in the YAML header, none of your figures will show up!\nAnother reminder: GitHub is not (generally) intended for sharing data, so if you upload the dataset to your GitHub repo, you will lose 5 points. You can avoid this problem by storing the data somewhere else on your local machine (outside of your repo), or by adding the data file to your .gitignore file.\n\nThis homework has been adapted from the case study in Roger Peng’s Exploratory Data Analysis with R"
  },
  {
    "objectID": "labs/lab9.html",
    "href": "labs/lab9.html",
    "title": "Lab 9 - HPC",
    "section": "",
    "text": "In this lab, you are expected to learn/put in practice the following skills:\n\nEvaluate whether a problem can be parallelized or not.\nPractice with the parallel package."
  },
  {
    "objectID": "labs/lab9.html#question-1",
    "href": "labs/lab9.html#question-1",
    "title": "Lab 9 - HPC",
    "section": "Question 1",
    "text": "Question 1\nThis function generates an n\\(\\times\\)k dataset with all its entries drawn from a Poission distribution with mean lambda.\n\nfun1 &lt;- function(n = 100, k = 4, lambda = 4) {\n  x &lt;- NULL\n  for (i in 1:n){\n    x &lt;- rbind(x, rpois(k, lambda))    \n  }\n  return(x)\n}\n\nfun1alt &lt;- function(n = 100, k = 4, lambda = 4) {\n  # YOUR CODE HERE\n}\n\nShow that fun1alt generates a matrix with the same dimensions as fun1 and that the values inside the two matrices follow similar distributions. Then check the speed of the two functions with the following code:\n\n# Benchmarking\nmicrobenchmark::microbenchmark(\n  fun1(),\n  fun1alt()\n)"
  },
  {
    "objectID": "labs/lab9.html#question-2",
    "href": "labs/lab9.html#question-2",
    "title": "Lab 9 - HPC",
    "section": "Question 2",
    "text": "Question 2\nThis function, fun2, finds the maximum value of each column of a matrix. Same as above, write a faster version of this function, called fun2alt.\n\n# make a synthetic dataset for testing (10 x 1,000 matrix)\nset.seed(1234)\nx &lt;- matrix(rnorm(1e4), nrow=10)\n\n# Find each column's max value\nfun2 &lt;- function(x) {\n  apply(x, 2, max)\n}\n\nfun2alt &lt;- function(x) {\n  # YOUR CODE HERE\n}\n\nShow that both functions return the same output for a given input matrix, x. Then check the speed of the two functions, as you did in Q1."
  },
  {
    "objectID": "labs/lab9.html#question-3",
    "href": "labs/lab9.html#question-3",
    "title": "Lab 9 - HPC",
    "section": "Question 3",
    "text": "Question 3\nThis function implements a serial version of the bootstrap. Edit this function to parallelize the lapply loop, using whichever method you prefer. Rather than specifying the number of cores to use, use the number given by the ncpus argument, so that we can test it with different numbers of cores later.\n\nmy_boot &lt;- function(dat, stat, R, ncpus = 1L) {\n  \n  # Getting the random indices\n  n &lt;- nrow(dat)\n  idx &lt;- matrix(sample.int(n, n*R, TRUE), nrow=n, ncol=R)\n  \n  # THIS FUNCTION NEEDS TO BE PARALELLIZED\n  # EDIT THIS CODE:\n  ans &lt;- lapply(seq_len(R), function(i) {\n    stat(dat[idx[,i], , drop=FALSE])\n  })\n  \n  # Converting the list into a matrix\n  ans &lt;- do.call(rbind, ans)\n\n  return(ans)\n}"
  },
  {
    "objectID": "labs/lab9.html#question-4",
    "href": "labs/lab9.html#question-4",
    "title": "Lab 9 - HPC",
    "section": "Question 4",
    "text": "Question 4\nOnce you have a version of the my_boot() function that runs on multiple cores, check that it provides accurate results by comparing it to a parametric model:\n\n# Bootstrap of an OLS\nmy_stat &lt;- function(d) coef(lm(y ~ x, data=d))\n\n# simulate data\nset.seed(1)\nn &lt;- 500; R &lt;- 1e4\n\nx &lt;- cbind(rnorm(n)); y &lt;- x*5 + rnorm(n)\n\n# checking if we get something similar to lm()\nans0 &lt;- confint(lm(y~x))\nans1 &lt;- my_boot(dat = data.frame(x, y), my_stat, R = R, ncpus = 2L)\n\n# you should get something like this\nt(apply(ans1, 2, quantile, c(.025,.975)))\n##                   2.5%      97.5%\n## (Intercept) -0.1372435 0.05074397\n## x            4.8680977 5.04539763\nans0\n##                  2.5 %     97.5 %\n## (Intercept) -0.1379033 0.04797344\n## x            4.8650100 5.04883353"
  },
  {
    "objectID": "labs/lab9.html#question-5",
    "href": "labs/lab9.html#question-5",
    "title": "Lab 9 - HPC",
    "section": "Question 5",
    "text": "Question 5\nCheck whether your version actually goes faster when it’s run on multiple cores (since this might take a little while to run, we’ll use system.time and just run each version once, rather than microbenchmark, which would run each version 100 times, by default):\n\nsystem.time(my_boot(dat = data.frame(x, y), my_stat, R = 4000, ncpus = 1L))\nsystem.time(my_boot(dat = data.frame(x, y), my_stat, R = 4000, ncpus = 2L))"
  },
  {
    "objectID": "labs/lab5.html",
    "href": "labs/lab5.html",
    "title": "Lab 5 - Data Wrangling",
    "section": "",
    "text": "Use the merge() function to join two datasets.\nDeal with missingness and impute data.\nIdentify relevant observations using quantile()."
  },
  {
    "objectID": "labs/lab5.html#setup",
    "href": "labs/lab5.html#setup",
    "title": "Lab 5 - Data Wrangling",
    "section": "Setup",
    "text": "Setup\n\nLoad the data.table (and the dtplyr and dplyr packages if you plan to work with those).\nLoad the met data from https://raw.githubusercontent.com/USCbiostats/data-science-data/master/02_met/met_all.gz, and also the station data. For the latter, you can use the code we used during lecture to pre-process the stations data:\n\n\n# Download the data\nstations &lt;- read.csv(\"https://noaa-isd-pds.s3.amazonaws.com/isd-history.csv\")\nstations$USAF &lt;- as.integer(stations$USAF)\n\n# Dealing with blanks and 999999\nstations$USAF[stations$USAF == 999999] &lt;- NA\nstations$CTRY[stations$CTRY == \"\"] &lt;- NA\nstations$STATE[stations$STATE == \"\"] &lt;- NA\n\n# Selecting the three relevant columns, and keeping unique records\nstations &lt;- unique(stations[, c('USAF', 'CTRY', 'STATE')])\n\n# Dropping NAs\nstations &lt;- stations[!is.na(stations$USAF), ]\n\n# Removing duplicates\nstations &lt;- stations[!duplicated(stations$USAF), ]\n\n\nMerge the data as we did during the lecture."
  },
  {
    "objectID": "labs/lab5.html#question-1-representative-station-for-the-us",
    "href": "labs/lab5.html#question-1-representative-station-for-the-us",
    "title": "Lab 5 - Data Wrangling",
    "section": "Question 1: Representative station for the US",
    "text": "Question 1: Representative station for the US\nWhat is the median station in terms of temperature, wind speed, and atmospheric pressure? Look for the three weather stations that best represent continental US using the quantile() function. Do these three coincide?"
  },
  {
    "objectID": "labs/lab5.html#question-2-representative-station-per-state",
    "href": "labs/lab5.html#question-2-representative-station-per-state",
    "title": "Lab 5 - Data Wrangling",
    "section": "Question 2: Representative station per state",
    "text": "Question 2: Representative station per state\nAs in the previous question, calculate the median latitude and longitude for stations in each state."
  },
  {
    "objectID": "labs/lab5.html#question-3-in-the-middle",
    "href": "labs/lab5.html#question-3-in-the-middle",
    "title": "Lab 5 - Data Wrangling",
    "section": "Question 3: In the middle?",
    "text": "Question 3: In the middle?\nFor each state, identify the station that is closest to the mean latitude and longitude for stations in that state. Combining these with the coordinates you identified in the previous question, use leaflet() to visualize all ~100 points in the same figure, applying different colors for those identified in this question."
  },
  {
    "objectID": "labs/lab5.html#question-4-means-of-means",
    "href": "labs/lab5.html#question-4-means-of-means",
    "title": "Lab 5 - Data Wrangling",
    "section": "Question 4: Means of means",
    "text": "Question 4: Means of means\nCompute each state’s average temperature and use that to classify them according to the following criteria:\n\nlow: temp &lt; 20\nMid: temp &gt;= 20 and temp &lt; 25\nHigh: temp &gt;= 25\n\nNow generate a large summary table with states/observations split into the three categories listed above. For each group, compute the following:\n\nNumber of states\nNumber of entries (records)\nNumber of NA entries\nNumber of stations\nMean temperature\nMean wind-speed\nMean atmospheric pressure"
  },
  {
    "objectID": "labs/lab6.html",
    "href": "labs/lab6.html",
    "title": "Lab 6 - Text Mining",
    "section": "",
    "text": "knitr::opts_chunk$set(eval = FALSE, include  = TRUE)"
  },
  {
    "objectID": "labs/lab6.html#question-1-what-specialties-do-we-have",
    "href": "labs/lab6.html#question-1-what-specialties-do-we-have",
    "title": "Lab 6 - Text Mining",
    "section": "Question 1: What specialties do we have?",
    "text": "Question 1: What specialties do we have?\nUse the count() function from dplyr to figure out how many different categories we have in the data. Are these categories related? Overlapping? Evenly distributed?\n\nmt_samples %&gt;%\n  count(___, sort = TRUE)"
  },
  {
    "objectID": "labs/lab6.html#question-2",
    "href": "labs/lab6.html#question-2",
    "title": "Lab 6 - Text Mining",
    "section": "Question 2",
    "text": "Question 2\n\nTokenize the the words in the transcription column\nCount the number of times each token appears\nVisualize the top 20 most frequent words\n\nExplain what we see from this result. Does it makes sense? What insights (if any) do we get?"
  },
  {
    "objectID": "labs/lab6.html#question-3",
    "href": "labs/lab6.html#question-3",
    "title": "Lab 6 - Text Mining",
    "section": "Question 3",
    "text": "Question 3\n\nRe-do the visualization but remove stop words before making it\nBonus points if you remove numbers as well\n\nWhat do we see know that we have removed stop words? Does it give us a better idea of what the text is about?"
  },
  {
    "objectID": "labs/lab3.html",
    "href": "labs/lab3.html",
    "title": "Lab 3 - Exploratory Data Analysis",
    "section": "",
    "text": "Learning Goals\n\nRead in and get familiar with the meteorology dataset\n\nStep through the EDA “checklist” presented in the class slides\nPractice making exploratory graphs\n\nAs you do this, think about what questions you would like to ask regarding this data. What would you ask a collaborator who was more familiar with it?\n\n\nLab Description\nWe will work with the meteorological data presented in lecture. Recall the dataset consists of weather station readings in the continental US.\nThe objective of the lab is to find the weather station with the highest elevation and look at patterns in the time series of its wind speed and temperature.\n\n\nSteps\n\n1. Read in the data\nThe data for this lab is available at https://github.com/USCbiostats/data-science-data/tree/master/02_met. There’s some additional information about the dataset, but the main file you’ll need to download is met_all.gz.\nOnce you’ve downloaded the file, you can read it into R with:\n\nmet &lt;- read.csv(\"~/Downloads/met_all.gz\")\n\n\n\n2. Check the dimensions, headers, footers\n\nHow many columns, rows are there?\n\n\ndim(met)\nhead(met)\ntail(met)\n\n\n\n3. Take a look at the variables.\n\nstr(met)\n\n\n\n4. Take a closer look at the key variables.\n\ntable(met$year)\ntable(met$day)\ntable(met$hour)\nsummary(met$temp)\nsummary(met$elev)\nsummary(met$wind.sp)\n\nIt looks like the elevation variable has observations with 9999.0, which is probably an indicator for missing. We should take a deeper look at the data dictionary to confirm. The wind speed variable is OK but there are a lot of missing data.\nAfter checking the data we should make the appropriate modifications. Replace elevations with 9999 as NA.\n\nmet$elev[met$elev==9999.0] &lt;- NA\nsummary(met$elev)\n\n\nAt what elevation is the highest weather station?\n\nWe also have the issue of the minimum temperature being -40C, so we should remove those observations.\n\nmet &lt;- met[met$temp &gt; -40, ]\nmet2 &lt;- met[order(met$temp), ]\nhead(met2)\n\nWe again notice that there is a -17.2C temperature reading that seems suspicious.\n\n\n5. Check the data against an external data source.\nWe should check the suspicious temperature value (where is it located?) and validate that the range of elevations make sense (-13 m to 4113 m).\nGoogle is your friend here.\nFix any problems that arise in your checks.\n\nmet &lt;- met[met$temp &gt; -15, ]\nmet2 &lt;- met[order(met$temp), ]\nhead(met2)\n\n\nSummarize that we removed temperatures colder than -15C. The new dataset has a minimum temp of -3C, which is reasonable.\n\n\n\n6. Calculate summary statistics\nRemember to keep the initial question in mind. We want to pick out the weather station with maximum elevation and examine its windspeed and temperature.\nSome ideas: select the weather station with maximum elevation; look at the correlation between temperature and wind speed; look at the correlation between temperature and wind speed with hour and day of the month.\n\nelev &lt;- met[met$elev == max(met$elev), ]\nsummary(elev)\n\n\ncor(elev$temp, elev$wind.sp, use=\"complete\")\ncor(elev$temp, elev$hour, use=\"complete\")\ncor(elev$wind.sp, elev$day, use=\"complete\")\ncor(elev$wind.sp, elev$hour, use=\"complete\")\ncor(elev$temp, elev$day, use=\"complete\")\n\n\n\n7. Exploratory graphs\nWe should look at the distributions of all of the key variables to make sure there are no remaining issues with the data.\n\nhist(met$elev, breaks=100)\nhist(met$temp)\nhist(met$wind.sp)\n\nOne thing we should consider for later analyses is to log transform wind speed and elevation as they are very skewed.\nLook at where the weather station with highest elevation is located.\n\nleaflet(elev) %&gt;%\n  addProviderTiles('OpenStreetMap') %&gt;% \n  addCircles(lat=~lat,lng=~lon, opacity=1, fillOpacity=1, radius=100)\n\nLook at the time series of temperature and wind speed at this location. For this we will need to create a date-time variable for the x-axis.\n\nlibrary(lubridate)\nelev$date &lt;- with(elev, ymd_h(paste(year, month, day, hour, sep= ' ')))\nsummary(elev$date)\nelev &lt;- elev[order(elev$date), ]\nhead(elev)\n\nWith the date-time variable we can plot the time series of temperature and wind speed.\n\nplot(elev$date, elev$temp, type='l')\nplot(elev$date, elev$wind.sp, type='l')\n\n\nSummarize any trends that you see in these time series plots.\n\n\n\n8. Ask questions\nBy now, you might have some specific questions about how the data was gathered and what some of the different variables and values mean. Alternatively, maybe you have an idea for how some of the variable should be related and you want to explore that relationship. In a real-world analysis, these questions could potentially be answered by a collaborator, who may have been part of the team that collected the data. What questions do you have about the data?\nIf you haven’t already, now would be a good time to look at the accompanying data dictionary for this dataset and see if it can answer any of your questions. If you have questions about the nature of the dataset and how it was gathered, this might be able to help.\nFor questions about variables in the dataset or relationships between them, try making some more exploratory plots. Do you see the patterns you would expect? There are many different types of summaries and visualization strategies that we have not discussed, but which could provide interesting perspectives on the data.\nSome other useful plotting functions include: - pairs for making all pairwise scatter plots in a dataset with &gt;2 dimensions. - heatmap and/or corrplot (from the corrplot package) for visualizing matrices in general or correlation matrices in particular. - image a low-level matrix visualization function - barplot, especially with table, for visualizing frequencies of categorical variables."
  },
  {
    "objectID": "labs/lab1.html",
    "href": "labs/lab1.html",
    "title": "Lab 1 - Hello R!",
    "section": "",
    "text": "Get acquainted with R and RStudio, which we will be using throughout the course to analyze data.\nAppreciate the value of visualization in exploring the relationship between variables.\nStart using R for building plots and calculating summary statistics.\n\nNote: This lab contains a lot of material to help you get familiar with R and RStudio, but the only materials you need to submit are your responses to the six questions at the end of the lab (in the form of an HTML or PDF file)."
  },
  {
    "objectID": "labs/lab1.html#download-r",
    "href": "labs/lab1.html#download-r",
    "title": "Lab 1 - Hello R!",
    "section": "Download R",
    "text": "Download R\n\nIf you don’t have R installed.\nGo to the CRAN and download R, make sure you get the version that matches your operating system.\n\n\nIf you have R installed\nIf you have R installed run the following code\n\nR.version\n\n               _                           \nplatform       aarch64-apple-darwin20      \narch           aarch64                     \nos             darwin20                    \nsystem         aarch64, darwin20           \nstatus                                     \nmajor          4                           \nminor          5.1                         \nyear           2025                        \nmonth          06                          \nday            13                          \nsvn rev        88306                       \nlanguage       R                           \nversion.string R version 4.5.1 (2025-06-13)\nnickname       Great Square Root           \n\n\nThis should tell you what version of R you are currently using. If your R version is lower then 4.3.0, I would strongly recommend updating. In general, it is a good idea to keep your R version up to date, unless you have a project right now that depends on a specific version of R."
  },
  {
    "objectID": "labs/lab1.html#download-rstudio",
    "href": "labs/lab1.html#download-rstudio",
    "title": "Lab 1 - Hello R!",
    "section": "Download RStudio",
    "text": "Download RStudio\nWe recommend using RStudio as your IDE if you don’t already have it installed. You can go to the RStudio website to download and install the software. Once it is installed, open RStudio and use it to complete the rest of this lab."
  },
  {
    "objectID": "labs/lab1.html#start-a-new-project",
    "href": "labs/lab1.html#start-a-new-project",
    "title": "Lab 1 - Hello R!",
    "section": "Start a new Project",
    "text": "Start a new Project\nRStudio Projects are a great way to stay organized and keep all of your work on a particular topic in one place. Project files keep track of things like the R objects you are using and which files you have open, so that you can quickly jump in and out of different work environments.\nWe’re going to start a new Project called PM566labs. If you want to keep all of your materials for this class in one place, you may want to open Finder (MacOS) or File Explorer (Windows) and create a new folder (directory) for this class.\nIn the top right of the RStudio window, you should see a drop-down menu that says “Project: (None)”. Click on this and then “New Project…”, which will open up a dialogue box. If you had already created a PM566labs directory, you could choose the “Existing Directory” option to associate this Project with that directory. Since we haven’t done that, we’ll use the “New Directory” option, then select the generic Project type, “New Project”. Give your new directory the name PM566labs and use the “Browse” button to choose where you want to save it on your computer, then click “Create Project”. Now in the top right, you should see “PM566labs” next to the R Project logo."
  },
  {
    "objectID": "labs/lab1.html#create-a-quarto-document",
    "href": "labs/lab1.html#create-a-quarto-document",
    "title": "Lab 1 - Hello R!",
    "section": "Create a Quarto document",
    "text": "Create a Quarto document\nWe will use Quarto documents a lot in this course because they are fully reproducible and allow us to seamlessly integrate code and text. We expect you to use Quarto for all homework assignments and (almost) all labs.\nIn the top left, you will see a “New File” icon (a white “plus” sign in a green circle over a blank document) that leads to a drop-down menu. Click on this and then select “Quarto document…”, which will open up a dialogue box. You can leave most of the settings on their defaults for now, just give your document a title (like “Lab 1”) and an author (yourself) and click “Create”. RStudio may ask you if you would like to install a package that is required, and if so, click “Install”.\nThis will open the default Quarto document, which already contains some example content. Read through it, then remove this content. Please do not hand in assignments that contain the default content, as I have seen it plenty of times! Set up new sections in your document titled “Question 1” through “Question 6”. This document will serve as the template for your responses to this lab. Under each section title, add an R code chunk via “Insert…”, “Executable Cell”, “R”. Alternatively, you can switch to the “Source” editor (in the top left of the Editor pane) and add an R chunk by typing the following:\n```{r}\n```\nThis will create an R code chunk and any code you add inside of it will be executed when you Render the document.\nSave your Quarto markdown (qmd) file as lab-01.qmd and see what happens when you click “Render”."
  },
  {
    "objectID": "labs/lab1.html#yaml",
    "href": "labs/lab1.html#yaml",
    "title": "Lab 1 - Hello R!",
    "section": "YAML",
    "text": "YAML\nThe top portion of your Quarto file (between the three dashed lines) is called YAML. It stands for “YAML Ain’t Markup Language”. It is a human-friendly data serialization standard for all programming languages. All you need to know is that this area is called the YAML (we will refer to it as such) and that it contains meta information about your document.\nOpen the Quarto (qmd) file in your project, make sure the author name is your name. You can add additional lines to the YAML section to control more aspects of your document. For example, you can set the output to be a PDF or HTML document by adding either format: pdf or format: html.\nRegardless of what output format you choose, add another line to the YAML header that reads embed-resources: true. This tells Quarto that you want to produce a “stand-alone” document that contains all images directly in the document. If you don’t do this, Quarto will often create a separate directory (called &lt;document&gt;_files) that contains these images and your output will depend on this outside directory.\nWhen you’re done, click “Render” to compile the document."
  },
  {
    "objectID": "labs/lab1.html#question-1",
    "href": "labs/lab1.html#question-1",
    "title": "Lab 1 - Hello R!",
    "section": "Question 1",
    "text": "Question 1\n\nBased on the help file, how many rows and how many columns does the datasaurus_dozen file have? What are the variables included in the data frame? Add your responses to your lab report, with relevant code in the associated R code chunk, and free-form text outside of the code chunk.\n\nLet’s take a look at what these datasets are. To start, we can make a frequency table of the dataset variable:\n\ntable(datasaurus_dozen$dataset)\n\nHere, we used the $ operator to access a specific column (variable) of the dataset. Then we used the table function to summarize that variable. table is great for quickly summarizing categorical variables, but it’s not very useful for summarizing continuous variables, where most unique values are only present once. For continuous variables, try the summary function.\nThe original Datasaurus (dino) was created by Alberto Cairo in this great blog post. The other Dozen were generated using simulated annealing and the process is described in the paper Same Stats, Different Graphs: Generating Datasets with Varied Appearance and Identical Statistics through Simulated Annealing by Justin Matejka and George Fitzmaurice. In the paper, the authors simulate a variety of datasets with the same summary statistics as the Datasaurus, but with very different distributions."
  },
  {
    "objectID": "labs/lab1.html#question-2",
    "href": "labs/lab1.html#question-2",
    "title": "Lab 1 - Hello R!",
    "section": "Question 2",
    "text": "Question 2\n\nPlot y vs. x for the dino dataset. Then, calculate the correlation coefficient between x and y for just this dataset.\n\nBelow is the code you will need to complete this exercise. Basically, the answer is already given, but you need to include relevant bits in your Quarto document and successfully Render it and view the results.\nWe’re going to start by subsetting our data down to just the dino dataset.\n\nSubsetting\n\ndino_data &lt;- datasaurus_dozen[datasaurus_dozen$dataset == 'dino', ]\n\nThere is a lot going on here, so let’s slow down and unpack it a bit.\nThe first thing to note is the assignment operator: &lt;-. This special symbol is used to create a new object or assign a new value to an existing one. In this case, we’re creating a new object called dino_data.\nThe second important feature is the set of square brackets: []. When these come immediately after the name of an object, they are used for subsetting that object, or taking a smaller piece of it. In this case, we want to subset the datasaurus_dozen object. Since this is a two-dimensional data.frame, we can subset it by either rows or columns, or both. The comma (,) separates our row subset from our column subset. In this case, we only want to subset by row and keep all the columns, so there is nothing after the comma.\nIn R (as in Python and many other programming languages), we can check whether or not two values are equal by using the == operator. Here, we again use the $ to access the dataset variable and we check if it is equal to the value 'dino'. If it is, this comparison will return TRUE and we will keep that row. If it isn’t, this comparison will return FALSE and we will not keep that row.\n\n\nPlotting\nNext, we need to visualize these data. We will use the plot function for this, which is R’s most basic plotting function. If you provide the plot function with two numeric vectors, it will plot them in a scatter plot. Let’s see what happens when we plot the x and y variables from our dino_data object:\n\nplot(dino_data$x, dino_data$y)\n# ggplot(data = dino_data, mapping = aes(x = x, y = y)) +\n#   geom_point()\n\n(I’ve also included code for producing similar plots using the ggplot function from the ggplot2 package. This is another widely-used plotting function that includes some more aesthetically pleasing defaults, but requires more complicated syntax)\nWe will talk a lot more about the philosophy of data visualization, how to choose the right plot type, and constructing visualizations in layers in the coming weeks. But for now, you can follow along with the code that is provided.\nFor the second part of these exercises, we need to calculate a summary statistic: the correlation coefficient. The correlation coefficient, often referred to as \\(r\\) in statistics, measures the linear association between two variables. You will see that some of the pairs of variables we plot do not have a linear relationship between them. This is exactly why we want to visualize first: visualize to assess the form of the relationship, and calculate \\(r\\) only if relevant. In this case, calculating a correlation coefficient really doesn’t make sense since the relationship between x and y is definitely not linear – it’s dinosaurial!\nBut, for illustrative purposes, let’s calculate correlation coefficient between x and y. Like plot, the cor function takes two numeric variables and calculates their correlation coefficient:\n\ncor(dino_data$x, dino_data$y)\n# dino_data |&gt;\n#   summarize(r = cor(x, y))\n\n(I’ve also included the “tidyverse” way of calculating this value. The “tidyverse” is a collection of packages that includes ggplot2 and is based on the concept of “tidy”, rectangular datasets. We will tend to focus on the “Base R” way of doing things, as learning the “tidyverse” coding style is almost like learning another language in addition to R)"
  },
  {
    "objectID": "labs/lab1.html#question-3",
    "href": "labs/lab1.html#question-3",
    "title": "Lab 1 - Hello R!",
    "section": "Question 3",
    "text": "Question 3\n\nNow try it on your own! Plot y vs. x for the star dataset, another one of the datasaurus_dozen. You can (and should) re-use code we introduced above, just replace the dataset name with the desired dataset. Then, calculate the correlation coefficient between x and y for this dataset. How does this value compare to the r of dino?"
  },
  {
    "objectID": "labs/lab1.html#question-4",
    "href": "labs/lab1.html#question-4",
    "title": "Lab 1 - Hello R!",
    "section": "Question 4",
    "text": "Question 4\n\nPlot y vs. x for the circle dataset. You can (and should) reuse code we introduced above, just replace the dataset name with the desired dataset. Then, calculate the correlation coefficient between x and y for this dataset. How does this value compare to the r of dino?"
  },
  {
    "objectID": "labs/lab1.html#question-5",
    "href": "labs/lab1.html#question-5",
    "title": "Lab 1 - Hello R!",
    "section": "Question 5",
    "text": "Question 5\nNow let’s plot all 13 datasets at once. In order to do this we will make use of the layout function. This function allows you to put multiple plots in the same plotting window. We will create a 4x4 matrix containing the values 1 through 16 and pass this to layout, which lets it know where we want each plot to go (we only have 13 datasets, so there will be a few empty spots at the end). This may be too many plots for a small viewing window, so if you get the error message Error in plot.new() : figure margins too large, try making your plotting window larger.\nThen we use a for loop to perform a set of actions over every unique value of the dataset variable. This creates a new object, called name, that takes on each of those unique values, but it only exists within the context (interior) of the loop. Then we subset and plot the data, as we have before.\n\nlayout(matrix(1:16, nrow=4, ncol=4))\nfor(name in unique(datasaurus_dozen$dataset)){\n  subset &lt;- datasaurus_dozen[datasaurus_dozen$dataset == name, ]\n  plot(subset$x, subset$y, main = name)\n}\nlayout(1)\n\n\n# ggplot(datasaurus_dozen, aes(x = x, y = y, color = dataset))+\n#   geom_point()+\n#   facet_wrap(~ dataset, ncol = 3) +\n#   theme(legend.position = \"none\")\n\nThe second call to layout will reset the plotting window, so that the next plot will take up the entire window, rather than 1/16th of it.\nOptional:If you really want to maximize the plotting area of this figure, you can also adjust the plotting margins via the par function (short for “graphical parameters”). The setting for margins is called mar and it takes a vector of length 4, specifying the bottom, left, top, and right margins, in order (the units are lines of text). You can set each margin to a value of 2 with par(mar = c(2,2,2,2)) and then reset to the default values with par(mar = c(5,4,4,2) + 0.1)."
  },
  {
    "objectID": "labs/lab1.html#question-6",
    "href": "labs/lab1.html#question-6",
    "title": "Lab 1 - Hello R!",
    "section": "Question 6",
    "text": "Question 6\nFinally, we want to calculate the correlation between the x and y variables for all 13 datasets. Like before, we will use a loop, but this time, since we want to return a specific value every time through the loop, we will use the sapply function. sapply is useful way to apply a function to every element of a vector. In this case, we provide the vector of unique dataset names (like before) and then our own custom function. This function subsets the data as before, and then returns the correlation coefficient as the output of the function.\n\nsapply(unique(datasaurus_dozen$dataset), function(name){\n    subset &lt;- datasaurus_dozen[datasaurus_dozen$dataset == name, ]\n    return(cor(subset$x, subset$y))\n})\n\n\n# datasaurus_dozen |&gt;\n#   group_by(dataset) |&gt;\n#   summarize(r = cor(x, y))\n\nYou’re now done with the data analysis exercises, but we’d like you to do two more things:\nResize your figures:\nAdd the fields fig-width and fig-height to the YAML header of your document. These will allow you to specify the size (in inches) of any figures generated by the code chunks in your report.\nYou can also use different figure sizes for different figures. If you are in the Visual editor mode, switch to Source mode. Notice that each R chunk starts and ends with three backticks. Click on the gear icon in the top right of a code chunk and select “Use custom figure size” in the pop-up menu. Set the height and width of the figures and hit Apply when done. Then, render your document and see how you like the new sizes. Try making the plot for Question 5 larger, until you are happy with its size. Note that changing the figure sizes added new options to these chunks: fig.width and fig.height. You can change them by defining different values directly in your Quarto document as well.\nChange the look of your report:\nIf you have time, you can explore the different ways you can add styling to your document. Try adding a theme field to the YAML header and see if you can find valid names of different themes.\nHere is a Quarto cheatsheet and a general markdown cheatsheet that shows some of the many cool features you can make use of in a Quarto document."
  },
  {
    "objectID": "labs/lab2.html",
    "href": "labs/lab2.html",
    "title": "Lab 2 - GitHub",
    "section": "",
    "text": "In this lab, you are expected to learn/practice the following skills:\n\nForking a repository on GitHub\nGit workflow: clone/commit/push\nUsing pull requests (PRs)"
  },
  {
    "objectID": "labs/lab2.html#step-1-fork-the-project-to-create-your-own-repo",
    "href": "labs/lab2.html#step-1-fork-the-project-to-create-your-own-repo",
    "title": "Lab 2 - GitHub",
    "section": "Step 1: Fork the project to create your own repo",
    "text": "Step 1: Fork the project to create your own repo\nNot a term/command actually available in Git, forking is a feature available in GitHub (as in other services) that allows users to create copies of other people’s projects to propose changes (i.e. make pull requests, i.e. “I have this great update for your project! Would you like to add it by pulling it into your repo?”).\nTo start, you just need to use the Fork button available on the main page of the repository you would like to contribute to2:\nOnce you “Fork” a project, GitHub will automatically:\n\nCreate a copy (using git clone) of that project in your account.\nSet up a pipeline to generate pull requests for the original repository.\n\nOnce you have a copy of the project in your account, you can proceed by “downloading it” to your computer. You can do this using either the command line (Terminal) or the GitHub Desktop app.\n\nCommand Line\nYou can download your version of the whoami repository using the git clone command. You will need to copy the URL from your version of the repository, available under the “Code” button. For example, if your github user name is statsnerd and the repository name is PM566-whoami, you could use the following in your command line\ncd where/you/want/to/download/the/thing\ngit clone https://github.com/statsnerd/PM566-whoami.git\nAnd if you have your ssh credentials set up, you can do instead\ncd where/you/want/to/download/the/thing\ngit clone git@github.com:statsnerd/PM566-whoami.git\nThis way you will get a copy of the repository in your local machine. Now, let’s see how can we update the project!\n\n\nGitHub Desktop\nAlternatively, you can open GitHub Desktop, click the Current Repository tab in the upper left, click the Add button, and select Clone Repository. If you are signed in to your GitHub account, this should open a dialog box allowing you to search your existing repositories. Find your version of the PM566-whoami repo and Clone it."
  },
  {
    "objectID": "labs/lab2.html#step-2-modifying-the-corresponding-line",
    "href": "labs/lab2.html#step-2-modifying-the-corresponding-line",
    "title": "Lab 2 - GitHub",
    "section": "Step 2: Modifying the corresponding line",
    "text": "Step 2: Modifying the corresponding line\nIf you got the correct copy, you should find a very simple repository with only two files: CODE_OF_CONDUCT.md and README.md. The first file is a general code of conduct for the project, which we do not need to edit. The second file is the one that we will be playing with. The README file, which happens to be a Markdown file, contains, or at least will contain, your and your team members’ biographies. Here is what you need to do:\n\nFind the line with your name.\nIn that single line (i.e. not spanning multiple lines), write something about yourself, e.g. “I am from XYZ, I love doing ABC, …”.\n(optional) if you feel like it, add at the end of the line a picture of yourself (or avatar) using either html or markdown. This will require you to include the figure in the images folder of the repo, unless you provide a link to a picture online.\nCommit the changes and push the changes to your repo using git commit and git push, e.g.\n\ngit commit -a -m \"[A short but meaningful message]\"\n# git add [your-avatar.png] ... if you need to add a picture\ngit push\nOr using the “Commit [n] file(s) to main” and “Push origin” buttons in GitHub Desktop.\nYou have now updated your online version of the PM566-whoami repo and are one step closer to make your first Pull Request. We will see how that happens in the next part."
  },
  {
    "objectID": "labs/lab2.html#step-3-do-the-pull-request",
    "href": "labs/lab2.html#step-3-do-the-pull-request",
    "title": "Lab 2 - GitHub",
    "section": "Step 3: Do the pull request",
    "text": "Step 3: Do the pull request\nThis is the final step. Overall, pull requests (PRs) are as complex as the proposed changes are. The PR that you are about to make should go smoothly, yet, any time that you make a new PR, the changes should be able to be merged in the original repository without conflicts. Conflicts may only appear if the proposed changes are out-dated with respect to the main repository, meaning that the main repository was modified after your fork and your proposed changes cannot be merged without generating conflicts3. For now, let’s just look at the simple case.\nTo create the PR, you just need to go to your online copy of the project and click on “Contribute” then “Open Pull Request”:\n\n\n\nYou can submit pull requests to the original repo from your copy of it via the “Contribute” button.\n\n\nThis will create a PR in the original repository. GitHub will automatically analyze the PR and check whether merging the PR to the master branch will result in a conflict or not. If all is OK, then the owner/admin of the repository can merge the PR. Otherwise, if there’s a conflict, you can go back to your local repo, make the needed changes, commit the changes, and push the changes to your copy on GitHub. In this stage, the PR will automatically update to reflect the new changes you made in your copy of the project.\nFor more information, check out Creating a pull request from a fork on GitHub."
  },
  {
    "objectID": "labs/lab2.html#submitting-your-lab",
    "href": "labs/lab2.html#submitting-your-lab",
    "title": "Lab 2 - GitHub",
    "section": "Submitting your lab",
    "text": "Submitting your lab\nOnce you have created a Pull Request and it has been accepted, you should see your text on the original repository (not just your personal forked copy). If you can see your text on the USCbiostats version, then congratulations, you’re done with Lab 2!"
  },
  {
    "objectID": "labs/lab2.html#footnotes",
    "href": "labs/lab2.html#footnotes",
    "title": "Lab 2 - GitHub",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nTeam-members could be working on the same file but editing different lines of code. If this is the case, after pull/push, git will integrate the changes without conflicts.↩︎\nFor more details, take a look at the Forking Projects article in GitHub guides.↩︎\nMore info about how to deal with conflicts in this very neat post on stackoverflow.com How to resolve merge conflicts in Git. GitHub also has a way to solve conflicts in PRs, but this is only available to the admins of target repo. More info here,↩︎"
  },
  {
    "objectID": "labs/lab7.html",
    "href": "labs/lab7.html",
    "title": "Lab 7 - Web Scraping and Regular Expressions",
    "section": "",
    "text": "Use real-time data pulled from the internet.\nUse regular expressions to parse the information.\nPractice your GitHub skills."
  },
  {
    "objectID": "labs/lab7.html#question-1-how-many-sars-cov-2-papers",
    "href": "labs/lab7.html#question-1-how-many-sars-cov-2-papers",
    "title": "Lab 7 - Web Scraping and Regular Expressions",
    "section": "Question 1: How many Sars-Cov-2 papers?",
    "text": "Question 1: How many Sars-Cov-2 papers?\nWe will build an automatic counter of Sars-Cov-2 papers available on PubMed. You will need to apply XPath as we did during the lecture to extract the number of results returned by PubMed when you search for “sars-cov-2.”\nThe following URL will perform the search: https://pubmed.ncbi.nlm.nih.gov/?term=sars-cov-2\nAnd you can find the total number of results in the top left corner of the search results.\nComplete the lines of code:\n\n# Downloading the website\nwebsite &lt;- xml2::read_html(\"[URL]\")\n\n# Finding the counts\ncounts &lt;- xml2::xml_find_first(website, \"[XPath]\")\n\n# Turning it into text\ncounts &lt;- as.character(counts)\n\n# Extracting the data using regex\ntotalcount &lt;- stringr::str_extract(counts, \"[REGEX FOR NUMBERS WITH COMMAS/DOTS]\")\n\n# Removing any commas/dots so that we can convert to numeric\ntotalcount &lt;- gsub('[REGEX FOR COMMAS/DOTS]', '', totalcount)\n\ntotalcount &lt;- as.numeric(totalcount)\nprint(totalcount)"
  },
  {
    "objectID": "labs/lab7.html#question-2-get-article-abstracts-and-authors",
    "href": "labs/lab7.html#question-2-get-article-abstracts-and-authors",
    "title": "Lab 7 - Web Scraping and Regular Expressions",
    "section": "Question 2: Get article abstracts and authors",
    "text": "Question 2: Get article abstracts and authors\nThat’s quite a few articles, so let’s narrow our focus by including “california” in our search:\nhttps://pubmed.ncbi.nlm.nih.gov/?term=sars-cov-2%20california\nIn your web browser, use the slider on the left to narrow your search down to just the years 2020 and 2021.\nNow we will download the abstracts and author information for all of these articles. Under the search bar, click “Save,” set the Selection to “All results,” set the Format to “Abstract (text),” and click “Create file.” This should start downloading a large-ish text file (abstract-sars-cov-2-set.txt)\nWe can read this into R with the following code. We need to do some formatting because the abstracts are separated by two blank lines.\n\n# read in text, each line is a separate character\nabstracts &lt;- readLines('~/Downloads/abstract-sars-cov-2-set.txt', warn = FALSE)\n# combine all text into one character\nabstracts &lt;- paste(abstracts, collapse = '\\n')\n# split the text whenever 3 new lines occur in a row (indicating two blank lines)\nabstracts &lt;- unlist(strsplit(abstracts, split = '\\n\\n\\n'))\n# replace any remaining \"\\n\" symbols with spaces\nabstracts &lt;- gsub(\"\\n\", \" \", abstracts)\n# replace multiple spaces with single space\nabstracts &lt;- gsub(\" +\", \" \", abstracts)"
  },
  {
    "objectID": "labs/lab7.html#question-3-distribution-of-universities",
    "href": "labs/lab7.html#question-3-distribution-of-universities",
    "title": "Lab 7 - Web Scraping and Regular Expressions",
    "section": "Question 3: Distribution of universities",
    "text": "Question 3: Distribution of universities\nLook through the first couple abstracts and see how the author affiliations are formatted.\nUsing the function stringr::str_extract_all() applied on abstracts, capture all the terms of the form:\n\n“… University”\n“University of …”\n“… Institute of …”\n\nWrite a regular expression that captures all such instances.\n\nlibrary(stringr)\ninstitution &lt;- str_extract_all(\n  abstracts,\n  \"[REGEX FOR INSTITUTIONS]\"\n  ) \ninstitution &lt;- unlist(institution)\ntable(institution)\n\nWhat are the 10 most common institutions? Discuss how you could you improve these results."
  },
  {
    "objectID": "labs/lab7.html#question-4-make-a-tidy-dataset",
    "href": "labs/lab7.html#question-4-make-a-tidy-dataset",
    "title": "Lab 7 - Web Scraping and Regular Expressions",
    "section": "Question 4: Make a tidy dataset",
    "text": "Question 4: Make a tidy dataset\nWe want to build a dataset which includes the journal, article title, authors, and affiliations for each paper. In order to do this, we will go back to the original input, but not do all the formatting we did previously.\n\n# read in text, each line is a separate character\nabstracts &lt;- readLines('~/Downloads/abstract-sars-cov-2-set.txt', warn = FALSE)\n# combine all text into one character\nabstracts &lt;- paste(abstracts, collapse = '\\n')\n# split the text whenever 3 new lines occur in a row (indicating two blank lines)\nabstracts &lt;- unlist(strsplit(abstracts, split = '\\n\\n\\n'))\n\nNow extract the journal title for each article. This is in the first line of each entry, immediately after the citation number (ie. “1.”). Notice that we are using str_extract rather than str_extract_all, because we only want (at most) one result per entry.\n\njournal &lt;- str_extract(abstracts, \"[YOUR REGULAR EXPRESSION]\")\n\nNow we’re going to extract the title of each article. This is the second non-empty line in each entry, with blank lines before and after. We could do this with a regular expression, but instead, we’ll use the strsplit() function, as we did above.\n\ntitles &lt;- sapply(abstracts, function(x){\n  unlist(strsplit(x, split = \"\\n\\n\"))[2]\n}, USE.NAMES = FALSE)\n\nNote that each title could still contain a single \\n symbol, in the case of a particularly long title. We could remove those as we did the first time we read in the data.\nUse the same technique to extract the list of authors and call this object authors.\nNow use a regular expression to extract the author affiliations section for each abstract. This always starts with a blank line followed by “Author information:” and ends with another blank line.\n\naffiliations &lt;- str_extract(abstracts, \"[YOUR REGULAR EXPRESSION]\")\n\nFinally, put everything together into a single data.frame and use knitr::kable to print the first five results.\n\npapers &lt;- data.frame(\n  [DATA TO COMBINE]\n)\nknitr::kable(papers[1:5, ])\n\nDone! Render the document, commit, and push."
  },
  {
    "objectID": "labs/lab4.html",
    "href": "labs/lab4.html",
    "title": "Lab 4 - Data Visualization",
    "section": "",
    "text": "Learning Goals\n\nRead in and prepare the meteorological dataset\nCreate several graphs with different geoms() in ggplot2\nCreate a facet graph\nCustomize your plots\nCreate a detailed map\n\n\n\nLab Description\nWe will again work with the meteorological data presented in lecture.\nThe objective of the lab is to examine the association between weekly average dew point and wind speed in four regions of the US and by elevation.\nPer Wikipedia: “The dew point of a given body of air is the temperature to which it must be cooled to become saturated with water vapor. This temperature depends on the pressure and water content of the air.”\nAgain, feel free to supplement your knowledge of this dataset by checking out the data dictionary.\n\n\nSteps\n\n1. Read in the data\nFirst download and then read in with read.csv()\n\nif (!file.exists(\"met_all.gz\"))\n  download.file(\n    url = \"https://raw.githubusercontent.com/USCbiostats/data-science-data/master/02_met/met_all.gz\",\n    destfile = \"met_all.gz\",\n    method   = \"libcurl\",\n    timeout  = 60\n    )\nmet &lt;- read.csv(\"met_all.gz\")\n\n\n\n2. Prepare the data\n\nRemove temperatures less than -17C\nMake sure there is no missing data in the key variables coded as 9999, 999, etc.\nGenerate a date variable using the functions as.Date() (hint: You will need the following to create a date paste(year, month, day, sep = \"-\")).\nSubset the data to keep only the observations from the first week (ie. first 7 days) of the month.\nCompute the mean by station of the variables temp, rh, wind.sp, vis.dist, dew.point, lat, lon, and elev.\nCreate a region variable for NW, SW, NE, SE based on lon = \\(-98.00\\) and lat = \\(39.71\\) degrees\nCreate a categorical variable for elevation as in the lecture slides\n\n\n\n3. Use geom_violin to examine the relative humidity and dew point by region\nYou saw how to use geom_boxplot in class. Try using geom_violin instead (take a look at the help). (hint: you will need to set the x aesthetic to 1)\n\nUse facets\nMake sure to deal with NAs\nDescribe what you observe in the graph\n\n\n\n4. Use geom_point with stat_smooth to examine the association between dew point and relative humidity by region\n\nColor points by region\nMake sure to deal with NAs\nFit a linear regression line by region\nDescribe what you observe in the graph\n\n\n\n5. Use geom_bar to create barplots of the weather stations by elevation category colored by region\n\nBars by elevation category using position=\"dodge\"\nChange colors from the default. Color by region using scale_fill_brewer see this\nCreate nice labels on the axes and add a title\nDescribe what you observe in the graph\nMake sure to deal with NA values\n\n\n\n6. Use stat_summary to examine mean dew point and wind speed by region with standard deviation error bars\n\nMake sure to remove NAs\nUse fun.data=\"mean_sdl\" in stat_summary\nAdd another layer of stats_summary but change the geom to \"errorbar\" (see the help).\nDescribe the graph and what you observe\n\n\nDew point is…\nWind speed is…\n\n\n\n7. Make a map showing the spatial trend in relative humidity in the US\n\nMake sure to remove NAs\nUse leaflet() or ggplot2\nMake a color palette with custom colors\nUse addMarkers or geom_point to include the top 10 places in relative humidity (hint: this will be useful rank(-rh) &lt;= 10)\nAdd a legend\n\n\nDescribe the trend in RH across the US\n\n\n\n8. Use a ggplot extension\n\nPick an extension (except cowplot) from here and make a plot of your choice using the met data (or met_avg)\nYou might want to try examples that come with the extension first (e.g. ggtech, gganimate, ggforce)"
  },
  {
    "objectID": "labs/lab8.html",
    "href": "labs/lab8.html",
    "title": "Lab 8 - Efficiency and Parallelization",
    "section": "",
    "text": "In this lab, you are expected to learn/put in practice the following skills:\n\nEvaluate whether a problem can be parallelized or not.\nPractice with the parallel package.\n\n\n\nThe following functions can be written to be more efficient without using parallelization. Write a faster version of each function and show that (1) the outputs are the same as the slow version, and (2) your version is faster.\n\nThis function generates an n x k dataset with all its entries drawn from a Poission distribution with mean lambda.\n\n\nfun1 &lt;- function(n = 100, k = 4, lambda = 4) {\n  x &lt;- NULL\n  \n  for (i in 1:n){\n    x &lt;- rbind(x, rpois(k, lambda))    \n  }\n  \n  return(x)\n}\n\nfun1alt &lt;- function(n = 100, k = 4, lambda = 4) {\n  # YOUR CODE HERE\n}\n\nShow that fun1alt generates a matrix with the same dimensions as fun1 and that the values inside the two matrices follow similar distributions. Then check the speed of the two functions with the following code:\n\n# Benchmarking\nmicrobenchmark::microbenchmark(\n  fun1(),\n  fun1alt()\n)\n\n\nThis function finds the maximum value of each column of a matrix.\n\n\n# Data Generating Process (10 x 10,000 matrix)\nset.seed(1234)\nx &lt;- matrix(rnorm(1e4), nrow=10)\n\n# Find each column's max value\nfun2 &lt;- function(x) {\n  apply(x, 2, max)\n}\n\nfun2alt &lt;- function(x) {\n  # YOUR CODE HERE\n}\n\nShow that both functions return the same output for a given input matrix, x. Then check the speed of the two functions, as you did above.\n\n\n\nWe will now turn our attention to the statistical concept of bootstrapping. Among its many uses, non-parametric bootstrapping allows us to obtain confidence intervals for parameter estimates without relying on parametric assumptions. Don’t worry if these concepts are unfamiliar, we only care about the computation methods in this lab, not the statistics.\nThe main assumption is that we can approximate the results of many repeated experiments by resampling observations from our original dataset, which reflects the population.\n\nThis function implements a serial version of the bootstrap. Edit this function to parallelize the lapply loop, using whichever method you prefer. Rather than specifying the number of cores to use, use the number given by the ncpus argument, so that we can test it with different numbers of cores later.\n\n\nmy_boot &lt;- function(dat, stat, R, ncpus = 1L) {\n  \n  # Getting the random indices\n  n &lt;- nrow(dat)\n  idx &lt;- matrix(sample.int(n, n*R, TRUE), nrow=n, ncol=R)\n  \n  # THIS FUNCTION NEEDS TO BE PARALELLIZED\n  # EDIT THIS CODE:\n  ans &lt;- lapply(seq_len(R), function(i) {\n    stat(dat[idx[,i], , drop=FALSE])\n  })\n  \n  # Converting the list into a matrix\n  ans &lt;- do.call(rbind, ans)\n\n  return(ans)\n}\n\n\nOnce you have a version of the my_boot() function that runs on multiple cores, check that it provides accurate results by comparing it to a parametric model:\n\n\n# Bootstrap of an OLS\nmy_stat &lt;- function(d) coef(lm(y ~ x, data=d))\n\n# DATA SIM\nset.seed(1)\nn &lt;- 500; R &lt;- 1e4\n\nx &lt;- cbind(rnorm(n)); y &lt;- x*5 + rnorm(n)\n\n# Checking if we get something similar as lm\nans0 &lt;- confint(lm(y~x))\nans1 &lt;- my_boot(dat = data.frame(x, y), my_stat, R = R, ncpus = 2L)\n\n# You should get something like this\nt(apply(ans1, 2, quantile, c(.025,.975)))\n##                   2.5%      97.5%\n## (Intercept) -0.1372435 0.05074397\n## x            4.8680977 5.04539763\nans0\n##                  2.5 %     97.5 %\n## (Intercept) -0.1379033 0.04797344\n## x            4.8650100 5.04883353\n\n\nCheck whether your version actually goes faster when it’s run on multiple cores (since this might take a little while to run, we’ll use system.time and just run each version once, rather than microbenchmark, which would run each version 100 times, by default):\n\n\nsystem.time(my_boot(dat = data.frame(x, y), my_stat, R = 4000, ncpus = 1L))\nsystem.time(my_boot(dat = data.frame(x, y), my_stat, R = 4000, ncpus = 2L))"
  },
  {
    "objectID": "labs/lab8.html#problem-1-vectorization",
    "href": "labs/lab8.html#problem-1-vectorization",
    "title": "Lab 8 - Efficiency and Parallelization",
    "section": "",
    "text": "The following functions can be written to be more efficient without using parallelization. Write a faster version of each function and show that (1) the outputs are the same as the slow version, and (2) your version is faster.\n\nThis function generates an n x k dataset with all its entries drawn from a Poission distribution with mean lambda.\n\n\nfun1 &lt;- function(n = 100, k = 4, lambda = 4) {\n  x &lt;- NULL\n  \n  for (i in 1:n){\n    x &lt;- rbind(x, rpois(k, lambda))    \n  }\n  \n  return(x)\n}\n\nfun1alt &lt;- function(n = 100, k = 4, lambda = 4) {\n  # YOUR CODE HERE\n}\n\nShow that fun1alt generates a matrix with the same dimensions as fun1 and that the values inside the two matrices follow similar distributions. Then check the speed of the two functions with the following code:\n\n# Benchmarking\nmicrobenchmark::microbenchmark(\n  fun1(),\n  fun1alt()\n)\n\n\nThis function finds the maximum value of each column of a matrix.\n\n\n# Data Generating Process (10 x 10,000 matrix)\nset.seed(1234)\nx &lt;- matrix(rnorm(1e4), nrow=10)\n\n# Find each column's max value\nfun2 &lt;- function(x) {\n  apply(x, 2, max)\n}\n\nfun2alt &lt;- function(x) {\n  # YOUR CODE HERE\n}\n\nShow that both functions return the same output for a given input matrix, x. Then check the speed of the two functions, as you did above."
  },
  {
    "objectID": "labs/lab8.html#problem-3-parallelization",
    "href": "labs/lab8.html#problem-3-parallelization",
    "title": "Lab 8 - Efficiency and Parallelization",
    "section": "",
    "text": "We will now turn our attention to the statistical concept of bootstrapping. Among its many uses, non-parametric bootstrapping allows us to obtain confidence intervals for parameter estimates without relying on parametric assumptions. Don’t worry if these concepts are unfamiliar, we only care about the computation methods in this lab, not the statistics.\nThe main assumption is that we can approximate the results of many repeated experiments by resampling observations from our original dataset, which reflects the population.\n\nThis function implements a serial version of the bootstrap. Edit this function to parallelize the lapply loop, using whichever method you prefer. Rather than specifying the number of cores to use, use the number given by the ncpus argument, so that we can test it with different numbers of cores later.\n\n\nmy_boot &lt;- function(dat, stat, R, ncpus = 1L) {\n  \n  # Getting the random indices\n  n &lt;- nrow(dat)\n  idx &lt;- matrix(sample.int(n, n*R, TRUE), nrow=n, ncol=R)\n  \n  # THIS FUNCTION NEEDS TO BE PARALELLIZED\n  # EDIT THIS CODE:\n  ans &lt;- lapply(seq_len(R), function(i) {\n    stat(dat[idx[,i], , drop=FALSE])\n  })\n  \n  # Converting the list into a matrix\n  ans &lt;- do.call(rbind, ans)\n\n  return(ans)\n}\n\n\nOnce you have a version of the my_boot() function that runs on multiple cores, check that it provides accurate results by comparing it to a parametric model:\n\n\n# Bootstrap of an OLS\nmy_stat &lt;- function(d) coef(lm(y ~ x, data=d))\n\n# DATA SIM\nset.seed(1)\nn &lt;- 500; R &lt;- 1e4\n\nx &lt;- cbind(rnorm(n)); y &lt;- x*5 + rnorm(n)\n\n# Checking if we get something similar as lm\nans0 &lt;- confint(lm(y~x))\nans1 &lt;- my_boot(dat = data.frame(x, y), my_stat, R = R, ncpus = 2L)\n\n# You should get something like this\nt(apply(ans1, 2, quantile, c(.025,.975)))\n##                   2.5%      97.5%\n## (Intercept) -0.1372435 0.05074397\n## x            4.8680977 5.04539763\nans0\n##                  2.5 %     97.5 %\n## (Intercept) -0.1379033 0.04797344\n## x            4.8650100 5.04883353\n\n\nCheck whether your version actually goes faster when it’s run on multiple cores (since this might take a little while to run, we’ll use system.time and just run each version once, rather than microbenchmark, which would run each version 100 times, by default):\n\n\nsystem.time(my_boot(dat = data.frame(x, y), my_stat, R = 4000, ncpus = 1L))\nsystem.time(my_boot(dat = data.frame(x, y), my_stat, R = 4000, ncpus = 2L))"
  },
  {
    "objectID": "assignments/hw2.html",
    "href": "assignments/hw2.html",
    "title": "Assignment 2 - Data Wrangling, EDA, and Visualization",
    "section": "",
    "text": "This assignment is due by 11:59pm Pacific Time on Friday, October 10th Wednesday, October 15th, 2025."
  },
  {
    "objectID": "assignments/hw2.html#due-date",
    "href": "assignments/hw2.html#due-date",
    "title": "Assignment 2 - Data Wrangling, EDA, and Visualization",
    "section": "",
    "text": "This assignment is due by 11:59pm Pacific Time on Friday, October 10th Wednesday, October 15th, 2025."
  },
  {
    "objectID": "assignments/hw3.html",
    "href": "assignments/hw3.html",
    "title": "Assignment 3 - Text Mining",
    "section": "",
    "text": "This assignment is due by 11:59pm Pacific Time on Friday, November 7th, 2025."
  },
  {
    "objectID": "assignments/hw3.html#due-date",
    "href": "assignments/hw3.html#due-date",
    "title": "Assignment 3 - Text Mining",
    "section": "",
    "text": "This assignment is due by 11:59pm Pacific Time on Friday, November 7th, 2025."
  },
  {
    "objectID": "assignments/hw3.html#text-mining",
    "href": "assignments/hw3.html#text-mining",
    "title": "Assignment 3 - Text Mining",
    "section": "Text Mining",
    "text": "Text Mining\nWe have a USCbiostats repository for storing data called data-science-data. Navigate to the page for dataset 03_pubmed (https://github.com/USCbiostats/data-science-data/tree/master/03_pubmed) and download the pubmed.csv dataset. This dataset contains 3,241 abstracts from articles collected via 5 PubMed searches. The search terms are listed in the second column, term and these will serve as the “documents.” Your job is to analyze these abstracts to find interesting insights.\n\n(15 points) How many abstracts are associated with each search term? Tokenize the abstracts and count the number of each token. Do you see anything interesting? What are the 5 most common tokens for each search term?\n(15 points) Does removing stop words change what tokens appear as the most frequent? What are the 5 most common tokens for each search term after removing stop words?\n(10 points) Tokenize the abstracts into bigrams. Find the 10 most common bigrams and visualize them.\n(20 points) Calculate the TF-IDF value for each word-search term combination (here you want the search term to be the “document”). What are the 5 tokens from each search term with the highest TF-IDF value? How are the results different from the answers you got in Question 1?"
  },
  {
    "objectID": "assignments/hw3.html#sentiment-analysis",
    "href": "assignments/hw3.html#sentiment-analysis",
    "title": "Assignment 3 - Text Mining",
    "section": "Sentiment Analysis",
    "text": "Sentiment Analysis\n\n(20 points) Perform a sentiment analysis using the NRC lexicon. What is the most common sentiment for each search term? What if you remove \"positive\" and \"negative\" from the list?\n(20 points) Now perform a sentiment analysis using the AFINN lexicon to get an average positivity score for each abstract (hint: you may want to create a variable that indexes, or counts, the abstracts). Create a visualization that shows these scores grouped by search term. Are any search terms noticeably different from the others?"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "PM 566",
    "section": "",
    "text": "Term: Fall 2025\nTime: Friday 9am - 12:55pm\nLocation: SSB 114\nCourse GitHub: https://github.com/USCbiostats/PM566"
  },
  {
    "objectID": "index.html#introduction-to-health-data-science",
    "href": "index.html#introduction-to-health-data-science",
    "title": "PM 566",
    "section": "",
    "text": "Term: Fall 2025\nTime: Friday 9am - 12:55pm\nLocation: SSB 114\nCourse GitHub: https://github.com/USCbiostats/PM566"
  },
  {
    "objectID": "index.html#instructor",
    "href": "index.html#instructor",
    "title": "PM 566",
    "section": "Instructor",
    "text": "Instructor\nKelly Street\n\nEmail: kelly.street@usc.edu\nOffice: Soto (SSB) 202V\nOffice Hours: Wednesday 11am - 12pm"
  },
  {
    "objectID": "index.html#teaching-assistant",
    "href": "index.html#teaching-assistant",
    "title": "PM 566",
    "section": "Teaching Assistant",
    "text": "Teaching Assistant\nXuduo Victor Wen\n\nEmail: wenv@usc.edu"
  },
  {
    "objectID": "slides/week08.html#efficiency-loops",
    "href": "slides/week08.html#efficiency-loops",
    "title": "Week 8: Efficiency and High Performance Computing",
    "section": "Efficiency: Loops",
    "text": "Efficiency: Loops\nWe’ve seen various examples of loops so far in this class.\nClassic examples that are common to most programming languages include for and while loops.\nOther types of loops are more specific to R, such as the various *apply functions (apply, sapply, lapply, etc.).\nKnowing when to use a loop and when not to is a critical concern in computational efficiency."
  },
  {
    "objectID": "slides/week08.html#example-square-roots",
    "href": "slides/week08.html#example-square-roots",
    "title": "Week 8: Efficiency and High Performance Computing",
    "section": "Example: Square Roots",
    "text": "Example: Square Roots\nLet’s say we want to take the square roots of the numbers 1 to 10,000. We could achieve this in a number of different ways.\nHere, we use a for loop:\n\nforLoopRoots &lt;- function(n){\n  roots &lt;- rep(NA, n)\n  for(i in 1:n){\n    roots[i] &lt;- sqrt(i)\n  }\n  return(roots)\n}\n\nhead(forLoopRoots(10000))\n\n[1] 1.000000 1.414214 1.732051 2.000000 2.236068 2.449490"
  },
  {
    "objectID": "slides/week08.html#example-square-roots-cont.-1",
    "href": "slides/week08.html#example-square-roots-cont.-1",
    "title": "Week 8: Efficiency and High Performance Computing",
    "section": "Example: Square Roots (cont. 1)",
    "text": "Example: Square Roots (cont. 1)\nHere, we’ll use sapply:\n\nSapplyRoots &lt;- function(n){\n  roots &lt;- sapply(1:n, sqrt)\n  return(roots)\n}\n\nhead(SapplyRoots(10000))\n\n[1] 1.000000 1.414214 1.732051 2.000000 2.236068 2.449490"
  },
  {
    "objectID": "slides/week08.html#example-square-roots-cont.-2",
    "href": "slides/week08.html#example-square-roots-cont.-2",
    "title": "Week 8: Efficiency and High Performance Computing",
    "section": "Example: Square Roots (cont. 2)",
    "text": "Example: Square Roots (cont. 2)\nHow fast are these methods? Let’s use the microbenchmark package to find out!\n\nlibrary(microbenchmark)\nmicrobenchmark(forLoopRoots(10000), SapplyRoots(10000))\n\nUnit: microseconds\n                expr     min       lq      mean   median        uq      max\n forLoopRoots(10000) 186.386  202.007  208.8872  209.264  214.9015  235.709\n  SapplyRoots(10000) 987.731 1075.553 1190.6945 1099.600 1158.5575 4815.163\n neval\n   100\n   100"
  },
  {
    "objectID": "slides/week08.html#example-square-roots-cont.-3",
    "href": "slides/week08.html#example-square-roots-cont.-3",
    "title": "Week 8: Efficiency and High Performance Computing",
    "section": "Example: Square Roots (cont. 3)",
    "text": "Example: Square Roots (cont. 3)\nBut do we really need a loop for this job? Here, we’ll use vectorization to perform all the calculations “at once.”\n\nVectorizedRoots &lt;- function(n){\n  sqrt(1:n)\n}\n\nhead(VectorizedRoots(10000))\n\n[1] 1.000000 1.414214 1.732051 2.000000 2.236068 2.449490"
  },
  {
    "objectID": "slides/week08.html#example-square-roots-cont.-4",
    "href": "slides/week08.html#example-square-roots-cont.-4",
    "title": "Week 8: Efficiency and High Performance Computing",
    "section": "Example: Square Roots (cont. 4)",
    "text": "Example: Square Roots (cont. 4)\nThat’s a lot faster!\n\nlibrary(microbenchmark)\nmicrobenchmark(forLoopRoots(10000), VectorizedRoots(10000))\n\nUnit: microseconds\n                   expr     min       lq      mean  median       uq     max\n    forLoopRoots(10000) 202.745 222.3225 229.30029 229.518 232.2445 319.964\n VectorizedRoots(10000)  11.480  14.4730  21.89031  15.375  16.0925 623.651\n neval\n   100\n   100\n\n\nAnytime that you can use vectorized computation, you should! It will (almost) always save you a lot of computation time!"
  },
  {
    "objectID": "slides/week08.html#use-pre-made-functions",
    "href": "slides/week08.html#use-pre-made-functions",
    "title": "Week 8: Efficiency and High Performance Computing",
    "section": "Use pre-made functions",
    "text": "Use pre-made functions\nLet’s say there’s a relatively simple operation you want to perform. You know how to write the code for it, but you’re pretty sure there’s also a built-in function that performs the same task. Which should you use?\nGenerally speaking, you should aim to write as little code as possible. Built-in functions (especially in the base package) are highly optimized and likely to run much faster than manual implementations."
  },
  {
    "objectID": "slides/week08.html#example-repeated-elements",
    "href": "slides/week08.html#example-repeated-elements",
    "title": "Week 8: Efficiency and High Performance Computing",
    "section": "Example: Repeated elements",
    "text": "Example: Repeated elements\nLet’s say we have a long vector and we want to find all of the repeated elements.\n\nset.seed(1)\nvec &lt;- sample(letters, 100, replace = TRUE)\nvec\n\n  [1] \"y\" \"d\" \"g\" \"a\" \"b\" \"w\" \"k\" \"n\" \"r\" \"s\" \"a\" \"u\" \"u\" \"j\" \"v\" \"n\" \"j\" \"g\"\n [19] \"i\" \"o\" \"u\" \"e\" \"i\" \"y\" \"n\" \"e\" \"e\" \"b\" \"j\" \"y\" \"l\" \"o\" \"a\" \"t\" \"c\" \"f\"\n [37] \"j\" \"j\" \"f\" \"o\" \"t\" \"t\" \"z\" \"l\" \"y\" \"w\" \"f\" \"y\" \"h\" \"l\" \"y\" \"w\" \"x\" \"f\"\n [55] \"z\" \"g\" \"s\" \"j\" \"f\" \"x\" \"n\" \"b\" \"m\" \"r\" \"v\" \"n\" \"f\" \"a\" \"s\" \"s\" \"h\" \"f\"\n [73] \"w\" \"l\" \"f\" \"h\" \"g\" \"k\" \"q\" \"d\" \"m\" \"h\" \"y\" \"p\" \"y\" \"w\" \"n\" \"t\" \"g\" \"m\"\n [91] \"v\" \"l\" \"p\" \"a\" \"m\" \"u\" \"f\" \"q\" \"i\" \"g\""
  },
  {
    "objectID": "slides/week08.html#example-repeated-elements-cont.-1",
    "href": "slides/week08.html#example-repeated-elements-cont.-1",
    "title": "Week 8: Efficiency and High Performance Computing",
    "section": "Example: Repeated elements (cont. 1)",
    "text": "Example: Repeated elements (cont. 1)\nWe can achieve this with two nested loops:\n\nmethod1 &lt;- function(x){\n  # first element cannot be a duplicate\n  out &lt;- sapply(2:length(x), function(i){\n    matches &lt;- sapply(1:(i-1), function(i2){\n      x[i2] == x[i]\n    })\n    return(any(matches))\n  })\n  out &lt;- c(FALSE, out)\n  return(out)\n}\n\nvec[1:11]\n\n [1] \"y\" \"d\" \"g\" \"a\" \"b\" \"w\" \"k\" \"n\" \"r\" \"s\" \"a\"\n\nmethod1(vec)[1:11]\n\n [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE  TRUE"
  },
  {
    "objectID": "slides/week08.html#example-repeated-elements-cont.-2",
    "href": "slides/week08.html#example-repeated-elements-cont.-2",
    "title": "Week 8: Efficiency and High Performance Computing",
    "section": "Example: Repeated elements (cont. 2)",
    "text": "Example: Repeated elements (cont. 2)\nOr slightly faster with a loop and vectorized comparison:\n\nmethod2 &lt;- function(x){\n  # first element cannot be a duplicate\n  out &lt;- sapply(2:length(x), function(i){\n    return(any(x[1:(i-1)] == x[i]))\n  })\n  out &lt;- c(FALSE, out)\n  return(out)\n}\n\nmethod2(vec)[1:11]\n\n [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE  TRUE\n\nmicrobenchmark(method1(vec), method2(vec))\n\nUnit: microseconds\n         expr      min        lq      mean    median       uq      max neval\n method1(vec) 2244.012 2393.4570 2594.4607 2449.1555 2546.346 4835.622   100\n method2(vec)   77.326   87.8425  122.7921   91.4505   95.284 1954.142   100"
  },
  {
    "objectID": "slides/week08.html#example-repeated-elements-cont.-3",
    "href": "slides/week08.html#example-repeated-elements-cont.-3",
    "title": "Week 8: Efficiency and High Performance Computing",
    "section": "Example: Repeated elements (cont. 3)",
    "text": "Example: Repeated elements (cont. 3)\nBut the real speed-up comes when we use the base function duplicated:\n\nmethod3 &lt;- function(x){\n  duplicated(x)\n}\n\nmethod3(vec)[1:11]\n\n [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE  TRUE\n\nmicrobenchmark(method2(vec), method3(vec))\n\nUnit: microseconds\n         expr    min      lq     mean  median     uq     max neval\n method2(vec) 75.686 80.6060 87.03398 85.7925 90.487 127.059   100\n method3(vec)  1.312  1.6195  5.80109  1.7220  1.927 398.684   100"
  },
  {
    "objectID": "slides/week08.html#what-is-hpc",
    "href": "slides/week08.html#what-is-hpc",
    "title": "Week 8: Efficiency and High Performance Computing",
    "section": "What is HPC?",
    "text": "What is HPC?\nHigh Performance Computing (HPC) can relate to any of the following:\n\nParallel computing, i.e. using multiple resources (could be threads, cores, nodes, etc.) simultaneously to complete a task.\nBig data working with large datasets (in/out-of-memory).\n\nWe will mostly focus on parallel computing."
  },
  {
    "objectID": "slides/week08.html#serial-computation",
    "href": "slides/week08.html#serial-computation",
    "title": "Week 8: Efficiency and High Performance Computing",
    "section": "Serial computation",
    "text": "Serial computation\n\n\n\n\nHere we are using a single core. The function is applied one element at a time, leaving the other 3 cores without usage."
  },
  {
    "objectID": "slides/week08.html#parallel-computation",
    "href": "slides/week08.html#parallel-computation",
    "title": "Week 8: Efficiency and High Performance Computing",
    "section": "Parallel computation",
    "text": "Parallel computation\n\n\n\n\nIn this more intelligent way of computation, we are taking full advantage of our computer by using all 4 cores at the same time. This will reduce computation time which, in the case of complicated/long calculations, can be an important speed gain."
  },
  {
    "objectID": "slides/week08.html#parallel-computing-hardware",
    "href": "slides/week08.html#parallel-computing-hardware",
    "title": "Week 8: Efficiency and High Performance Computing",
    "section": "Parallel computing: Hardware",
    "text": "Parallel computing: Hardware\nWhen it comes to parallel computing, there are several ways (levels) in which we can speed up our analysis. From the bottom up:\n\nThread level SIMD instructions: Most modern processors support some level of what is called vectorization, this is, applying a single (same) instruction to streams of data. For example: adding vector A and B.\nHyper-Threading Technology (HTT): Intel’s hyper-threading generates a virtual partition of a single core (processor) which, while not equivalent to having multiple physical threads, does speed things up.\nMulti-core processor: Most modern CPUs (Central Processing Unit) have two or more physical cores. A typical laptop computer has about 8 cores.\nGeneral-Purpose Computing on Graphics Processing Unit (GP-GPU): While modern CPUs have multiple cores, GPUs can hold thousands of cores. Designed for image processing, there’s an increasing use of GPUs as an alternative to CPUs for scientific computing."
  },
  {
    "objectID": "slides/week08.html#parallel-computing-hardware-cont.",
    "href": "slides/week08.html#parallel-computing-hardware-cont.",
    "title": "Week 8: Efficiency and High Performance Computing",
    "section": "Parallel computing: Hardware (cont.)",
    "text": "Parallel computing: Hardware (cont.)\n\nHigh-Performance Computing Cluster (HPC): A collection of computing nodes that are interconnected using a fast Ethernet network.\nGrid Computing: A collection of loosely interconnected machines that may or may not be in the same physical place, for example: HTCondor clusters."
  },
  {
    "objectID": "slides/week08.html#parallel-computing-cpu-components",
    "href": "slides/week08.html#parallel-computing-cpu-components",
    "title": "Week 8: Efficiency and High Performance Computing",
    "section": "Parallel computing: CPU components",
    "text": "Parallel computing: CPU components\n\n\n\n\nTaxonomy of CPUs (Downloaded from https://slurm.schedmd.com/mc_support.html)"
  },
  {
    "objectID": "slides/week08.html#parallel-computing-in-r",
    "href": "slides/week08.html#parallel-computing-in-r",
    "title": "Week 8: Efficiency and High Performance Computing",
    "section": "Parallel computing in R",
    "text": "Parallel computing in R\nWhile there are several alternatives (just take a look at the High-Performance Computing Task View), we’ll focus on the following R-packages for explicit parallelism\nSome examples:\n\n\n\nparallel: R package that provides ‘[s]upport for parallel computation, including random-number generation’.\n\n\n\n\n\n\nforeach: R package for ‘general iteration over elements’ in parallel fashion.\n\n\n\n\n\n\nfuture: ‘[A] lightweight and unified Future API for sequential and parallel processing of R expression via futures.’ (won’t cover here)\n\n\n\nImplicit parallelism, on the other hand, are out-of-the-box tools that allow the programmer not to worry about parallelization, e.g. such as gpuR for Matrix manipulation using GPU, tensorflow"
  },
  {
    "objectID": "slides/week08.html#the-parallel-package",
    "href": "slides/week08.html#the-parallel-package",
    "title": "Week 8: Efficiency and High Performance Computing",
    "section": "The parallel package",
    "text": "The parallel package\n\nBased on the snow and multicore R Packages.\nExplicit parallelism.\nSimple yet powerful idea: Parallel computing as multiple R sessions.\nClusters can be made of both local and remote sessions\nMultiple types of cluster: PSOCK, Fork, MPI, etc."
  },
  {
    "objectID": "slides/week08.html#parallel-workflow",
    "href": "slides/week08.html#parallel-workflow",
    "title": "Week 8: Efficiency and High Performance Computing",
    "section": "Parallel workflow",
    "text": "Parallel workflow\n(Usually) We do the following:\n\nCreate a PSOCK/FORK (or other) cluster using makePSOCKCluster/makeForkCluster (or simply makeCluster)\nCopy/prepare each R session (if you are using a PSOCK cluster):\n\nCopy objects with clusterExport\nSet a seed with clusterSetRNGStream\n\nDo your call:\n\nPass expressions with clusterEvalQ\nRun a parallelized loop with parApply, parLapply, etc.\n\nStop the cluster with stopCluster"
  },
  {
    "objectID": "slides/week08.html#ex-1-hello-world",
    "href": "slides/week08.html#ex-1-hello-world",
    "title": "Week 8: Efficiency and High Performance Computing",
    "section": "Ex 1: Hello world!",
    "text": "Ex 1: Hello world!\n\n# 1. CREATING A CLUSTER\nlibrary(parallel)\ncl &lt;- makeCluster(4)    \nx  &lt;- 20\n\n# 2. PREPARING THE CLUSTER\nclusterSetRNGStream(cl, 123) # Equivalent to `set.seed(123)` (not necessary for this example)\nclusterExport(cl, \"x\")\n\n# 3. DO YOUR CALL\nclusterEvalQ(cl, {\n  paste0(\"Hello from process #\", Sys.getpid(), \". I see x and it is equal to \", x)\n})\n\n[[1]]\n[1] \"Hello from process #30604. I see x and it is equal to 20\"\n\n[[2]]\n[1] \"Hello from process #30603. I see x and it is equal to 20\"\n\n[[3]]\n[1] \"Hello from process #30606. I see x and it is equal to 20\"\n\n[[4]]\n[1] \"Hello from process #30605. I see x and it is equal to 20\"\n\n# 4. STOP THE CLUSTER\nstopCluster(cl)"
  },
  {
    "objectID": "slides/week08.html#ex-1-hello-world-redux",
    "href": "slides/week08.html#ex-1-hello-world-redux",
    "title": "Week 8: Efficiency and High Performance Computing",
    "section": "Ex 1: Hello world! (redux)",
    "text": "Ex 1: Hello world! (redux)\nMulti-core versions of the *apply functions are simpler, but may not work on Windows machines.\n\n# 1. SETUP\nlibrary(parallel)\nx  &lt;- 20\n\n# 2. DO YOUR CALL\nmclapply(1:4, function(i){\n    paste0(\"Hello from process #\", Sys.getpid(), \". I see x and it is equal to \", x)\n}, mc.cores = 4)\n\n[[1]]\n[1] \"Hello from process #30658. I see x and it is equal to 20\"\n\n[[2]]\n[1] \"Hello from process #30659. I see x and it is equal to 20\"\n\n[[3]]\n[1] \"Hello from process #30660. I see x and it is equal to 20\"\n\n[[4]]\n[1] \"Hello from process #30661. I see x and it is equal to 20\""
  },
  {
    "objectID": "slides/week08.html#ex-2-parallel-regressions",
    "href": "slides/week08.html#ex-2-parallel-regressions",
    "title": "Week 8: Efficiency and High Performance Computing",
    "section": "Ex 2: Parallel regressions",
    "text": "Ex 2: Parallel regressions\nProblem: Run multiple regressions on a very wide dataset. We need to fit the following model:\n\\[\ny = X_i\\beta_i + \\varepsilon,\\quad \\varepsilon\\sim N(0, \\sigma^2_i),\\quad\\forall i\n\\]\n\n\n[1] 500 999\n\n\n         x001        x002       x003       x004      x005\n1  0.61827227  1.72847041 -1.4810695 -0.2471871 1.4776281\n2  0.96777456 -0.19358426 -0.8176465  0.6356714 0.7292221\n3 -0.04303734 -0.06692844  0.9048826 -1.9277964 2.2947675\n4  0.84237608 -1.13685605 -1.8559158  0.4687967 0.9881953\n5 -1.91921443  1.83865873  0.5937039 -0.1410556 0.6507415\n6  0.59146153  0.81743419  0.3348553 -1.8771819 0.8181764\n\n\n num [1:500] -0.8188 -0.5438 1.0209 0.0467 -0.4501 ..."
  },
  {
    "objectID": "slides/week08.html#ex-2-parallel-regressions-cont.-1",
    "href": "slides/week08.html#ex-2-parallel-regressions-cont.-1",
    "title": "Week 8: Efficiency and High Performance Computing",
    "section": "Ex 2: Parallel regressions (cont. 1)",
    "text": "Ex 2: Parallel regressions (cont. 1)\nSerial solution: Use apply (basic loop) to solve it\n\n#\n#\n#\n#\nans &lt;- apply(\n  X = X,\n  MARGIN = 2,\n  FUN = function(x) coef(lm(y ~ x))\n)\n\nans[,1:5]\n\n                   x001        x002        x003        x004        x005\n(Intercept) -0.03449819 -0.03339681 -0.03728140 -0.03644192 -0.03717344\nx           -0.06082548  0.02748265 -0.01327855 -0.08012361 -0.04067826"
  },
  {
    "objectID": "slides/week08.html#ex-2-parallel-regressions-cont.-2",
    "href": "slides/week08.html#ex-2-parallel-regressions-cont.-2",
    "title": "Week 8: Efficiency and High Performance Computing",
    "section": "Ex 2: Parallel regressions (cont. 2)",
    "text": "Ex 2: Parallel regressions (cont. 2)\nParallel solution: Use parApply\n\nlibrary(parallel)\ncl &lt;- makeCluster(4L)\nclusterExport(cl, \"y\")\nans &lt;- parApply(\n  cl = cl,\n  X = X,\n  MARGIN = 2,\n  FUN = function(x) coef(lm(y ~ x))\n)\n \nans[,1:5]\n\n                   x001        x002        x003        x004        x005\n(Intercept) -0.03449819 -0.03339681 -0.03728140 -0.03644192 -0.03717344\nx           -0.06082548  0.02748265 -0.01327855 -0.08012361 -0.04067826"
  },
  {
    "objectID": "slides/week08.html#ex-2-parallel-regressions-cont.-3",
    "href": "slides/week08.html#ex-2-parallel-regressions-cont.-3",
    "title": "Week 8: Efficiency and High Performance Computing",
    "section": "Ex 2: Parallel regressions (cont. 3)",
    "text": "Ex 2: Parallel regressions (cont. 3)\nAre we going any faster?\n\nmicrobenchmark::microbenchmark(\n  parallel = parApply(\n    cl = cl,\n    X = X, MARGIN = 2,\n    FUN = function(x) coef(lm(y ~ x))\n  ),\n  serial = apply(\n    X = X, MARGIN = 2,\n    FUN = function(x) coef(lm(y ~ x))\n  ), unit=\"relative\"\n)\n\nUnit: relative\n     expr      min       lq     mean   median       uq      max neval\n parallel 1.000000 1.000000 1.000000 1.000000 1.000000 1.000000   100\n   serial 2.603318 2.623148 2.589386 2.613118 2.616343 2.258219   100"
  },
  {
    "objectID": "slides/week08.html#extended-example-sars-cov2-simulation",
    "href": "slides/week08.html#extended-example-sars-cov2-simulation",
    "title": "Week 8: Efficiency and High Performance Computing",
    "section": "Extended Example: SARS-CoV2 simulation",
    "text": "Extended Example: SARS-CoV2 simulation\nAn altered version of Conway’s game of life\n\nPeople live on a grid, each individual having 8 neighbors.\nA healthy individual (A) interacting with a sick neighbor (B) has the following probabilities of contracting the disease:\n\n100% if neither wears a mask.\n50% if only A wears a mask.\n20% if only B wears a mask.\n5% if both wear masks.\n\nInfected individuals may die with probability 10%.\n\nWe want to illustrate the importance of wearing face masks. We are going to simulate a system with 2,500 (50 x 50) individuals, 1,000 times so we can analyze: (a) contagion curve, (b) death curve.\nMore models like this: The SIRD model (Susceptible-Infected-Recovered-Deceased)"
  },
  {
    "objectID": "slides/week08.html#conways-game-of-masks",
    "href": "slides/week08.html#conways-game-of-masks",
    "title": "Week 8: Efficiency and High Performance Computing",
    "section": "Conway’s Game of Masks",
    "text": "Conway’s Game of Masks\nDownload the program here.\n\n# source(\"~/Downloads/sars-cov2.R\", echo=FALSE)\nsource(\"img/sars-cov2.R\", echo = FALSE)\n\n# Looking at some constants\nprobs_sick # Sick individual's probabilities\n\n deceased  infected recovered \n      0.1       0.4       0.5 \n\nprobs_susc # Probabilities of i getting the disease \n\n               j doesn't wear j wears\ni doesn't wear            0.9    0.20\ni wears                   0.5    0.05"
  },
  {
    "objectID": "slides/week08.html#first-look-what-does-the-simulation-look-like",
    "href": "slides/week08.html#first-look-what-does-the-simulation-look-like",
    "title": "Week 8: Efficiency and High Performance Computing",
    "section": "First look: What does the simulation look like?",
    "text": "First look: What does the simulation look like?\n\nset.seed(7123)\none &lt;- simulate_covid(\n    pop_size = 1600,\n    nsick = 160,\n    nwears_mask = 1:400,\n    nsteps = 20,\n    store = TRUE\n)\n\none$statistics[c(1:5, 16:20),]\n\n   susceptible infected recovered deceased\n0         1440      160         0        0\n1         1265      234        85       16\n2         1064      307       190       39\n3          876      321       334       69\n4          717      287       499       97\n15         430        1       990      179\n16         429        2       990      179\n17         429        0       992      179\n18         429        0       992      179\n19         429        0       992      179"
  },
  {
    "objectID": "slides/week08.html#first-look-what-does-the-simulation-look-like-contd",
    "href": "slides/week08.html#first-look-what-does-the-simulation-look-like-contd",
    "title": "Week 8: Efficiency and High Performance Computing",
    "section": "First look: What does the simulation look like? (contd’)",
    "text": "First look: What does the simulation look like? (contd’)\n\n# Location of who wears the facemask. This step is only for plotting\nwears &lt;- which(one$wears, arr.ind = TRUE) - 1\nwears &lt;- wears/(one$nr) * (1 + 1/one$nr)\n\n# Initializing the animation\nfig   &lt;- magick::image_device(600, 600, res = 96/2, pointsize = 24)\nfor (i in 1:one$current_step) {\n  \n  # Plot\n  image(\n    one$temporal[,,i], col=c(\"gray\", \"tomato\", \"steelblue\",\"black\"),\n    main = paste(\"Time\", i - 1L, \"of\", one$nsteps),\n    zlim = c(1,4)\n    )\n  points(wears, col=\"white\", pch=20, cex=1.5)\n  legend(\n    \"topright\",\n    col = c(\"gray\", \"tomato\", \"steelblue\",\"black\", \"black\"),\n    legend = c(names(codes), \"wears a mask\"),\n    pch = c(rep(15, 4), 21)\n  )\n}\n\n# Finalizing plot and writing the animation\ndev.off()\nanimation &lt;- magick::image_animate(fig, fps = 2)\nmagick::image_write(animation, \"covid1.gif\")"
  },
  {
    "objectID": "slides/week08.html#speed-things-up-timing-under-the-serial-implementation",
    "href": "slides/week08.html#speed-things-up-timing-under-the-serial-implementation",
    "title": "Week 8: Efficiency and High Performance Computing",
    "section": "Speed things up: Timing under the serial implementation",
    "text": "Speed things up: Timing under the serial implementation\nWe will use the function system.time to measure how much time it takes to complete 20 simulations in serial versus parallel fashion using 4 cores.\n\ntime_serial &lt;- system.time({\n  ans_serial &lt;- replicate(50, {\n    simulate_covid(\n      pop_size = 900,\n      nsick = 10,\n      nwears_mask = 900,\n      nsteps = 20)$statistics[,\"deceased\"]\n    },\n    simplify = FALSE\n    )\n})"
  },
  {
    "objectID": "slides/week08.html#speed-things-up-parallel-a-forking-cluster",
    "href": "slides/week08.html#speed-things-up-parallel-a-forking-cluster",
    "title": "Week 8: Efficiency and High Performance Computing",
    "section": "Speed things up: Parallel a Forking Cluster",
    "text": "Speed things up: Parallel a Forking Cluster\nAlternative 1: If you are using Unix-like system (Ubuntu, OSX, etc.), you can take advantage of process forking, and thus, parallel’s mclapply function:\n\nset.seed(1231)\ntime_parallel_fork &lt;- system.time({\n  ans_parallel &lt;- parallel::mclapply(1:50, function(i) {\n    simulate_covid(\n      pop_size = 900,\n      nsick = 10,\n      nwears_mask = 900,\n      nsteps = 20)$statistics[,\"deceased\"]\n    }, mc.cores = 2L\n  )\n})"
  },
  {
    "objectID": "slides/week08.html#speed-things-up-parallel-with-a-socket-cluster",
    "href": "slides/week08.html#speed-things-up-parallel-with-a-socket-cluster",
    "title": "Week 8: Efficiency and High Performance Computing",
    "section": "Speed things up: Parallel with a Socket Cluster",
    "text": "Speed things up: Parallel with a Socket Cluster\nAlternative 2: Regardless of the operating system, we can use a Socket cluster, which is simply a group of fresh R sessions that listen to the parent/main/mother session.\n\n# Step 1: Make the cluster\ncl &lt;- parallel::makePSOCKcluster(2L)\n\n# Step 2: Prepare the cluster\n# We could either export all the needed variables\nparallel::clusterExport(\n  cl,\n  c(\"calc_stats\", \"codes\", \"dat\", \"get_neighbors\", \"init\", \"probs_sick\",\n    \"probs_susc\", \"simulate_covid\", \"update_status\", \"update_status_all\"\n    )\n  )\nOr simply run the simulation script in the other sessions:\n\n# Step 2 (alt): Prepare the cluster\nparallel::clusterEvalQ(cl, source(\"img/sars-cov2.R\"))\nparallel::clusterSetRNGStream(cl, 123) # Make sure it is reproducible!"
  },
  {
    "objectID": "slides/week08.html#speed-things-up-parallel-with-a-socket-cluster-contd",
    "href": "slides/week08.html#speed-things-up-parallel-with-a-socket-cluster-contd",
    "title": "Week 8: Efficiency and High Performance Computing",
    "section": "Speed things up: Parallel with a Socket Cluster (cont’d)",
    "text": "Speed things up: Parallel with a Socket Cluster (cont’d)\n\n# Step 3: Do your call\ntime_parallel_sock &lt;- system.time({\n  ans_parallel &lt;- parallel::parLapply(cl, 1:50, function(i) {\n    simulate_covid(\n      pop_size    = 900,\n      nsick       = 10,\n      nwears_mask = 900,\n      nsteps      = 20)$statistics[,\"deceased\"]\n    }\n  )\n})\n\n# Step 4: Stop\nparallel::stopCluster(cl)"
  },
  {
    "objectID": "slides/week08.html#cloud-computing-a.k.a.-on-demand-computing",
    "href": "slides/week08.html#cloud-computing-a.k.a.-on-demand-computing",
    "title": "Week 8: Efficiency and High Performance Computing",
    "section": "Cloud Computing (a.k.a. on-demand computing)",
    "text": "Cloud Computing (a.k.a. on-demand computing)\nHPC clusters, super-computers, etc. need not be bought… you can rent:\n\nAmazon Web Services (AWS)\nGoogle Cloud Computing\nMicrosoft Azure\n\nThese services provide more than just computing (storage, data analysis, etc.). But for computing and storage, there are other free resources, e.g.:\n\nThe Extreme Science and Engineering Discovery Environment (XSEDE)"
  },
  {
    "objectID": "slides/week08.html#there-are-many-ways-to-run-r-in-the-cloud",
    "href": "slides/week08.html#there-are-many-ways-to-run-r-in-the-cloud",
    "title": "Week 8: Efficiency and High Performance Computing",
    "section": "There are many ways to run R in the cloud",
    "text": "There are many ways to run R in the cloud\nAt USC:\n\nCenter for Advanced Research Computing (CARC). USC users can request hundreds of cores (literally).\n\nRunning R in:\n\nGoogle Cloud: https://cloud.google.com/solutions/running-r-at-scale\nAmazon Web Services: https://aws.amazon.com/blogs/big-data/running-r-on-aws/\nMicrosoft Azure: https://docs.microsoft.com/en-us/azure/architecture/data-guide/technology-choices/r-developers-guide"
  },
  {
    "objectID": "slides/week08.html#submitting-jobs",
    "href": "slides/week08.html#submitting-jobs",
    "title": "Week 8: Efficiency and High Performance Computing",
    "section": "Submitting jobs",
    "text": "Submitting jobs\n\nA key feature of cloud services: interact via command line.\nYou will need to be familiar with Rscript and R CMD BATCH.\nWhich is better? It depends on the application."
  },
  {
    "objectID": "slides/week08.html#submitting-jobs-examples",
    "href": "slides/week08.html#submitting-jobs-examples",
    "title": "Week 8: Efficiency and High Performance Computing",
    "section": "Submitting jobs (examples)",
    "text": "Submitting jobs (examples)\nImagine we have the following R script (download here):\nlibrary(data.table)\nset.seed(1231)\ndat &lt;- data.table(y = rnorm(1e3), x = sample.int(5, 1e3, TRUE))\ndat[,mean(y), by = x]\nR CMD BATCH\nThis will run a non-interactive R session and put all the output (stdout and stderr) to the file dummy.Rout.\nR CMD BATCH --vanilla dummy.R dummy.Rout &\nRscript\nThis will also execute R in the background, with the difference that the output dummy.Rout will not capture stderr (messages, warnings and errors from R).\nRscript --vanilla dummy.R &gt; dummy.Rout &\nThe & at the end makes sure the job is submitted and does not wait for it to end."
  },
  {
    "objectID": "slides/week08.html#rscript",
    "href": "slides/week08.html#rscript",
    "title": "Week 8: Efficiency and High Performance Computing",
    "section": "Rscript",
    "text": "Rscript\nThe R script can be executed as a program directly, if you specify where the Rscript program lives.\nThe following example works on Unix. This is an R script named since_born.R (download here)\n#!/usr/bin/Rscript\nargs &lt;- tail(commandArgs(), 0)\nmessage(Sys.Date() - as.Date(args), \" days since you were born.\")\nThis R script can be executed in various ways…"
  },
  {
    "objectID": "slides/week08.html#rscript-as-a-program",
    "href": "slides/week08.html#rscript-as-a-program",
    "title": "Week 8: Efficiency and High Performance Computing",
    "section": "Rscript as a program",
    "text": "Rscript as a program\nFor this we would need to change it to an executable. In unix you can use the chmod command: chmod +x since_born.R. This allows us to do the following:"
  },
  {
    "objectID": "slides/week08.html#rscript-in-a-bash-script-most-common",
    "href": "slides/week08.html#rscript-in-a-bash-script-most-common",
    "title": "Week 8: Efficiency and High Performance Computing",
    "section": "Rscript in a bash script (most common)",
    "text": "Rscript in a bash script (most common)\nIn the case of running jobs on a cluster or something similar, we usually need to have a bash script. In our case, we have a file named since_born_bash.sh that calls Rscript (download here)\n#!/bin/bash\nRscript since_born.R 1988-03-02\nWhich we would execute like this:\n\n\nFatal error: cannot open file 'since_born.R': No such file or directory"
  },
  {
    "objectID": "slides/week08.html#session-info",
    "href": "slides/week08.html#session-info",
    "title": "Week 8: Efficiency and High Performance Computing",
    "section": "Session info",
    "text": "Session info\n\n\nR version 4.5.1 (2025-06-13)\nPlatform: aarch64-apple-darwin20\nRunning under: macOS Sequoia 15.6.1\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.5-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.5-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.12.1\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: America/Los_Angeles\ntzcode source: internal\n\nattached base packages:\n[1] parallel  stats     graphics  grDevices utils     datasets  methods  \n[8] base     \n\nother attached packages:\n[1] microbenchmark_1.5.0 scales_1.4.0         RColorBrewer_1.1-3  \n\nloaded via a namespace (and not attached):\n [1] digest_0.6.37     R6_2.6.1          fastmap_1.2.0     xfun_0.52        \n [5] farver_2.1.2      glue_1.8.0        knitr_1.50        htmltools_0.5.8.1\n [9] rmarkdown_2.29    lifecycle_1.0.4   cli_3.6.5         compiler_4.5.1   \n[13] rstudioapi_0.17.1 tools_4.5.1       evaluate_1.0.4    yaml_2.3.10      \n[17] jsonlite_2.0.0    rlang_1.1.6"
  },
  {
    "objectID": "slides/week08.html#bonus-rcpp-r-c",
    "href": "slides/week08.html#bonus-rcpp-r-c",
    "title": "Week 8: Efficiency and High Performance Computing",
    "section": "(Bonus) Rcpp: R & C++",
    "text": "(Bonus) Rcpp: R & C++\nThe Fibonacci series\n\n\\[\nFib(n) = \\left\\{\\begin{array}{ll}\nn & \\mbox{if }n \\leq 1 \\\\\nFib(n-1) + Fib(n - 2) & \\mbox{otherwise}\n\\end{array}\\right.\n\\]"
  },
  {
    "objectID": "slides/week08.html#rcpp-hello-world-v1",
    "href": "slides/week08.html#rcpp-hello-world-v1",
    "title": "Week 8: Efficiency and High Performance Computing",
    "section": "Rcpp: Hello world! v1",
    "text": "Rcpp: Hello world! v1\nThe following C++ file, called fib.cpp\nCan be compiled within R using Rcpp::sourceCpp(\"fib.cpp\"). This exports the function back into R:\n\n\n[1] 1 1 2 3 5"
  },
  {
    "objectID": "slides/week08.html#rcpp-hello-world-v2-with-function-overloading",
    "href": "slides/week08.html#rcpp-hello-world-v2-with-function-overloading",
    "title": "Week 8: Efficiency and High Performance Computing",
    "section": "Rcpp: Hello world! v2 (with function overloading)",
    "text": "Rcpp: Hello world! v2 (with function overloading)\nRcpp data types are mapped directly to R data types, e.g. vectors of integers in R can be used as IntegerVector in Rcpp.\nBack in R\n\n\n[1] 1 1 2 3 5"
  },
  {
    "objectID": "slides/week08.html#rcpparmadillo-and-openmp",
    "href": "slides/week08.html#rcpparmadillo-and-openmp",
    "title": "Week 8: Efficiency and High Performance Computing",
    "section": "RcppArmadillo and OpenMP",
    "text": "RcppArmadillo and OpenMP\n\nFriendlier than RcppParallel… at least for ‘I-use-Rcpp-but-don’t-actually-know-much-about-C++’ users (like myself!).\nMust run only ‘Thread-safe’ calls, so calling R within parallel blocks can cause problems (almost all the time).\nUse arma objects, e.g. arma::mat, arma::vec, etc. Or, if you are used to them std::vector objects as these are thread safe.\nPseudo-Random Number Generation is not very straight forward… But C++11 has a nice set of functions that can be used together with OpenMP\nNeed to think about how processors work, cache memory, etc. Otherwise you could get into trouble… if your code is slower when run in parallel, then you probably are facing false sharing\nIf R crashes… try running R with a debugger (see Section 4.3 in Writing R extensions):\n~$ R --debugger=valgrind"
  },
  {
    "objectID": "slides/week08.html#rcpparmadillo-and-openmp-workflow",
    "href": "slides/week08.html#rcpparmadillo-and-openmp-workflow",
    "title": "Week 8: Efficiency and High Performance Computing",
    "section": "RcppArmadillo and OpenMP workflow",
    "text": "RcppArmadillo and OpenMP workflow\n\nAdd the following to your C++ source code to use OpenMP, and tell Rcpp that you need to include that in the compiler:\n#include &lt;omp.h&gt;\n// [[Rcpp::plugins(openmp)]]\nTell the compiler that you’ll be running a block in parallel with openmp\n#pragma omp [directives] [options]\n{\n  ...your neat parallel code...\n}\nYou’ll need to specify how OMP should handle the data:\n\nshared: Default, all threads access the same copy.\nprivate: Each thread has its own copy (although not initialized).\nfirstprivate Each thread has its own copy initialized.\nlastprivate Each thread has its own copy. The last value is the one stored in the main program.\n\nSetting default(none) is a good practice.\nCompile!"
  },
  {
    "objectID": "slides/week08.html#ex-3-rcpparmadillo-openmp",
    "href": "slides/week08.html#ex-3-rcpparmadillo-openmp",
    "title": "Week 8: Efficiency and High Performance Computing",
    "section": "Ex 3: RcppArmadillo + OpenMP",
    "text": "Ex 3: RcppArmadillo + OpenMP\nComputing the distance matrix (see ?dist)\n\n#include &lt;Rcpp.h&gt;\n#include &lt;omp.h&gt;\n#include &lt;RcppArmadillo.h&gt;\n// [[Rcpp::depends(RcppArmadillo)]]\n// [[Rcpp::plugins(openmp)]]\nusing namespace Rcpp;\n\n// [[Rcpp::export]]\narma::mat dist_par(const arma::mat & X, int cores = 1) {\n  \n  // Some constants and the result\n  int N = (int) X.n_rows; int K = (int) X.n_cols;\n  arma::mat D(N,N,arma::fill::zeros);\n  \n  omp_set_num_threads(cores); // Setting the cores\n  \n#pragma omp parallel for shared(D, N, K, X) default(none)\n  for (int i=0; i&lt;N; ++i)\n    for (int j=0; j&lt;i; ++j) {\n      for (int k=0; k&lt;K; k++) \n        D.at(i,j) += pow(X.at(i,k) - X.at(j,k), 2.0);\n      \n      // Computing square root\n      D.at(i,j) = sqrt(D.at(i,j)); D.at(j,i) = D.at(i,j);\n    }\n      \n  // My nice distance matrix\n  return D;\n}"
  },
  {
    "objectID": "slides/week08.html#resources",
    "href": "slides/week08.html#resources",
    "title": "Week 8: Efficiency and High Performance Computing",
    "section": "Resources",
    "text": "Resources\n\nPackage parallel\nUsing the iterators package\nUsing the foreach package\n32 OpenMP traps for C++ developers\nThe OpenMP API specification for parallel programming\n‘openmp’ tag in Rcpp gallery\nOpenMP tutorials and articles\n\nFor more, checkout the CRAN Task View on HPC"
  },
  {
    "objectID": "slides/week08.html#simulating-pi",
    "href": "slides/week08.html#simulating-pi",
    "title": "Week 8: Efficiency and High Performance Computing",
    "section": "Simulating \\(\\pi\\)",
    "text": "Simulating \\(\\pi\\)\n\nWe know that \\(\\pi = \\frac{A}{r^2}\\). We approximate it by randomly adding points \\(x\\) to a square of size 2 centered at the origin.\nSo, we approximate \\(\\pi\\) as \\(\\Pr\\{\\|x\\| \\leq 1\\}\\times 2^2\\)"
  },
  {
    "objectID": "slides/week08.html#bonus-overview-of-hpc",
    "href": "slides/week08.html#bonus-overview-of-hpc",
    "title": "Week 8: Efficiency and High Performance Computing",
    "section": "(Bonus) Overview of HPC",
    "text": "(Bonus) Overview of HPC\nUsing Flynn’s classical taxonomy, we can classify parallel computing according to the following two dimensions:\n\nType of instruction: Single vs Multiple\nData stream: Single vs Multiple\n\n\n   \n\nMichael Flynn’s Taxonomy (wiki)"
  },
  {
    "objectID": "slides/week08.html#bonus-parallel-computing-software",
    "href": "slides/week08.html#bonus-parallel-computing-software",
    "title": "Week 8: Efficiency and High Performance Computing",
    "section": "(Bonus) Parallel computing: Software",
    "text": "(Bonus) Parallel computing: Software\nImplicit parallelization:\n\ntensorflow: Machine learning framework\npqR: Branched version of R.\nMicrosoft R: Microsoft’s R private version (based on Revolution Analytics’ R version).\ndata.table (R package): Data wrangling using multiple cores.\ncaret (R package): A meta package, has various implementations using parallel computing.\n\nExplicit parallelization (DIY):\n\nCUDA (C/C++ library): Programming with GP-GPUs.\nOpen MP (C/C++ library): Multi-core programming (CPUs).\nOpen MPI (C/C++ library): Large scale programming with multi-node systems.\nThreading Building Blocks (C/C++ library): Intel’s parallel computing library.\nKokkos (C++ library): A hardware-agnostic programming framework for HPC applications.\nparallel (R package): R’s built-in parallel computing package\nfuture (R package): Framework for parallelzing R.\nRcppParallel (R C++ API wrapper): Header and templates for building Rcpp+multi-threaded programs.\njulia (programming language): High-performing, has a framework for parallel computing as well."
  },
  {
    "objectID": "slides/week07.html#regular-expressions-what-is-it",
    "href": "slides/week07.html#regular-expressions-what-is-it",
    "title": "Week 7: Regular Expressions and Web Scraping",
    "section": "Regular Expressions: What is it?",
    "text": "Regular Expressions: What is it?\n\nA regular expression (shortened as regex or regexp; also referred to as rational expression) is a sequence of characters that define a search pattern. – Wikipedia"
  },
  {
    "objectID": "slides/week07.html#regular-expressions-why-should-you-care",
    "href": "slides/week07.html#regular-expressions-why-should-you-care",
    "title": "Week 7: Regular Expressions and Web Scraping",
    "section": "Regular Expressions: Why should you care?",
    "text": "Regular Expressions: Why should you care?\nWe can use Regular Expressions for:\n\nValidating data fields, email address, numbers, etc.\nSearching text in various formats, e.g., addresses, there are many ways to write an address.\nReplace text, e.g., different spellings, Storm, Stôrm, Stórm to Storm.\nRemove text, e.g., tags from an HTML text, &lt;name&gt;George&lt;/name&gt; to George."
  },
  {
    "objectID": "slides/week07.html#regex-101-metacharacters",
    "href": "slides/week07.html#regex-101-metacharacters",
    "title": "Week 7: Regular Expressions and Web Scraping",
    "section": "Regex 101: Metacharacters",
    "text": "Regex 101: Metacharacters\nWhat makes regex special is metacharacters. While we can always use regex to match literals like dog, human, 1999, we only make use of all regex power when using metacharacters:\n\n. Any character except new line\n^ beginning of the text\n$ end of the text\n[expression] Match any single character in “expression”, e.g.\n\n[0123456789] Any digit\n[0-9] Any digit in the range 0-9\n[a-z] Lower-case letters\n[A-Z] Upper-case letters\n[a-zA-Z] Lower or upper case letters.\n[a-zA-Z0-9] Any alpha-numeric"
  },
  {
    "objectID": "slides/week07.html#regex-101-metacharacters-cont.-1",
    "href": "slides/week07.html#regex-101-metacharacters-cont.-1",
    "title": "Week 7: Regular Expressions and Web Scraping",
    "section": "Regex 101: Metacharacters (cont. 1)",
    "text": "Regex 101: Metacharacters (cont. 1)\n\n[^regex] Match any except those in regex, e.g.\n\n[^0123456789] Match any except a number\n[^0-9] Match anything except in the range 0-9\n[^./ ] any except dot, slash, and space."
  },
  {
    "objectID": "slides/week07.html#regex-101-metacharacters-cont.-2",
    "href": "slides/week07.html#regex-101-metacharacters-cont.-2",
    "title": "Week 7: Regular Expressions and Web Scraping",
    "section": "Regex 101: Metacharacters (cont. 2)",
    "text": "Regex 101: Metacharacters (cont. 2)\nRanges, e.g., 0-9 or a-z, are locale- and implementation-dependent, meaning that the range of lower case letters may vary depending on the OS’s language. To solve for this problem, you could use Character classes. Some examples:\n\n[[:lower:]] lower case letters in the current locale, could be [a-z]\n[[:upper:]] upper case letters in the current locale, could be [A-Z]\n[[:alpha:]] upper and lower case letters in the current locale, could be [a-zA-Z]\n[[:digit:]] Digits: 0 1 2 3 4 5 6 7 8 9\n[[:alnum:]] Alpha numeric characters [[:alpha:]] and [[:digit:]].\n[[:punct:]] Punctuation characters: ! ” # $ % & ’ ( ) * + , - . / : ; &lt; = &gt; ? @ [ \\ ] ^ _ ` { | } ~.\n\nFor example, in the locale en_US, the word Ḧóla IS NOT fully matched by [a-zA-Z]+, but IT IS fully matched by [[:alpha:]]+."
  },
  {
    "objectID": "slides/week07.html#regex-101-metacharacters-cont.-3",
    "href": "slides/week07.html#regex-101-metacharacters-cont.-3",
    "title": "Week 7: Regular Expressions and Web Scraping",
    "section": "Regex 101: Metacharacters (cont. 3)",
    "text": "Regex 101: Metacharacters (cont. 3)\nOther important metacharacters:\n\n\\\\s white space, equivalent to [\\\\r\\\\n\\\\t\\\\f\\\\v ]\n| or (logical or)."
  },
  {
    "objectID": "slides/week07.html#regex-101-metacharacters-cont.-4",
    "href": "slides/week07.html#regex-101-metacharacters-cont.-4",
    "title": "Week 7: Regular Expressions and Web Scraping",
    "section": "Regex 101: Metacharacters (cont. 4)",
    "text": "Regex 101: Metacharacters (cont. 4)\nThese usually come together with specifying how many times (repetition):\n\nregex? Zero or one match.\nregex* Zero or more matches\nregex+ One or more matches\nregex{n,} At least n matches\nregex{,m} at most m matches\nregex{n,m} Between n and m matches.\n\nWhere regex is a regular expression"
  },
  {
    "objectID": "slides/week07.html#regex-101-metacharacters-cont.-5",
    "href": "slides/week07.html#regex-101-metacharacters-cont.-5",
    "title": "Week 7: Regular Expressions and Web Scraping",
    "section": "Regex 101: Metacharacters (cont. 5)",
    "text": "Regex 101: Metacharacters (cont. 5)\nThere are other operators that can be very useful,\n\n(regex) Group capture.\n(?:regex) Group operation without capture.\nA(?=B) Look ahead (match). Find expression A where expression B follows.\nA(?!B) Look ahead (don’t match). Find expression A where expression B does not follow.\n(?&lt;=B)A Look behind (match). Find expression A where expression B precedes.\n(?&lt;!B)A Look behind (don’t match). Find expression A where expression B does not precede.\n\nGroup captures can be reused with \\\\1, \\\\2, …, \\\\n, referring to the first group, second group, etc.\nMore (great) information here https://regex101.com/"
  },
  {
    "objectID": "slides/week07.html#regex-101-examples",
    "href": "slides/week07.html#regex-101-examples",
    "title": "Week 7: Regular Expressions and Web Scraping",
    "section": "Regex 101: Examples",
    "text": "Regex 101: Examples\n\n.{5} Match any character (except line end) five times.\nn{2} Match the letter n twice.\n[0-9] Match any number once.\n[0-9]+ Match any number at least once.\n[a-zA-Z]+ Match any lower or upper case letter at least once.\n\\\\s[a-zA-Z]+\\\\s Match a space, any lower or upper case letter at least once, and a space.\n\\\\s[[:alpha:]]+\\\\s Same as before but this time with the [[:alpha:]] character class."
  },
  {
    "objectID": "slides/week07.html#regex-101-examples-cont.-1",
    "href": "slides/week07.html#regex-101-examples-cont.-1",
    "title": "Week 7: Regular Expressions and Web Scraping",
    "section": "Regex 101: Examples (cont. 1)",
    "text": "Regex 101: Examples (cont. 1)\nHere we are extracting the first occurrence of the following regular expressions (using stringr::str_extract()):\n\n\n\n\n\nregex\nHanna Perez [name]\nThe 年 year was 1999\nHaHa, @abc said that\nGoGo trojans #2025!\n\n\n\n\n.{5}\nHanna\nThe 年\nHaHa,\nGoGo\n\n\nn{2}\nnn\n\n\n\n\n\n[0-9]\n\n1\n\n2\n\n\n[0-9]+\n\n1999\n\n2025\n\n\n[a-zA-Z]+\nHanna\nThe\nHaHa\nGoGo\n\n\n\\\\s[a-zA-Z]+\\\\s\nPerez\nyear\nsaid\ntrojans\n\n\n\\\\s[[:alpha:]]+\\\\s\nPerez\n年\nsaid\ntrojans"
  },
  {
    "objectID": "slides/week07.html#regex-101-examples-cont.-3",
    "href": "slides/week07.html#regex-101-examples-cont.-3",
    "title": "Week 7: Regular Expressions and Web Scraping",
    "section": "Regex 101: Examples (cont. 3)",
    "text": "Regex 101: Examples (cont. 3)\n\n[a-zA-Z]+ [a-zA-Z]+ Match two sets of letters separated by one space.\n[a-zA-Z]+\\\\s? Match one set of letters, maybe followed by a white space.\n([a-zA-Z]+)\\\\1 Match any lower or upper case letter at least once and then match the same pattern again.\n(@|#)[a-z0-9]+ Match either the @ or # symbol, followed by one or more lower case letter or number.\n(?&lt;=#|@)[a-z0-9]+ Match one or more lower case letter or number that follows either the @ or # symbol.\n\\\\[[a-z]+\\\\] Match the symbol [, at least one lower case letter, then symbol ]."
  },
  {
    "objectID": "slides/week07.html#regex-101-examples-cont.-2",
    "href": "slides/week07.html#regex-101-examples-cont.-2",
    "title": "Week 7: Regular Expressions and Web Scraping",
    "section": "Regex 101: Examples (cont. 2)",
    "text": "Regex 101: Examples (cont. 2)\n\n\n\nregex\nHanna Perez [name]\nThe 年 year was 1999\nHaHa, @abc said that\nGoGo trojans #2025!\n\n\n\n\n[a-zA-Z]+ [a-zA-Z]+\nHanna Perez\nyear was\nabc said\nGoGo trojans\n\n\n[a-zA-Z]+\\\\s?\nHanna\nThe\nHaHa\nGoGo\n\n\n([a-zA-Z]+)\\\\1\nnn\n\nHaHa\nGoGo\n\n\n(@|#)[a-z0-9]+\n\n\n@abc\n#2025\n\n\n(?&lt;=#|@)[a-z0-9]+\n\n\nabc\n2025"
  },
  {
    "objectID": "slides/week07.html#regex-101-examples-cont.-3-1",
    "href": "slides/week07.html#regex-101-examples-cont.-3-1",
    "title": "Week 7: Regular Expressions and Web Scraping",
    "section": "Regex 101: Examples (cont. 3)",
    "text": "Regex 101: Examples (cont. 3)"
  },
  {
    "objectID": "slides/week07.html#regex-101-functions-in-r",
    "href": "slides/week07.html#regex-101-functions-in-r",
    "title": "Week 7: Regular Expressions and Web Scraping",
    "section": "Regex 101: Functions in R",
    "text": "Regex 101: Functions in R\n\nFind in text: grepl(), stringr::str_detect().\nSimilar to which(), which elements are TRUE grep(), stringr::str_which()\nReplace the first instance: sub(), stringr::str_replace()\nReplace all instances: gsub(), stringr::str_replace_all()\nExtract text: regmatches() plus regexpr(), stringr::str_extract() and stringr::str_extract_all()."
  },
  {
    "objectID": "slides/week07.html#regex-101-functions-in-r-cont.-1",
    "href": "slides/week07.html#regex-101-functions-in-r-cont.-1",
    "title": "Week 7: Regular Expressions and Web Scraping",
    "section": "Regex 101: Functions in R (cont. 1)",
    "text": "Regex 101: Functions in R (cont. 1)\nFor example, like in Twitter, let’s create a regex that matches usernames or hashtags with the following pattern:\n(@|#)([[:alnum:]]+)\n\n\n\n\n\n\n\n\n\n\n\nCode\n@Hanna Perez [name] #html\nThe @年 year was 1999\nHaHa, @abc said that @z\n\n\n\n\nstr_detect(text, pattern) or grepl(pattern, text)\nTRUE\nTRUE\nTRUE\n\n\nstr_extract(text, pattern) or regmatches(...)\n@Hanna\n@年\n@abc\n\n\nstr_extract_all(text, pattern)\n@Hanna, #html\n@年\n@abc, @z"
  },
  {
    "objectID": "slides/week07.html#regex-101-functions-in-r-cont.-2",
    "href": "slides/week07.html#regex-101-functions-in-r-cont.-2",
    "title": "Week 7: Regular Expressions and Web Scraping",
    "section": "Regex 101: Functions in R (cont. 2)",
    "text": "Regex 101: Functions in R (cont. 2)\nPattern: (@|#)([[:alnum:]]+)\n\n\n\n\n\n\n\n\n\n\n\nCode\n@Hanna Perez [name] #html\nThe @年 year was 1999\nHaHa, @abc said that @z\n\n\n\n\nstr_replace(text, pattern, \"\\\\1justinbieber\") or sub(...)\n@justinbieber Perez [name] #html\nThe @justinbieber year was 1999\nHaHa, @justinbieber said that @z\n\n\nstr_replace_all(text, pattern, \"\\\\1justinbieber\") or gsub(...)\n@justinbieber Perez [name] #justinbieber\nThe @justinbieber year was 1999\nHaHa, @justinbieber said that @justinbieber\n\n\n\n\n\nNote: It renders oddly in the table, but there is no space or line break in the group replacement, \\\\1."
  },
  {
    "objectID": "slides/week07.html#data",
    "href": "slides/week07.html#data",
    "title": "Week 7: Regular Expressions and Web Scraping",
    "section": "Data",
    "text": "Data\nThis week we will continue using our text mining dataset:\n\n# Where are we getting the data from\nmts_url &lt;- \"https://github.com/USCbiostats/data-science-data/raw/master/00_mtsamples/mtsamples.csv\"\n\n# Downloading the data to a tempfile (so it is destroyed afterwards)\ntmp &lt;- tempfile(pattern = \"mtsamples\", fileext = \".csv\")\n\n# We should be downloading this, ONLY IF this was not downloaded already.\n# otherwise is just a waste of time.\nif (!file.exists(tmp)) {\n  download.file(\n    url      = mts_url,\n    destfile = tmp,\n    # method   = \"libcurl\", timeout = 1000 (you may need this option)\n  )\n}\n\n# read the file\nmtsamples &lt;- read.csv(tmp, header = TRUE, row.names = 1)"
  },
  {
    "objectID": "slides/week07.html#regex-lookup-text-tumor",
    "href": "slides/week07.html#regex-lookup-text-tumor",
    "title": "Week 7: Regular Expressions and Web Scraping",
    "section": "Regex Lookup Text: Tumor",
    "text": "Regex Lookup Text: Tumor\nFor each entry, we want to know if it is tumor-related. For that we can use the following code:\n\n# How many entries contain the word tumor?\nsum(grepl(\"tumor\", mtsamples$description, ignore.case = TRUE))\n\n[1] 80\n\n# Generating a column tagging tumor\nmtsamples$tumor_related &lt;- grepl(\"tumor\", mtsamples$description, ignore.case = TRUE)\n\n# Taking a look at a few examples\nmtsamples$description[mtsamples$tumor_related == TRUE][1:3]\n\n[1] \"  Transurethral resection of a medium bladder tumor (TURBT), left lateral wall.\"                              \n[2] \" Transurethral resection of the bladder tumor (TURBT), large.\"                                                \n[3] \" Cystoscopy, transurethral resection of medium bladder tumor (4.0 cm in diameter), and direct bladder biopsy.\"\n\n\nNotice the ignore.case = TRUE. This is equivalent to transforming the text to lower case using tolower() before passing the text to the regular expression function."
  },
  {
    "objectID": "slides/week07.html#regex-lookup-text-pronoun-of-the-patient",
    "href": "slides/week07.html#regex-lookup-text-pronoun-of-the-patient",
    "title": "Week 7: Regular Expressions and Web Scraping",
    "section": "Regex Lookup text: Pronoun of the patient",
    "text": "Regex Lookup text: Pronoun of the patient\nNow, let’s try to guess the pronoun of the patient. To do so, we could tag by using the words he, his, him, they, them, theirs, ze, hir, hirs, she, hers, her (see this article on sexist text):\n\nmtsamples$pronoun &lt;- str_extract(\n  string  = tolower(mtsamples$transcription),\n  pattern = \"he|his|him|they|them|theirs|ze|hir|hirs|she|hers|her\"\n)\n\nWhat is the problem with this approach?"
  },
  {
    "objectID": "slides/week07.html#regex-lookup-text-pronoun-of-the-patient-cont.-1",
    "href": "slides/week07.html#regex-lookup-text-pronoun-of-the-patient-cont.-1",
    "title": "Week 7: Regular Expressions and Web Scraping",
    "section": "Regex Lookup text: Pronoun of the patient (cont. 1)",
    "text": "Regex Lookup text: Pronoun of the patient (cont. 1)\n\nmtsamples$transcription[1]\n\n[1] \"SUBJECTIVE:,  This 23-year-old white female presents with complaint of allergies.  She used to have allergies when she lived in Seattle but she thinks they are worse here.  In the past, she has tried Claritin, and Zyrtec.  Both worked for short time but then seemed to lose effectiveness.  She has used Allegra also.  She used that last summer and she began using it again two weeks ago.  It does not appear to be working very well.  She has used over-the-counter sprays but no prescription nasal sprays.  She does have asthma but doest not require daily medication for this and does not think it is flaring up.,MEDICATIONS: , Her only medication currently is Ortho Tri-Cyclen and the Allegra.,ALLERGIES: , She has no known medicine allergies.,OBJECTIVE:,Vitals:  Weight was 130 pounds and blood pressure 124/78.,HEENT:  Her throat was mildly erythematous without exudate.  Nasal mucosa was erythematous and swollen.  Only clear drainage was seen.  TMs were clear.,Neck:  Supple without adenopathy.,Lungs:  Clear.,ASSESSMENT:,  Allergic rhinitis.,PLAN:,1.  She will try Zyrtec instead of Allegra again.  Another option will be to use loratadine.  She does not think she has prescription coverage so that might be cheaper.,2.  Samples of Nasonex two sprays in each nostril given for three weeks.  A prescription was written as well.\"\n\nmtsamples$pronoun[1]\n\n[1] \"his\""
  },
  {
    "objectID": "slides/week07.html#regex-lookup-text-pronoun-of-the-patient-cont.-1-1",
    "href": "slides/week07.html#regex-lookup-text-pronoun-of-the-patient-cont.-1-1",
    "title": "Week 7: Regular Expressions and Web Scraping",
    "section": "Regex Lookup text: Pronoun of the patient (cont. 1)",
    "text": "Regex Lookup text: Pronoun of the patient (cont. 1)\nTo correct this issue, we can make our regular expression more precise:\n(?&lt;=\\W|^)(he|his|him|they|them|theirs|ze|hir|hirs|she|hers|her)(?=\\W|$)\nBit by bit this is:\n\n(?&lt;=regex) look behind for…\n\n\\W any non-alphanumeric character, this is equivalent to [^[:alnum:]], | or\n^ the beginning of text\n\nhe|his|him... any of these words\n(?=regex) followed by…\n\n\\W any non-alphanumeric character, this is equivalent to [^[:alnum:]], | or\n$ the end of the text."
  },
  {
    "objectID": "slides/week07.html#regex-lookup-text-pronoun-of-the-patient-cont.-2",
    "href": "slides/week07.html#regex-lookup-text-pronoun-of-the-patient-cont.-2",
    "title": "Week 7: Regular Expressions and Web Scraping",
    "section": "Regex Lookup text: Pronoun of the patient (cont. 2)",
    "text": "Regex Lookup text: Pronoun of the patient (cont. 2)\nLet’s use this new pattern:\n\nmtsamples$pronoun &lt;- str_extract(\n  string  = tolower(mtsamples$transcription), \n  pattern = \"(?&lt;=\\\\W|^)(he|his|him|they|them|theirs|ze|hir|hirs|she|hers|her)(?=\\\\W|$)\"\n  )\nmtsamples$pronoun[1:10]\n\n [1] \"she\" \"he\"  \"he\"  NA    NA    \"she\" \"she\" NA    NA    NA"
  },
  {
    "objectID": "slides/week07.html#regex-lookup-text-pronoun-of-the-patient-cont.-3",
    "href": "slides/week07.html#regex-lookup-text-pronoun-of-the-patient-cont.-3",
    "title": "Week 7: Regular Expressions and Web Scraping",
    "section": "Regex Lookup text: Pronoun of the patient (cont. 3)",
    "text": "Regex Lookup text: Pronoun of the patient (cont. 3)\n\ntable(mtsamples$pronoun, useNA = \"always\")\n\n\n  he  her  him  his  she them they &lt;NA&gt; \n1073  554   39  524 1261   23   96 1429"
  },
  {
    "objectID": "slides/week07.html#regex-extract-text-type-of-cancer",
    "href": "slides/week07.html#regex-extract-text-type-of-cancer",
    "title": "Week 7: Regular Expressions and Web Scraping",
    "section": "Regex Extract Text: Type of Cancer",
    "text": "Regex Extract Text: Type of Cancer\n\nImagine now that you need to see the types of cancer mentioned in the data.\nFor simplicity, let’s assume that, if specified, it is in the form of TYPE cancer, i.e. single word.\nWe are interested in the word before cancer, how can we capture this?"
  },
  {
    "objectID": "slides/week07.html#regex-extract-text-type-of-cancer-cont-1.",
    "href": "slides/week07.html#regex-extract-text-type-of-cancer-cont-1.",
    "title": "Week 7: Regular Expressions and Web Scraping",
    "section": "Regex Extract Text: Type of Cancer (cont 1.)",
    "text": "Regex Extract Text: Type of Cancer (cont 1.)\nWe can just try to extract the phrase \"[some word] cancer\", in particular, we could use the following regular expression:\n[[:alnum:]-_]{4,}\\s*cancer\nWhere\n\n[[:alnum:]-_]{4,} captures any alphanumeric character, including - and _. Furthermore, for this match to work there must be at least 4 characters,\n\\s* captures 0 or more white-spaces, and\ncancer captures the word cancer"
  },
  {
    "objectID": "slides/week07.html#regex-extract-text-type-of-cancer-cont.-2",
    "href": "slides/week07.html#regex-extract-text-type-of-cancer-cont.-2",
    "title": "Week 7: Regular Expressions and Web Scraping",
    "section": "Regex Extract Text: Type of Cancer (cont. 2)",
    "text": "Regex Extract Text: Type of Cancer (cont. 2)\n\nmtsamples$cancer_type &lt;- str_extract(tolower(mtsamples$keywords), \"[[:alnum:]-_]{4,}\\\\s*cancer\")\ntable(mtsamples$cancer_type)\n\n\n       anal cancer     bladder cancer      breast cancer       colon cancer \n                 1                  8                 21                 14 \nendometrial cancer  esophageal cancer        lung cancer     ovarian cancer \n                 5                  2                 13                  1 \n  papillary cancer    prostate cancer     uterine cancer \n                 3                 17                  7"
  },
  {
    "objectID": "slides/week07.html#fundamentals-of-web-scraping",
    "href": "slides/week07.html#fundamentals-of-web-scraping",
    "title": "Week 7: Regular Expressions and Web Scraping",
    "section": "Fundamentals of Web Scraping",
    "text": "Fundamentals of Web Scraping\nWhat?\n\nWeb scraping, web harvesting, or web data extraction is data scraping used for extracting data from websites – Wikipedia\n\nHow?\n\nThe rvest R package provides various tools for reading and processing web data.\nUnder the hood, rvest is a wrapper of the xml2 and httr R packages.\n\n(in the case of dynamic websites, take a look at selenium)"
  },
  {
    "objectID": "slides/week07.html#web-scraping-raw-html-example",
    "href": "slides/week07.html#web-scraping-raw-html-example",
    "title": "Week 7: Regular Expressions and Web Scraping",
    "section": "Web scraping raw HTML: Example",
    "text": "Web scraping raw HTML: Example\nWe would like to capture the table of COVID-19 death rates per country directly from Wikipedia.\n\nlibrary(rvest)\nlibrary(xml2)\n\n# Reading the HTML table with the function xml2::read_html\ncovid &lt;- read_html(\n  x = \"https://en.wikipedia.org/wiki/COVID-19_pandemic_death_rates_by_country\"\n  )\n\n# Let's look at the the output\ncovid\n\n{html_document}\n&lt;html class=\"client-nojs vector-feature-language-in-header-enabled vector-feature-language-in-main-page-header-disabled vector-feature-page-tools-pinned-disabled vector-feature-toc-pinned-clientpref-1 vector-feature-main-menu-pinned-disabled vector-feature-limited-width-clientpref-1 vector-feature-limited-width-content-enabled vector-feature-custom-font-size-clientpref-1 vector-feature-appearance-pinned-clientpref-1 vector-feature-night-mode-enabled skin-theme-clientpref-day vector-sticky-header-enabled vector-toc-available\" lang=\"en\" dir=\"ltr\"&gt;\n[1] &lt;head&gt;\\n&lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8 ...\n[2] &lt;body class=\"skin--responsive skin-vector skin-vector-search-vue mediawik ..."
  },
  {
    "objectID": "slides/week07.html#web-scraping-raw-html-example-cont.-1",
    "href": "slides/week07.html#web-scraping-raw-html-example-cont.-1",
    "title": "Week 7: Regular Expressions and Web Scraping",
    "section": "Web scraping raw HTML: Example (cont. 1)",
    "text": "Web scraping raw HTML: Example (cont. 1)\n\nWe want to get the HTML table that shows up in the doc. To do so, we can use the function xml2::xml_find_all() and rvest::html_table()\nThe first will locate the place in the document that matches a given XPath expression.\nXPath, XML Path Language, is a query language to select nodes in a XML document.\nA nice tutorial can be found here\nModern Web browsers make it easy to use XPath!\n\nLive Example! (inspect elements in Google Chrome, Mozilla Firefox, Internet Explorer, and Safari)"
  },
  {
    "objectID": "slides/week07.html#web-scraping-with-xml2-and-the-rvest-package-cont.-2",
    "href": "slides/week07.html#web-scraping-with-xml2-and-the-rvest-package-cont.-2",
    "title": "Week 7: Regular Expressions and Web Scraping",
    "section": "Web scraping with xml2 and the rvest package (cont. 2)",
    "text": "Web scraping with xml2 and the rvest package (cont. 2)\nNow that we know the path, let’s use that and extract the table:\n\ntable &lt;- xml_find_all(covid, xpath = '/html/body/div[2]/div/div[3]/main/div[3]/div[3]/div[1]/div[4]/table')\nprint(table) # collection of tables in XML\n\n{xml_nodeset (1)}\n[1] &lt;table class=\"wikitable sortable sort-under static-row-numbers mw-datatab ..."
  },
  {
    "objectID": "slides/week07.html#web-scraping-with-xml2-and-the-rvest-package-cont.-3",
    "href": "slides/week07.html#web-scraping-with-xml2-and-the-rvest-package-cont.-3",
    "title": "Week 7: Regular Expressions and Web Scraping",
    "section": "Web scraping with xml2 and the rvest package (cont. 3)",
    "text": "Web scraping with xml2 and the rvest package (cont. 3)\nWe’re getting closer!\n\ntable &lt;- html_table(table) \nprint(table) # list of tibbles\n\n[[1]]\n# A tibble: 240 × 4\n   Country                `Deaths / million` Deaths    Cases      \n   &lt;chr&gt;                  &lt;chr&gt;              &lt;chr&gt;     &lt;chr&gt;      \n 1 World[a]               892                7,101,788 778,652,552\n 2 Peru                   6,603              221,060   4,532,724  \n 3 Bulgaria               5,679              38,767    1,339,355  \n 4 North Macedonia        5,429              9,991     352,093    \n 5 Bosnia and Herzegovina 5,119              16,406    404,289    \n 6 Hungary                5,072              49,124    2,238,461  \n 7 Croatia                4,810              18,795    1,362,394  \n 8 Slovenia               4,686              9,914     1,364,008  \n 9 Georgia                4,519              17,151    1,864,386  \n10 Montenegro             4,317              2,654     251,280    \n# ℹ 230 more rows"
  },
  {
    "objectID": "slides/week07.html#web-scraping-with-xml2-and-the-rvest-package-cont.-4",
    "href": "slides/week07.html#web-scraping-with-xml2-and-the-rvest-package-cont.-4",
    "title": "Week 7: Regular Expressions and Web Scraping",
    "section": "Web scraping with xml2 and the rvest package (cont. 4)",
    "text": "Web scraping with xml2 and the rvest package (cont. 4)\nThere it is!\n\ntable &lt;- table[[1]]\nprint(table) # hooray!\n\n# A tibble: 240 × 4\n   Country                `Deaths / million` Deaths    Cases      \n   &lt;chr&gt;                  &lt;chr&gt;              &lt;chr&gt;     &lt;chr&gt;      \n 1 World[a]               892                7,101,788 778,652,552\n 2 Peru                   6,603              221,060   4,532,724  \n 3 Bulgaria               5,679              38,767    1,339,355  \n 4 North Macedonia        5,429              9,991     352,093    \n 5 Bosnia and Herzegovina 5,119              16,406    404,289    \n 6 Hungary                5,072              49,124    2,238,461  \n 7 Croatia                4,810              18,795    1,362,394  \n 8 Slovenia               4,686              9,914     1,364,008  \n 9 Georgia                4,519              17,151    1,864,386  \n10 Montenegro             4,317              2,654     251,280    \n# ℹ 230 more rows"
  },
  {
    "objectID": "slides/week07.html#web-apis",
    "href": "slides/week07.html#web-apis",
    "title": "Week 7: Regular Expressions and Web Scraping",
    "section": "* Web APIs",
    "text": "* Web APIs\nWhat?\n\nA Web API is an application programming interface for either a web server or a web browser. – Wikipedia\n\nSome examples include: twitter API, facebook API, Gene Ontology API\nHow?\nYou can request data, the GET method, post data, the POST method, and do many other things using the HTTP protocol.\nHow in R?\nFor this part, we will be using the httr() package, which is a wrapper of the curl() package, which in turn provides access to the curl library that is used to communicate with APIs."
  },
  {
    "objectID": "slides/week07.html#web-apis-with-curl",
    "href": "slides/week07.html#web-apis-with-curl",
    "title": "Week 7: Regular Expressions and Web Scraping",
    "section": "* Web APIs with curl",
    "text": "* Web APIs with curl\n\n  Structure of a URL (source: “HTTP: The Protocol Every Web Developer Must Know - Part 1”)"
  },
  {
    "objectID": "slides/week07.html#web-apis-with-curl-1",
    "href": "slides/week07.html#web-apis-with-curl-1",
    "title": "Week 7: Regular Expressions and Web Scraping",
    "section": "* Web APIs with curl",
    "text": "* Web APIs with curl\nUnder the hood, the httr (and thus curl) sends request somewhat like this\ncurl -X GET https://google.com -w \"%{content_type}\\n%{http_code}\\n\"\nA get request (-X GET) to https://google.com, which also includes (-w) the following: content_type and http_code:\n&lt;HTML&gt;&lt;HEAD&gt;&lt;meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8\"&gt;\n&lt;TITLE&gt;301 Moved&lt;/TITLE&gt;&lt;/HEAD&gt;&lt;BODY&gt;\n&lt;H1&gt;301 Moved&lt;/H1&gt;\nThe document has moved\n&lt;A HREF=\"https://www.google.com/\"&gt;here&lt;/A&gt;.\n&lt;/BODY&gt;&lt;/HTML&gt;\ntext/html; charset=UTF-8\n301\nWe use the httr R package to make life easier."
  },
  {
    "objectID": "slides/week07.html#web-api-example-1-gene-ontology",
    "href": "slides/week07.html#web-api-example-1-gene-ontology",
    "title": "Week 7: Regular Expressions and Web Scraping",
    "section": "* Web API Example 1: Gene Ontology",
    "text": "* Web API Example 1: Gene Ontology\n\nWe will make use of the Gene Ontology API.\nWe want to know what genes (human or not) are involved in the function antiviral innate immune response (go term GO:0140374), looking only at those annotations that have evidence code ECO:0000006 (experimental evidence):\n\n\nlibrary(httr)\ngo_query &lt;- GET(\n  url   = \"http://api.geneontology.org/\",\n  path  = \"api/bioentity/function/GO:0140374/genes\",\n  query = list(\n    evidence          = \"ECO:0000006\",\n    relationship_type = \"involved_in\"\n  ), \n  # May need to pass this option to curl to allow to wait for at least\n  # 60 seconds before returning error.\n  config = config(\n    connecttimeout = 60\n    )\n)\n\nWe could have also passed the full URL directly…"
  },
  {
    "objectID": "slides/week07.html#web-api-example-1-gene-ontology-cont.-1",
    "href": "slides/week07.html#web-api-example-1-gene-ontology-cont.-1",
    "title": "Week 7: Regular Expressions and Web Scraping",
    "section": "* Web API Example 1: Gene Ontology (cont. 1)",
    "text": "* Web API Example 1: Gene Ontology (cont. 1)\nLet’s take a look at the curl call:\ncurl -X GET \"http://api.geneontology.org/api/bioentity/function/GO:0140374/genes?evidence=ECO%3A0000006&relationship_type=involved_in\" -H \"accept: application/json\"\nWhat httr::GET() does:\n&gt; go_query$request\n## &lt;request&gt;\n## GET http://api.geneontology.org/api/bioentity/function/GO:0140374/genes?evidence=ECO%3A0000006&relationship_type=involved_in\n## Output: write_memory\n## Options:\n## * useragent: libcurl/7.58.0 r-curl/4.3 httr/1.4.1\n## * connecttimeout: 60\n## * httpget: TRUE\n## Headers:\n## * Accept: application/json, text/xml, application/xml, */*"
  },
  {
    "objectID": "slides/week07.html#web-api-example-1-gene-ontology-cont.-2",
    "href": "slides/week07.html#web-api-example-1-gene-ontology-cont.-2",
    "title": "Week 7: Regular Expressions and Web Scraping",
    "section": "* Web API Example 1: Gene Ontology (cont. 2)",
    "text": "* Web API Example 1: Gene Ontology (cont. 2)\nLet’s take a look at the response:\n\ngo_query\n\nResponse [https://api.geneontology.org/api/bioentity/function/GO:0140374/genes?evidence=ECO%3A0000006&relationship_type=involved_in]\n  Date: 2025-08-29 14:55\n  Status: 200\n  Content-Type: application/json\n  Size: 116 kB\n\n\nRemember the codes:\n\n1xx: Information message\n2xx: Success\n3xx: Redirection\n4xx: Client error\n5xx: Server error"
  },
  {
    "objectID": "slides/week07.html#web-api-example-1-gene-ontology-cont.-3",
    "href": "slides/week07.html#web-api-example-1-gene-ontology-cont.-3",
    "title": "Week 7: Regular Expressions and Web Scraping",
    "section": "* Web API Example 1: Gene Ontology (cont. 3)",
    "text": "* Web API Example 1: Gene Ontology (cont. 3)\nWe can extract the results using the httr::content() function:\n\ndat &lt;- content(go_query) \ndat &lt;- lapply(dat$associations, function(a) {\n  data.frame(\n    Gene        = a$subject$id,\n    taxon_id    = a$subject$taxon$id,\n    taxon_label = a$subject$taxon$label\n  )\n})\ndat &lt;- do.call(rbind, dat)\nstr(dat)\n\n'data.frame':   100 obs. of  3 variables:\n $ Gene       : chr  \"UniProtKB:H9GKP0\" \"UniProtKB:H9GSI3\" \"UniProtKB:A0A287AMJ0\" \"UniProtKB:A0A287AKR1\" ...\n $ taxon_id   : chr  \"NCBITaxon:28377\" \"NCBITaxon:28377\" \"NCBITaxon:9823\" \"NCBITaxon:9823\" ...\n $ taxon_label: chr  \"Anolis carolinensis\" \"Anolis carolinensis\" \"Sus scrofa\" \"Sus scrofa\" ..."
  },
  {
    "objectID": "slides/week07.html#web-api-example-1-gene-ontology-cont.-4",
    "href": "slides/week07.html#web-api-example-1-gene-ontology-cont.-4",
    "title": "Week 7: Regular Expressions and Web Scraping",
    "section": "* Web API Example 1: Gene Ontology (cont. 4)",
    "text": "* Web API Example 1: Gene Ontology (cont. 4)\nThe structure of the result will depend on the API. In this case, the output was a JSON file, so the content function returns a list in R. In other scenarios it could return an XML object.\n\nknitr::kable(head(dat),\n  caption = \"Genes experimentally annotated with the function\\\n  **antiviral innate immune response** (GO:0140374)\"\n  )\n\n\nGenes experimentally annotated with the function antiviral innate immune response (GO:0140374)\n\n\nGene\ntaxon_id\ntaxon_label\n\n\n\n\nUniProtKB:H9GKP0\nNCBITaxon:28377\nAnolis carolinensis\n\n\nUniProtKB:H9GSI3\nNCBITaxon:28377\nAnolis carolinensis\n\n\nUniProtKB:A0A287AMJ0\nNCBITaxon:9823\nSus scrofa\n\n\nUniProtKB:A0A287AKR1\nNCBITaxon:9823\nSus scrofa\n\n\nUniProtKB:F7EI59\nNCBITaxon:9544\nMacaca mulatta\n\n\nUniProtKB:A0A6I8NTG1\nNCBITaxon:9258\nOrnithorhynchus anatinus"
  },
  {
    "objectID": "slides/week07.html#web-api-example-2-using-tokens",
    "href": "slides/week07.html#web-api-example-2-using-tokens",
    "title": "Week 7: Regular Expressions and Web Scraping",
    "section": "* Web API Example 2: Using Tokens",
    "text": "* Web API Example 2: Using Tokens\n\nSometimes, APIs are not completely open, you need to register.\nThe API may require to login (user+password), or pass a token.\nIn this example, I’m using a token which I obtained here\nYou can find information about the National Centers for Environmental Information API here"
  },
  {
    "objectID": "slides/week07.html#web-api-example-2-using-tokens-cont.-1",
    "href": "slides/week07.html#web-api-example-2-using-tokens-cont.-1",
    "title": "Week 7: Regular Expressions and Web Scraping",
    "section": "* Web API Example 2: Using Tokens (cont. 1)",
    "text": "* Web API Example 2: Using Tokens (cont. 1)\n\nThe way to pass the token will depend on the API service.\nSome require authentication, others need you to pass it as an argument of the query, i.e., directly in the URL.\nIn this case, we pass it on the header.\nThis is equivalent to using the following query\ncurl --header \"token: [YOUR TOKEN HERE]\" \\\n  https://www.ncdc.noaa.gov/cdo-web/api/v2/stations?limit=1000\n\nNote: This won’t run, you need to get your own token"
  },
  {
    "objectID": "slides/week07.html#web-api-example-2-using-tokens-cont.-2",
    "href": "slides/week07.html#web-api-example-2-using-tokens-cont.-2",
    "title": "Week 7: Regular Expressions and Web Scraping",
    "section": "* Web API Example 2: Using Tokens (cont. 2)",
    "text": "* Web API Example 2: Using Tokens (cont. 2)\nAgain, we can recover the data using the content() function:\n\nans &lt;- content(stations_api)\nans$results[[1]]\n## $elevation\n## [1] 139\n## \n## $mindate\n## [1] \"1948-01-01\"\n## \n## $maxdate\n## [1] \"2014-01-01\"\n## \n## $latitude\n## [1] 31.5702\n## \n## $name\n## [1] \"ABBEVILLE, AL US\"\n## \n## $datacoverage\n## [1] 0.8813\n## \n## $id\n## [1] \"COOP:010008\""
  },
  {
    "objectID": "slides/week07.html#web-api-example-3-hhs-health-recommendation",
    "href": "slides/week07.html#web-api-example-3-hhs-health-recommendation",
    "title": "Week 7: Regular Expressions and Web Scraping",
    "section": "* Web API Example 3: HHS health recommendation",
    "text": "* Web API Example 3: HHS health recommendation\nHere is a last example. We will use the Department of Health and Human Services API for “[…] demographic-specific health recommendations” (details at health.gov)\n\nhealth_advises &lt;- GET(\n  url  = \"https://health.gov/\", \n  path = \"myhealthfinder/api/v3/myhealthfinder.json\",\n  query = list(\n    lang = \"en\",\n    age  = \"32\",\n    sex  = \"male\",\n    tobaccoUse = 0\n  ),\n  config = c(\n    add_headers(accept = \"application/json\"),\n    config(connecttimeout = 60)\n  )\n)"
  },
  {
    "objectID": "slides/week07.html#web-api-example-3-hhs-health-recommendation-cont.-1",
    "href": "slides/week07.html#web-api-example-3-hhs-health-recommendation-cont.-1",
    "title": "Week 7: Regular Expressions and Web Scraping",
    "section": "* Web API Example 3: HHS health recommendation (cont. 1)",
    "text": "* Web API Example 3: HHS health recommendation (cont. 1)\nLet’s see the response\n\nhealth_advises\n\nResponse [https://odphp.health.gov/myhealthfinder/api/v3/myhealthfinder.json?lang=en&age=32&sex=male&tobaccoUse=0]\n  Date: 2025-08-29 14:55\n  Status: 200\n  Content-Type: application/json\n  Size: 310 kB\n{\n    \"Result\": {\n        \"Error\": \"MyHealthfinder API version 3 is no longer supported. Please...\n        \"Total\": 18,\n        \"Query\": {\n            \"ApiVersion\": \"3\",\n            \"ApiType\": \"myhealthfinder\",\n            \"TopicId\": null,\n            \"CategoryId\": null,\n            \"Keyword\": null,\n..."
  },
  {
    "objectID": "slides/week07.html#web-api-example-3-hhs-health-recommendation-cont.-2",
    "href": "slides/week07.html#web-api-example-3-hhs-health-recommendation-cont.-2",
    "title": "Week 7: Regular Expressions and Web Scraping",
    "section": "* Web API Example 3: HHS health recommendation (cont. 2)",
    "text": "* Web API Example 3: HHS health recommendation (cont. 2)\n# Extracting the content\nhealth_advises_ans &lt;- content(health_advises)\n\n# Getting the titles\ntxt &lt;- with(health_advises_ans$Result$Resources, c(\n  sapply(all$Resource, \"[[\", \"Title\"),\n  sapply(some$Resource, \"[[\", \"Title\"),\n  sapply(`You may also be interested in these health topics:`$Resource, \"[[\", \"Title\")\n))\ncat(txt, sep = \"; \")\nQuit Smoking; Hepatitis C Screening: Questions for the Doctor; Protect Yourself from Seasonal Flu; Talk with Your Doctor About Depression; Get Your Blood Pressure Checked; Get Tested for HIV; Get Vaccines to Protect Your Health (Adults Ages 19 to 49 Years); Drink Alcohol Only in Moderation; Talk with Your Doctor About Drug Misuse and Substance Use Disorder; Aim for a Healthy Weight; Testing for Syphilis: Questions for the Doctor; Eat Healthy; Protect Yourself from Hepatitis B; Testing for Latent Tuberculosis: Questions for the Doctor; Manage Stress; Alcohol Use: Conversation Starters; Get Active; Quitting Smoking: Conversation Starters"
  },
  {
    "objectID": "slides/week07.html#summary",
    "href": "slides/week07.html#summary",
    "title": "Week 7: Regular Expressions and Web Scraping",
    "section": "Summary",
    "text": "Summary\n\nWe learned about regular expressions with the package stringr (a wrapper of stringi)\nWe can use regular expressions to detect (str_detect()), replace (str_replace()), and extract (str_extract()) expressions.\nWe looked at web scraping using the rvest package (a wrapper of xml2).\nWe extracted elements from the HTML/XML using xml_find_all() with XPath expressions.\nWe also used the html_table() function from rvest to extract tables from HTML documents.\nWe took a quick review on Web APIs and the Hyper-text-transfer-protocol (HTTP).\nWe used the httr R package (wrapper of curl) to make GET requests to various APIs\nWe even showed an example using a token passed via the header.\nOnce we got the responses, we used the content() function to extract the message of the response."
  },
  {
    "objectID": "slides/week07.html#detour-on-curl-options",
    "href": "slides/week07.html#detour-on-curl-options",
    "title": "Week 7: Regular Expressions and Web Scraping",
    "section": "Detour on CURL options",
    "text": "Detour on CURL options\nSometimes you will need to change the default set of options in CURL. You can checkout the list of options in curl::curl_options(). A common hack is to extend the time-limit before dropping the conection, e.g.:\nUsing the Health IT API from the US government, we can obtain the Electronic Prescribing Adoption and Use by County (see docs here)\nThe problem is that it usually takes longer to get the data, so we pass the config option connecttimeout (which corresponds to the flag --connect-timeout) in the curl call (see next slide)"
  },
  {
    "objectID": "slides/week07.html#detour-on-curl-options-cont.-1",
    "href": "slides/week07.html#detour-on-curl-options-cont.-1",
    "title": "Week 7: Regular Expressions and Web Scraping",
    "section": "Detour on CURL options (cont. 1)",
    "text": "Detour on CURL options (cont. 1)\n\nans &lt;- httr::GET(\n  url    = \"https://dashboard.healthit.gov/api/open-api.php\",\n  query  = list(\n    source = \"AHA_2008-2015.csv\",\n    region = \"California\",\n    period = 2015\n    ),\n  config = config(\n    connecttimeout = 60\n    )\n)\n\n&gt; ans$request\n# &lt;request&gt;\n# GET https://dashboard.healthit.gov/api/open-api.php?source=AHA_2008-2015.csv&region=California&period=2015\n# Output: write_memory\n# Options:\n# * useragent: libcurl/7.58.0 r-curl/4.3 httr/1.4.1\n# * connecttimeout: 60\n# * httpget: TRUE\n# Headers:\n# * Accept: application/json, text/xml, application/xml, */*"
  },
  {
    "objectID": "slides/week07.html#regular-expressions-email-validation",
    "href": "slides/week07.html#regular-expressions-email-validation",
    "title": "Week 7: Regular Expressions and Web Scraping",
    "section": "Regular Expressions: Email validation",
    "text": "Regular Expressions: Email validation\nThis is the official regex for email validation implemented by RCF 5322\n(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\n\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?\n:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:(2(5[\n0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9]))\\.){3}(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0\n-9]|[1-9]?[0-9])|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\\nx7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])\nSee the corresponding post in StackOverflow"
  },
  {
    "objectID": "slides/week04.html#acknowledgment",
    "href": "slides/week04.html#acknowledgment",
    "title": "Week 4: Data Visualization",
    "section": "Acknowledgment",
    "text": "Acknowledgment\nThese slides were originally developed by Meredith Franklin (and Paul Marjoram) and modified by George G. Vega Yon."
  },
  {
    "objectID": "slides/week04.html#background",
    "href": "slides/week04.html#background",
    "title": "Week 4: Data Visualization",
    "section": "Background",
    "text": "Background\n\nThis lecture provides an introduction to ggplot2, an R package that provides vastly better graphics options than R’s default plots, histograms, etc.\nThis section is based on chapter 3 of “R for Data Science”"
  },
  {
    "objectID": "slides/week04.html#background-1",
    "href": "slides/week04.html#background-1",
    "title": "Week 4: Data Visualization",
    "section": "Background",
    "text": "Background\nggplot2 is part of the Tidyverse. The tidyverse is…“an opinionated collection of R packages designed for data science. All packages share an underlying design philosophy, grammar, and data structures.” (https://www.tidyverse.org/)\n\nlibrary(tidyverse)\nlibrary(data.table)"
  },
  {
    "objectID": "slides/week04.html#ggplot2",
    "href": "slides/week04.html#ggplot2",
    "title": "Week 4: Data Visualization",
    "section": "ggplot2",
    "text": "ggplot2\nggplot2 is designed on the principle of adding layers."
  },
  {
    "objectID": "slides/week04.html#ggplot2-1",
    "href": "slides/week04.html#ggplot2-1",
    "title": "Week 4: Data Visualization",
    "section": "ggplot2",
    "text": "ggplot2\n\nWith ggplot2 a plot is initiated with the function ggplot()\nThe first argument of ggplot() is the dataset to use in the graph\nLayers are added to ggplot() with +\nLayers include geom functions such as point, lines, etc\nEach geom function takes a mapping argument, which is always paired with aes()\nThe aes() mapping takes the x and y axes of the plot\n\n\nggplot(data = data) +\n    geom_function(mapping = aes(mappings))"
  },
  {
    "objectID": "slides/week04.html#data",
    "href": "slides/week04.html#data",
    "title": "Week 4: Data Visualization",
    "section": "Data",
    "text": "Data\nContinuing with the weather data from last week, let’s take the daily averages at each site, keeping some of the variables. Let’s also create a new variable for region (east and west), categorize elevation, and create a multi-category variable for visibility for exploratory purposes.\n\n# Reading the data, filtering, and replacing bad values with NAs\nmet &lt;- read.csv('../data/met_all.gz')\nmet &lt;- met[met$temp &gt; -10, ]\nmet$elev[met$elev == 9999.0] &lt;- NA\n\n# Creating an aggregated version of the dataset\nlibrary(dplyr)\nmet_avg &lt;- summarize(met,\n                     temp =     mean(temp, na.rm = TRUE),\n                     rh =       mean(rh, na.rm = TRUE),\n                     wind.sp =  mean(wind.sp, na.rm = TRUE),\n                     vis.dist = mean(vis.dist, na.rm = TRUE),\n                     lat =      mean(lat, na.rm = TRUE),\n                     lon =      mean(lon, na.rm = TRUE),\n                     elev =     mean(elev, na.rm = TRUE),\n                     .by = c(USAFID, day))"
  },
  {
    "objectID": "slides/week04.html#basic-scatterplot",
    "href": "slides/week04.html#basic-scatterplot",
    "title": "Week 4: Data Visualization",
    "section": "Basic Scatterplot",
    "text": "Basic Scatterplot\n\nplot(met_avg$temp, met_avg$rh)"
  },
  {
    "objectID": "slides/week04.html#basic-scatterplot-1",
    "href": "slides/week04.html#basic-scatterplot-1",
    "title": "Week 4: Data Visualization",
    "section": "Basic Scatterplot",
    "text": "Basic Scatterplot\nHere’s how to create a basic plot in ggplot2\n\nggplot(data = met_avg) + \n  geom_point(mapping = aes(x = temp, y = rh))\n\n\nWe see that as temperature increases, relative humidity decreases."
  },
  {
    "objectID": "slides/week04.html#basic-scatterplot-2",
    "href": "slides/week04.html#basic-scatterplot-2",
    "title": "Week 4: Data Visualization",
    "section": "Basic Scatterplot 2",
    "text": "Basic Scatterplot 2\n\ngeom_point() adds a layer of points to your plot, to create a scatterplot.\nggplot2 comes with many geom functions that each add a different type of layer to a plot.\nEach geom function in ggplot2 takes a mapping argument. This defines how variables in your dataset are mapped to visual properties.\nThe mapping argument is always paired with aes(), and the x and y arguments of aes() specify which variables to map to the x and y axes. ggplot2 looks for the mapped variables in the data argument, in this case, met_avg\nOne common problem when creating ggplot2 graphics is to put the + in the wrong place: it has to come at the end of the line, not the start."
  },
  {
    "objectID": "slides/week04.html#coloring-by-a-variable---using-aesthetics",
    "href": "slides/week04.html#coloring-by-a-variable---using-aesthetics",
    "title": "Week 4: Data Visualization",
    "section": "Coloring by a variable - using aesthetics",
    "text": "Coloring by a variable - using aesthetics\nYou can map the colors of your points to the class variable to reveal the region of data (west or east). ggplot2 chooses colors, and adds a legend, automatically.\n\nggplot(data = met_avg) + \n  geom_point(mapping = aes(x = temp, y = rh, color = region))\n\n\n\n\n\n\n\n\nWe see that humidity in the east is generally higher than in the west and that the hottest temperatures are in the west."
  },
  {
    "objectID": "slides/week04.html#controlling-point-transparency-using-the-alpha-aesthetic",
    "href": "slides/week04.html#controlling-point-transparency-using-the-alpha-aesthetic",
    "title": "Week 4: Data Visualization",
    "section": "Controlling point transparency using the “alpha” aesthetic",
    "text": "Controlling point transparency using the “alpha” aesthetic\n\nggplot(data = met_avg) + \n  geom_point(mapping = aes(x = temp, y = rh, alpha = 0.3))"
  },
  {
    "objectID": "slides/week04.html#controlling-point-transparency-using-the-alpha-aesthetic-1",
    "href": "slides/week04.html#controlling-point-transparency-using-the-alpha-aesthetic-1",
    "title": "Week 4: Data Visualization",
    "section": "Controlling point transparency using the “alpha” aesthetic",
    "text": "Controlling point transparency using the “alpha” aesthetic\n\nggplot(data = met_avg) + \n  geom_point(mapping = aes(x = temp, y = rh, alpha = rh))"
  },
  {
    "objectID": "slides/week04.html#controlling-point-shape",
    "href": "slides/week04.html#controlling-point-shape",
    "title": "Week 4: Data Visualization",
    "section": "Controlling point shape:",
    "text": "Controlling point shape:\n\nggplot(data = met_avg) + \n  geom_point(mapping = aes(x = temp, y = rh, shape = region))\n\n\nNote that, by default, ggplot uses up to 6 shapes. If there are more, some of your data is not plotted!! (At least it warns you.)"
  },
  {
    "objectID": "slides/week04.html#summary-of-aesthetics",
    "href": "slides/week04.html#summary-of-aesthetics",
    "title": "Week 4: Data Visualization",
    "section": "Summary of aesthetics",
    "text": "Summary of aesthetics\n\n\n\ncode\ndescription\n\n\n\n\nx\nposition on x-axis\n\n\ny\nposition on y-axis\n\n\nshape\nshape\n\n\ncolor\ncolor of element borders\n\n\nfill\ncolor inside of elements\n\n\nsize\nsize\n\n\nalpha\ntransparency\n\n\nlinetype\ntype of line"
  },
  {
    "objectID": "slides/week04.html#base-plot-equivalents",
    "href": "slides/week04.html#base-plot-equivalents",
    "title": "Week 4: Data Visualization",
    "section": "Base plot equivalents",
    "text": "Base plot equivalents\n\n\n\ncode\ndescription\n\n\n\n\nfirst arg / x\nposition on x-axis\n\n\nsecond arg / y\nposition on y-axis\n\n\npch\nshape\n\n\ncol\ncolor of element borders\n\n\nfill\ncolor inside of elements\n\n\ncex\nsize\n\n\nscales::alpha\ntransparency\n\n\nlty\ntype of line"
  },
  {
    "objectID": "slides/week04.html#add-points-to-plot",
    "href": "slides/week04.html#add-points-to-plot",
    "title": "Week 4: Data Visualization",
    "section": "Add points to plot",
    "text": "Add points to plot\nWith base plot, you can add points to an existing plot with points(), which takes the same arguments as plot() for plotting points.\n\nplot(1:10, pch = 16)\npoints(10:1, pch = 16, col = 2)"
  },
  {
    "objectID": "slides/week04.html#facets-1",
    "href": "slides/week04.html#facets-1",
    "title": "Week 4: Data Visualization",
    "section": "Facets 1",
    "text": "Facets 1\nFacets are particularly useful for categorical variables.\n\nmet_avg[!is.na(met_avg$region), ] %&gt;% \n  ggplot() + \n  geom_point(mapping = aes(x = temp, y = rh, color=region)) + \n  facet_wrap(~ region, nrow = 1)"
  },
  {
    "objectID": "slides/week04.html#facets-2",
    "href": "slides/week04.html#facets-2",
    "title": "Week 4: Data Visualization",
    "section": "Facets 2",
    "text": "Facets 2\nOr you can facet on two variables…\n\nmet_avg[!is.na(met_avg$region) & !is.na(met_avg$elev_cat), ] %&gt;% \n  ggplot() + \n  geom_point(mapping = aes(x = temp, y = rh)) + \n  facet_grid(region ~ elev_cat)"
  },
  {
    "objectID": "slides/week04.html#facets-3",
    "href": "slides/week04.html#facets-3",
    "title": "Week 4: Data Visualization",
    "section": "Facets 3",
    "text": "Facets 3\nBase plot is not good at this! You can make multiple plots within a single plotting window by utilizing the layout() function, but you will still have to make each plot manually.\n\nlayout(matrix(1:2, nrow=1))\nplot(met_avg$temp[which(met_avg$region == 'east')], met_avg$rh[which(met_avg$region == 'east')], pch = 16, col = 2)\nplot(met_avg$temp[which(met_avg$region == 'west')], met_avg$rh[which(met_avg$region == 'west')], pch = 16, col = 4)"
  },
  {
    "objectID": "slides/week04.html#geometric-objects-1",
    "href": "slides/week04.html#geometric-objects-1",
    "title": "Week 4: Data Visualization",
    "section": "Geometric objects 1",
    "text": "Geometric objects 1\nGeometric objects are used to control the type of plot you draw. So far we have used scatterplots (via geom_point). But now let’s try plotting a smoothed line fitted to the data (and note how we do side-by-side plots)\n\nlibrary(cowplot)\n\nscatterplot &lt;- ggplot(data = met_avg) + geom_point(mapping = aes(x = temp, y = rh))\nlineplot    &lt;- ggplot(data = met_avg) + geom_smooth(mapping = aes(x = temp, y = rh))\n\nplot_grid(scatterplot, lineplot, labels = \"AUTO\")"
  },
  {
    "objectID": "slides/week04.html#geometric-objects-1-1",
    "href": "slides/week04.html#geometric-objects-1-1",
    "title": "Week 4: Data Visualization",
    "section": "Geometric objects 1",
    "text": "Geometric objects 1\ncowplot is a package due to Claus Wilke, it “… is a simple add-on to ggplot. It provides various features that help with creating publication-quality figures, such as a set of themes, functions to align plots and arrange them into complex compound figures, and functions that make it easy to annotate plots and or mix plots with images.”"
  },
  {
    "objectID": "slides/week04.html#geometric-objects-2",
    "href": "slides/week04.html#geometric-objects-2",
    "title": "Week 4: Data Visualization",
    "section": "Geometric objects 2",
    "text": "Geometric objects 2\nNote that not every aesthetic works with every geom function. But now there are some new ones we can use.\n\nggplot(data = met_avg) + \n  geom_smooth(mapping = aes(x = temp, y = rh, linetype = region))\n\n\nHere we make the line type depend on the region and we clearly see east has higher rh than west, but generally as temperatures increase rh decreases in both regions."
  },
  {
    "objectID": "slides/week04.html#geometric-objects-3",
    "href": "slides/week04.html#geometric-objects-3",
    "title": "Week 4: Data Visualization",
    "section": "Geometric objects 3",
    "text": "Geometric objects 3\nHistograms\n\nhist(met_avg$temp)"
  },
  {
    "objectID": "slides/week04.html#geometric-objects-3-1",
    "href": "slides/week04.html#geometric-objects-3-1",
    "title": "Week 4: Data Visualization",
    "section": "Geometric objects 3",
    "text": "Geometric objects 3\nHistograms\n\nggplot(met_avg) + \n  geom_histogram(mapping = aes(x = temp))"
  },
  {
    "objectID": "slides/week04.html#geometric-objects-4",
    "href": "slides/week04.html#geometric-objects-4",
    "title": "Week 4: Data Visualization",
    "section": "Geometric objects 4",
    "text": "Geometric objects 4\nBoxplots\n\nboxplot(met_avg$temp ~ met_avg$elev_cat)"
  },
  {
    "objectID": "slides/week04.html#geometric-objects-4-1",
    "href": "slides/week04.html#geometric-objects-4-1",
    "title": "Week 4: Data Visualization",
    "section": "Geometric objects 4",
    "text": "Geometric objects 4\nBoxplots\n\nmet_avg[!is.na(met_avg$elev_cat), ] %&gt;% \n  ggplot()+\n  geom_boxplot(mapping=aes(x=elev_cat, y=temp, fill=elev_cat))"
  },
  {
    "objectID": "slides/week04.html#geometric-objects-5",
    "href": "slides/week04.html#geometric-objects-5",
    "title": "Week 4: Data Visualization",
    "section": "Geometric objects 5",
    "text": "Geometric objects 5\nLineplots\n\nplot(met_avg$day[met_avg$elev==4113], met_avg$temp[met_avg$elev==4113], type = 'l')"
  },
  {
    "objectID": "slides/week04.html#geometric-objects-5-1",
    "href": "slides/week04.html#geometric-objects-5-1",
    "title": "Week 4: Data Visualization",
    "section": "Geometric objects 5",
    "text": "Geometric objects 5\nJust as you can add points to an existing plot, you can also add lines()\n\nplot(1:10, pch = 16)\nlines(10:1, col = 2, lwd = 3) # add a thick red line"
  },
  {
    "objectID": "slides/week04.html#geometric-objects-5-2",
    "href": "slides/week04.html#geometric-objects-5-2",
    "title": "Week 4: Data Visualization",
    "section": "Geometric objects 5",
    "text": "Geometric objects 5\nLineplots\n\nggplot(data = met_avg[met_avg$elev==4113, ])+\n geom_line(mapping=aes(x=day, y=temp))"
  },
  {
    "objectID": "slides/week04.html#geometric-objects-5-3",
    "href": "slides/week04.html#geometric-objects-5-3",
    "title": "Week 4: Data Visualization",
    "section": "Geometric objects 5",
    "text": "Geometric objects 5\nPolygons\n\nworld_map &lt;- map_data(\"world\")\nggplot(data = world_map, aes(x = long, y = lat, group = group)) +\n  geom_polygon(fill = \"darkgray\", color = \"white\")"
  },
  {
    "objectID": "slides/week04.html#geometric-objects-5-4",
    "href": "slides/week04.html#geometric-objects-5-4",
    "title": "Week 4: Data Visualization",
    "section": "Geometric objects 5",
    "text": "Geometric objects 5\nPolygons\n\nus_map &lt;- map_data(\"state\")\nggplot(data = us_map, aes(x = long, y = lat, fill = region)) +\n  geom_polygon(color = \"white\")"
  },
  {
    "objectID": "slides/week04.html#geoms---reference",
    "href": "slides/week04.html#geoms---reference",
    "title": "Week 4: Data Visualization",
    "section": "Geoms - reference",
    "text": "Geoms - reference\nggplot2 provides over 40 geoms, and extension packages provide even more (see https://ggplot2.tidyverse.org/reference/ for a sampling).\nThe best way to get a comprehensive overview is the ggplot2 cheatsheet, which you can find at https://github.com/rstudio/cheatsheets/blob/main/data-visualization-2.1.pdf"
  },
  {
    "objectID": "slides/week04.html#multiple-geoms-1",
    "href": "slides/week04.html#multiple-geoms-1",
    "title": "Week 4: Data Visualization",
    "section": "Multiple geoms 1",
    "text": "Multiple geoms 1\nLet’s layer geoms\n\nmet_avg[!is.na(met_avg$region), ] %&gt;%\n  ggplot() + \n  geom_point(mapping = aes(x = temp, y = rh, color = region))+\n  geom_smooth(mapping = aes(x = temp, y = rh, linetype = region))"
  },
  {
    "objectID": "slides/week04.html#multiple-geoms-2",
    "href": "slides/week04.html#multiple-geoms-2",
    "title": "Week 4: Data Visualization",
    "section": "Multiple geoms 2",
    "text": "Multiple geoms 2\nWe can avoid repetition of aesthetics by passing a set of mappings to ggplot(). ggplot2 will treat these mappings as global mappings that apply to each geom in the graph.\n\nmet_avg[!is.na(met_avg$region), ] %&gt;%\n  ggplot(mapping = aes(x = temp, y = rh, color=region, linetype=region)) +\n  geom_point() + \n  geom_smooth()"
  },
  {
    "objectID": "slides/week04.html#multiple-geoms-2-1",
    "href": "slides/week04.html#multiple-geoms-2-1",
    "title": "Week 4: Data Visualization",
    "section": "Multiple geoms 2",
    "text": "Multiple geoms 2\ngeom_smooth() has options. For example if we want a linear regression line we add method=lm\n\nmet_avg[!is.na(met_avg$region), ] %&gt;%\n  ggplot(mapping = aes(x = temp, y = rh, color = region, linetype = region)) +\n  geom_point() + \n  geom_smooth(method = lm, se = FALSE, col = \"black\")"
  },
  {
    "objectID": "slides/week04.html#multiple-geoms-3",
    "href": "slides/week04.html#multiple-geoms-3",
    "title": "Week 4: Data Visualization",
    "section": "Multiple geoms 3",
    "text": "Multiple geoms 3\nIf you place mappings in a geom function, ggplot2 will use these mappings to extend or overwrite the global mappings for that layer only. This makes it possible to display different aesthetics in different layers.\n\nmet_avg[!is.na(met_avg$region), ] %&gt;%\n  ggplot(mapping = aes(x = temp, y = rh)) + \n  geom_point(mapping = aes(color = region)) + \n  geom_smooth()"
  },
  {
    "objectID": "slides/week04.html#multiple-geoms-4",
    "href": "slides/week04.html#multiple-geoms-4",
    "title": "Week 4: Data Visualization",
    "section": "Multiple geoms 4",
    "text": "Multiple geoms 4\nYou can use the same idea to specify different data for each layer. Here, our smooth line displays the full met dataset but the points are colored by visibilty.\n\nmet_avg[!is.na(met_avg$vis_cat), ] %&gt;%\n  ggplot(mapping = aes(x = temp, y = rh, alpha = 0.5)) + \n  geom_point(mapping = aes(color = vis_cat)) + \n  geom_smooth(se = FALSE)"
  },
  {
    "objectID": "slides/week04.html#statistical-transformations---another-example",
    "href": "slides/week04.html#statistical-transformations---another-example",
    "title": "Week 4: Data Visualization",
    "section": "Statistical transformations - another example",
    "text": "Statistical transformations - another example\nYou might want to draw greater attention to the statistical transformation in your code. For example, you might use stat_summary(), which summarises the y values for each unique x value, to draw attention to the summary that you’re computing:\n\nl &lt;- met_avg[!is.na(met_avg$vis_cat) & met_avg$vis_cat != \"clear\", ] %&gt;%\n  ggplot() + \n    stat_summary(mapping = aes(x = vis_cat, y = temp),\n    fun.min = min,\n    fun.max = max,\n    fun = median)"
  },
  {
    "objectID": "slides/week04.html#statistical-transformations---another-example-1",
    "href": "slides/week04.html#statistical-transformations---another-example-1",
    "title": "Week 4: Data Visualization",
    "section": "Statistical transformations - another example",
    "text": "Statistical transformations - another example\n\nl"
  },
  {
    "objectID": "slides/week04.html#position-adjustments",
    "href": "slides/week04.html#position-adjustments",
    "title": "Week 4: Data Visualization",
    "section": "Position adjustments",
    "text": "Position adjustments\nAn option that can be very useful is position = \"jitter\". This adds a small amount of random noise to each point. This spreads out points that might otherwise be overlapping.\n\nnojitter &lt;- ggplot(data = met_avg[1:1000,]) + \n  geom_point(mapping = aes(x = vis_cat, y = temp))\n\njitter &lt;- ggplot(data = met_avg[1:1000,]) + \n  geom_point(mapping = aes(x = vis_cat, y = temp), position = \"jitter\")"
  },
  {
    "objectID": "slides/week04.html#position-adjustments-1",
    "href": "slides/week04.html#position-adjustments-1",
    "title": "Week 4: Data Visualization",
    "section": "Position adjustments",
    "text": "Position adjustments\nAn option that can be very useful is position = \"jitter\". This adds a small amount of random noise to each point. This spreads out points that might otherwise be overlapping.\n\nnojitter &lt;- ggplot(data = met_avg[1:1000,]) + \n  geom_point(mapping = aes(x = vis_cat, y = temp))\n\njitter &lt;- ggplot(data = met_avg[1:1000,]) + \n  geom_point(mapping = aes(x = vis_cat, y = temp), position = \"jitter\")"
  },
  {
    "objectID": "slides/week04.html#position-adjustments-2",
    "href": "slides/week04.html#position-adjustments-2",
    "title": "Week 4: Data Visualization",
    "section": "Position adjustments",
    "text": "Position adjustments\n\nplot_grid(nojitter, jitter, labels = \"AUTO\")"
  },
  {
    "objectID": "slides/week04.html#coordinate-systems",
    "href": "slides/week04.html#coordinate-systems",
    "title": "Week 4: Data Visualization",
    "section": "Coordinate systems",
    "text": "Coordinate systems\nCoordinate systems are one of the more complicated corners of ggplot. To start with something simple, here’s how to flip axes:\n\nunflipped &lt;- ggplot(data = met_avg) + \n  geom_boxplot(mapping = aes(x = vis_cat, y = temp))\n\nflipped &lt;- ggplot(data = met_avg) + \n  geom_boxplot(mapping = aes(x = vis_cat, y = temp)) +\n  coord_flip()"
  },
  {
    "objectID": "slides/week04.html#coordinate-systems-1",
    "href": "slides/week04.html#coordinate-systems-1",
    "title": "Week 4: Data Visualization",
    "section": "Coordinate systems",
    "text": "Coordinate systems\n\nplot_grid(unflipped, flipped, labels = \"AUTO\")"
  },
  {
    "objectID": "slides/week04.html#coordinate-systems-2",
    "href": "slides/week04.html#coordinate-systems-2",
    "title": "Week 4: Data Visualization",
    "section": "Coordinate systems",
    "text": "Coordinate systems\nThere is also the ability to control the aspect ratio using coord_quickmap() and to use polar coordinates with coord_polar().\n\nbar &lt;- ggplot(data = met_avg) + \n  geom_bar(mapping = aes(x = elev_cat, fill = elev_cat), show.legend = FALSE, width = 1) + \n  theme(aspect.ratio = 1) +\n  labs(x = NULL, y = NULL)"
  },
  {
    "objectID": "slides/week04.html#coordinate-systems-3",
    "href": "slides/week04.html#coordinate-systems-3",
    "title": "Week 4: Data Visualization",
    "section": "Coordinate systems",
    "text": "Coordinate systems\n\nbar + coord_flip()\n\n\n\n\n\n\n\nbar + coord_polar()"
  },
  {
    "objectID": "slides/week04.html#modifying-labels",
    "href": "slides/week04.html#modifying-labels",
    "title": "Week 4: Data Visualization",
    "section": "Modifying labels",
    "text": "Modifying labels\n\nggplot(met_avg[!is.na(met_avg$region), ]) +\n  geom_point(aes(temp, rh, color = region)) + \n  labs(title = \"Weather Station Data\") + \n  labs(x = expression(\"Temperature\" *~ degree * C), y = \"Relative Humidity\")"
  },
  {
    "objectID": "slides/week04.html#changing-the-theme",
    "href": "slides/week04.html#changing-the-theme",
    "title": "Week 4: Data Visualization",
    "section": "Changing the Theme",
    "text": "Changing the Theme\n\nggplot(met_avg[!is.na(met_avg$region), ]) +\n  geom_point(aes(temp, rh, color = region)) + \n  labs(title = \"Weather Station Data\") + \n  labs(x = expression(\"Temperature\"*~degree*C), y = \"Relative Humidity\")+\n  theme_bw(base_family = \"Times\")"
  },
  {
    "objectID": "slides/week04.html#changing-the-legend",
    "href": "slides/week04.html#changing-the-legend",
    "title": "Week 4: Data Visualization",
    "section": "Changing the Legend",
    "text": "Changing the Legend\n\nggplot(met_avg[!is.na(met_avg$region), ]) +\n  geom_point(aes(temp, rh, color = region)) + \n  labs(title = \"Weather Station Data\",x = expression(\"Temperature\"*~degree*C), y = \"Relative Humidity\")+\n  scale_color_manual(name=\"Region\", labels=c(\"East\", \"West\"), values=c(\"east\"=\"lightblue\", \"west\"=\"purple\"))+\n  theme_bw(base_family = \"Times\")"
  },
  {
    "objectID": "slides/week04.html#changing-colorscales",
    "href": "slides/week04.html#changing-colorscales",
    "title": "Week 4: Data Visualization",
    "section": "Changing Colorscales",
    "text": "Changing Colorscales\n\nggplot(data = met_avg) + \n  geom_point(mapping=aes(x=temp, y=rh, color=elev))+\n  scale_color_gradient(low=\"blue\", high=\"red\")"
  },
  {
    "objectID": "slides/week04.html#changing-colorscales-1",
    "href": "slides/week04.html#changing-colorscales-1",
    "title": "Week 4: Data Visualization",
    "section": "Changing Colorscales",
    "text": "Changing Colorscales\n\nggplot(data=met_avg) + \n  geom_point(mapping= aes(x=temp, y=rh, color = cut(elev, b=5))) + \n  scale_color_manual(values = viridis::viridis(6))"
  },
  {
    "objectID": "slides/week04.html#a-great-reference",
    "href": "slides/week04.html#a-great-reference",
    "title": "Week 4: Data Visualization",
    "section": "A Great reference",
    "text": "A Great reference\nA great (comprehensive) reference for everything you can do with ggplot2 is the R Graphics Cookbook:\nhttps://r-graphics.org/"
  },
  {
    "objectID": "slides/week04.html#reminder---the-ggplot2-cheatsheet",
    "href": "slides/week04.html#reminder---the-ggplot2-cheatsheet",
    "title": "Week 4: Data Visualization",
    "section": "Reminder - the ggplot2 cheatsheet",
    "text": "Reminder - the ggplot2 cheatsheet\nA briefer summary can be found here:\nhttps://github.com/rstudio/cheatsheets/blob/main/data-visualization-2.1.pdf\nRstudio has a variety of other great Cheatsheets."
  },
  {
    "objectID": "slides/week04.html#maps-with-leaflet",
    "href": "slides/week04.html#maps-with-leaflet",
    "title": "Week 4: Data Visualization",
    "section": "Maps with leaflet",
    "text": "Maps with leaflet\nLet’s create a map of monthly average temperatures at each of the weather stations and color the points by a temperature gradient. We need to create a color palette and we can add a legend.\n\nlibrary(leaflet)\nmet_avg2 &lt;- summarize(met,\n                      temp =     mean(temp, na.rm = TRUE),\n                      lat =      mean(lat, na.rm = TRUE),\n                      lon =      mean(lon, na.rm = TRUE),\n                      .by = c(USAFID))\nmet_avg2 &lt;- met_avg2[!is.na(met_avg2$temp), ]\n\n# Generating a color palette\ntemp.pal &lt;- colorNumeric(c('darkgreen','goldenrod','brown'), domain=met_avg2$temp)\n\ntemp.pal(20)\n\n[1] \"#B69A19\"\n\ntemp.pal\n\nfunction (x) \n{\n    if (length(x) == 0 || all(is.na(x))) {\n        return(pf(x))\n    }\n    if (is.null(rng)) \n        rng &lt;- range(x, na.rm = TRUE)\n    rescaled &lt;- scales::rescale(x, from = rng)\n    if (any(rescaled &lt; 0 | rescaled &gt; 1, na.rm = TRUE)) \n        warning(\"Some values were outside the color scale and will be treated as NA\")\n    if (reverse) {\n        rescaled &lt;- 1 - rescaled\n    }\n    pf(rescaled)\n}\n&lt;bytecode: 0x34660f008&gt;\n&lt;environment: 0x346611938&gt;\nattr(,\"colorType\")\n[1] \"numeric\"\nattr(,\"colorArgs\")\nattr(,\"colorArgs\")$na.color\n[1] \"#808080\""
  },
  {
    "objectID": "slides/week04.html#maps-with-leaflet-1",
    "href": "slides/week04.html#maps-with-leaflet-1",
    "title": "Week 4: Data Visualization",
    "section": "Maps with leaflet",
    "text": "Maps with leaflet\nFor the tile providers, take a look at this site: https://leaflet-extras.github.io/leaflet-providers/preview/\n\ntempmap &lt;- leaflet(met_avg2) %&gt;% \n  # The looks of the Map\n  addProviderTiles('CartoDB.Positron') %&gt;% \n  # Some circles\n  addCircles(\n    lat = ~lat, lng=~lon,\n                                                  # HERE IS OUR PAL!\n    label = ~paste0(round(temp,2), ' C'), color = ~ temp.pal(temp),\n    opacity = 1, fillOpacity = 1, radius = 500\n    ) %&gt;%\n  # And a pretty legend\n  addLegend('bottomleft', pal=temp.pal, values=met_avg2$temp,\n          title='Temperature, C', opacity=1)"
  },
  {
    "objectID": "slides/week04.html#maps-with-leaflet-2",
    "href": "slides/week04.html#maps-with-leaflet-2",
    "title": "Week 4: Data Visualization",
    "section": "Maps with leaflet",
    "text": "Maps with leaflet\n\ntempmap"
  },
  {
    "objectID": "slides/week01.html#r-in-the-terminal",
    "href": "slides/week01.html#r-in-the-terminal",
    "title": "Welcome!",
    "section": "R in the terminal",
    "text": "R in the terminal"
  },
  {
    "objectID": "slides/week01.html#r-rstudio",
    "href": "slides/week01.html#r-rstudio",
    "title": "Welcome!",
    "section": "R + RStudio",
    "text": "R + RStudio"
  },
  {
    "objectID": "slides/week02.html#what-is-version-control",
    "href": "slides/week02.html#what-is-version-control",
    "title": "Version control and reproducible research",
    "section": "What is version control?",
    "text": "What is version control?\n\n\n\n\n[I]s the management of changes to documents […] Changes are usually identified by a number or letter code, termed the “revision number”, “revision level”, or simply “revision”. For example, an initial set of files is “revision 1”. When the first change is made, the resulting set is “revision 2”, and so on. Each revision is associated with a timestamp and the person making the change. Revisions can be compared, restored, and with some types of files, merged. – Wikipedia"
  },
  {
    "objectID": "slides/week02.html#why-do-we-care",
    "href": "slides/week02.html#why-do-we-care",
    "title": "Version control and reproducible research",
    "section": "Why do we care",
    "text": "Why do we care\nHave you ever:\n\nMade a change to code, realised it was a mistake and wanted to revert back?\nLost code or had a backup that was too old?\nHad to maintain multiple versions of a product?\nWanted to see the difference between two (or more) versions of your code?\nWanted to prove that a particular change broke or fixed a piece of code?\nWanted to review the history of some code?"
  },
  {
    "objectID": "slides/week02.html#why-do-we-care-contd",
    "href": "slides/week02.html#why-do-we-care-contd",
    "title": "Version control and reproducible research",
    "section": "Why do we care (cont’d)",
    "text": "Why do we care (cont’d)\n\nWanted to submit a change to someone else’s code?\nWanted to share your code, or let other people work on your code?\nWanted to see how much work is being done, and where, when and by whom?\nWanted to experiment with a new feature without interfering with working code?\n\nIn these cases, and no doubt others, a version control system should make your life easier.\n– Stackoverflow (by si618)"
  },
  {
    "objectID": "slides/week02.html#git-the-stupid-content-tracker",
    "href": "slides/week02.html#git-the-stupid-content-tracker",
    "title": "Version control and reproducible research",
    "section": "Git: The stupid content tracker",
    "text": "Git: The stupid content tracker\n\n\n \n\n\nGit logo and Linus Torvalds, creator of git"
  },
  {
    "objectID": "slides/week02.html#git-the-stupid-content-tracker-1",
    "href": "slides/week02.html#git-the-stupid-content-tracker-1",
    "title": "Version control and reproducible research",
    "section": "Git: The stupid content tracker",
    "text": "Git: The stupid content tracker\n\nDuring this class (and perhaps, the entire program) we will be using Git.\nGit is used by most developers in the world.\nA great reference about the tool can be found here\nMore on what’s stupid about git here."
  },
  {
    "objectID": "slides/week02.html#how-can-i-use-git",
    "href": "slides/week02.html#how-can-i-use-git",
    "title": "Version control and reproducible research",
    "section": "How can I use Git",
    "text": "How can I use Git\nThere are several ways to include Git in your work-pipeline. A few are:\n\nThrough command line\nThrough one of the available Git GUIs:\n\nRStudio (link)\nGit-Cola (link)\nGithub Desktop (Link)\n\n\nMore alternatives here."
  },
  {
    "objectID": "slides/week02.html#basic-commands",
    "href": "slides/week02.html#basic-commands",
    "title": "Version control and reproducible research",
    "section": "Basic commands",
    "text": "Basic commands"
  },
  {
    "objectID": "slides/week02.html#a-common-workflow",
    "href": "slides/week02.html#a-common-workflow",
    "title": "Version control and reproducible research",
    "section": "A Common workflow",
    "text": "A Common workflow\n\nStart the session by pulling (possible) updates: git pull\nMake changes\n\n(optional) Add untracked (possibly new) files: git add [target file]\n(optional) Stage tracked files that were modified: git add [target file]\n(optional) Revert changes on a file: git checkout [target file]\n\nMove changes to the staging area (optional): git add\nCommit:\n\nIf nothing pending: git commit -m \"Your comments go here.\"\nIf modifications not staged: git commit -a -m \"Your comments go here.\"\n\nUpload the commit to the remote repo: git push."
  },
  {
    "objectID": "slides/week02.html#first-time",
    "href": "slides/week02.html#first-time",
    "title": "Version control and reproducible research",
    "section": "First time",
    "text": "First time"
  },
  {
    "objectID": "slides/week02.html#the-rest-of-the-time",
    "href": "slides/week02.html#the-rest-of-the-time",
    "title": "Version control and reproducible research",
    "section": "The rest of the time",
    "text": "The rest of the time"
  },
  {
    "objectID": "slides/week02.html#check-the-status",
    "href": "slides/week02.html#check-the-status",
    "title": "Version control and reproducible research",
    "section": "Check the status",
    "text": "Check the status\n\nCan’t remember if you’ve changed any files?\nDon’t know if your local repository is in sync with the remote repository?\n\nYou can always check the current state of your repository with git status!"
  },
  {
    "objectID": "slides/week02.html#hands-on-0-introduce-yourself",
    "href": "slides/week02.html#hands-on-0-introduce-yourself",
    "title": "Version control and reproducible research",
    "section": "Hands-on 0: Introduce yourself",
    "text": "Hands-on 0: Introduce yourself\nSet up your git install with git config, start by telling who you are\n$ git config --global user.name \"Juan Perez\"\n$ git config --global user.email \"jperez@treschanchitos.edu\"\nTry it yourself (5 minutes) (more on how to configure git here)"
  },
  {
    "objectID": "slides/week02.html#hands-on-1-first-repository",
    "href": "slides/week02.html#hands-on-1-first-repository",
    "title": "Version control and reproducible research",
    "section": "Hands-on 1: First repository",
    "text": "Hands-on 1: First repository\nWe will start by working on our very first project. To do so, you are required to start using Git and Github so you can share your code with your team. For this exercise, you need to\n\nLog into GitHub and click on the “plus” icon (“Create new…”) in the top right, then select “New repository”\nGive your repo a name, like PM566-first-project, tell GitHub to add a README file, and click “Create repository”\nFrom your repository’s page, click the green “Code” button and copy the URL, which should end with .git\nFrom the command line on your computer, type git clone and then paste the URL\n\nYou now have a local version of your repository!"
  },
  {
    "objectID": "slides/week02.html#hands-on-1-first-repository-1",
    "href": "slides/week02.html#hands-on-1-first-repository-1",
    "title": "Version control and reproducible research",
    "section": "Hands-on 1: First repository",
    "text": "Hands-on 1: First repository\nNow, let’s make some changes!\n\nOpen the README file in a text editor and add a brief description of the project (this doesn’t have to be accurate, just add some text), then save your changes. If you check the git status now, you’ll see that you have unstaged changes.\nAdd your changes to the staging area with git add README or git add --all. If you check the git status now, you’ll see that you have staged changes, ready to commit.\n\nNote 1: We are assuming that you already installed git in your system.\nNote 2: Need a text editor? Checkout this website link."
  },
  {
    "objectID": "slides/week02.html#hands-on-1-first-repository-2",
    "href": "slides/week02.html#hands-on-1-first-repository-2",
    "title": "Version control and reproducible research",
    "section": "Hands-on 1: First repository",
    "text": "Hands-on 1: First repository\n\nMake the first commit using the git commit command adding a message, e.g.\n\n$ git commit -m \"My first commit ever!\"\nIf you check the git status now, you’ll see that you are 1 commit ahead of the remote repository (GitHub).\n\nUpdate your remote repository (on GitHub) with git push. If you check the git status now, you should see that you are fully up to date.\nIn your browser, refresh the page for your repository and see if your changes to the README file are there!"
  },
  {
    "objectID": "slides/week02.html#hands-on-1-first-repository-3",
    "href": "slides/week02.html#hands-on-1-first-repository-3",
    "title": "Version control and reproducible research",
    "section": "Hands-on 1: First repository",
    "text": "Hands-on 1: First repository\nOops! It seems that I added the wrong file to the tree, you can remove files from the tree using git rm --cached, for example, imagine that you added the file class-notes.docx (which you are not supposed to track), then you can remove it using\n$ git rm --cached class-notes.docx\nThis will remove the file from the tree but not from your computer. You can go further and ask git to avoid adding .docx files using the .gitignore file"
  },
  {
    "objectID": "slides/week02.html#gitignore-use-case",
    "href": "slides/week02.html#gitignore-use-case",
    "title": "Version control and reproducible research",
    "section": ".gitignore use-case",
    "text": ".gitignore use-case\nI like to have my data and code for a project all in the same place, but I don’t want to upload the data to GitHub, as this would exceed the size limit on a repository.\nOpen (or create) the .gitignore file in a text editor and add the following line to ignore the directory called data:\ndata/"
  },
  {
    "objectID": "slides/week02.html#example-for-.gitignore",
    "href": "slides/week02.html#example-for-.gitignore",
    "title": "Version control and reproducible research",
    "section": "Example for .gitignore",
    "text": "Example for .gitignore\nTelling git to ignore files is a good way to make sure you don’t go over your storage limit on GitHub. It’s also just a convenient way to avoid unnecessary clutter. Example based on Pro-Git (link).\n# ignore specific file (something.pdf)\nsomething.pdf\n\n# ignore all .png files\n*.png\n\n# but do track bird.png, even though you're ignoring .png files\n!bird.png\n\n# only ignore the TODO file in the root directory, not subdir/TODO\n/TODO\n\n# ignore all files in any directory named build\nbuild/\n\n# ignore doc/notes.txt, but not doc/server/arch.txt\ndoc/*.txt\n\n# ignore all .pdf files in the doc/ directory and any of its subdirectories\ndoc/**/*.pdf"
  },
  {
    "objectID": "slides/week02.html#lets-do-the-same-sequence-of-tasks-we-just-performed-but-this-time-using-github-desktop.",
    "href": "slides/week02.html#lets-do-the-same-sequence-of-tasks-we-just-performed-but-this-time-using-github-desktop.",
    "title": "Version control and reproducible research",
    "section": "Let’s do the same sequence of tasks we just performed, but this time, using GitHub Desktop.",
    "text": "Let’s do the same sequence of tasks we just performed, but this time, using GitHub Desktop."
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "R. A platform for statistical computing.\nRStudio. An IDE for R. The most straightforward way to get into using R and Quarto.\nR Graphics Cookbook. Complete guide to plotting data with ggplot.\nR Style Guide. Write readable code.\nRStudio Cheatsheets Other quick guides, including information about using RStudio’s IDE and some of the main tools in R."
  },
  {
    "objectID": "references.html#r",
    "href": "references.html#r",
    "title": "References",
    "section": "",
    "text": "R. A platform for statistical computing.\nRStudio. An IDE for R. The most straightforward way to get into using R and Quarto.\nR Graphics Cookbook. Complete guide to plotting data with ggplot.\nR Style Guide. Write readable code.\nRStudio Cheatsheets Other quick guides, including information about using RStudio’s IDE and some of the main tools in R."
  },
  {
    "objectID": "references.html#quarto",
    "href": "references.html#quarto",
    "title": "References",
    "section": "Quarto",
    "text": "Quarto\n\nQuarto An integrated, open-source publishing system. Generalizes and expands upon a lot of the functionality of RMarkdown.\nQuarto Guide Comprehensive guide to creating a wide range of documents and presentations with Quarto."
  },
  {
    "objectID": "references.html#git-github",
    "href": "references.html#git-github",
    "title": "References",
    "section": "Git / GitHub",
    "text": "Git / GitHub\n\nGit. Version control system. Installs with Apple’s Developer Tools, or get the latest version via Homebrew.\nGitHub. Host public Git repositories for free. Pay to host private ones. Also a source for publicly available code (e.g. R packages and utilities) written by other people.\nGitHub Docs Tutorials for performing various actions using git and GitHub, from beginner to advanced."
  },
  {
    "objectID": "references.html#markdown-r-markdown",
    "href": "references.html#markdown-r-markdown",
    "title": "References",
    "section": "Markdown / R Markdown",
    "text": "Markdown / R Markdown\n\nMarkdown tutorial: An interactive tutorial to practice using Markdown.\nMarkdown cheatsheet: Useful one-page reminder of Markdown syntax.\nR Markdown Cheatsheet An overview of Markdown and RMarkdown conventions.\nR Markdown documentation from the makers of RStudio. Lots of good examples."
  },
  {
    "objectID": "references.html#data-science",
    "href": "references.html#data-science",
    "title": "References",
    "section": "Data Science",
    "text": "Data Science\n\nViridical Data Science Great book on the practice of data science by Bin Yu and Rebecca Barter.\nR Programming for Data Science Book on using R for data science, by Roger Peng.\nJenny Bryan’s Stat 545. Notes and tutorials for a Data Analysis course taught by Jennifer Bryan at the University of British Columbia. Lots of useful material.\nThe Plain Person’s Guide to Plain Text Social Science: Why you should write data-based reports using plain-text tools.\nKarl Broman’s Tutorials and Guides Accurate and concise guides to many of the tools and topics described here, including getting started with reproducible research, using git and GitHub, and working with knitr.\nMakefiles for OCR and converting Shapefiles. Some further examples of Makefiles in the data-analysis pipeline, by Lincoln Mullen"
  },
  {
    "objectID": "references.html#tools",
    "href": "references.html#tools",
    "title": "References",
    "section": "Tools",
    "text": "Tools\n\nApple’s Developer Tools Unix toolchain. Install directly with xcode-select --install, or just try to use e.g. git from the terminal and have OS X prompt you to install the tools.\nHomebrew package manager. A convenient way to install several of the tools here, including Emacs and Pandoc.\nR. A platform for statistical computing.\nPython and SciPy. Python is a general-purpose programming language increasingly used in data manipulation and analysis.\nRStudio. An IDE for R. The most straightforward way to get into using R and RMarkdown.\nTeX and LaTeX. A typesetting and document preparation system. You can write files in .tex format directly, but it is more useful to just have it available in the background for other tools to use. The MacTeX Distribution is the one to install for macOS.\nPandoc. Converts plain-text documents to and from a wide variety of formats. Can be installed with Homebrew. Be sure to also install pandoc-citeproc for processing citations and bibliographies, and pandoc-crossref for producing cross-references and labels.\nGit. Version control system. Installs with Apple’s Developer Tools, or get the latest version via Homebrew.\nGitHub. Host public Git repositories for free. Pay to host private ones. Also a source for publicly available code (e.g. R packages and utilities) written by other people.\nGNU Make. You tell make what the steps are to create the pieces of a document or program. As you edit and change the various pieces, it automatically figures out which pieces need to be updated and recompiled, and issues the commands to do that. See Karl Broman’s Minimal Make for a short introduction. Make will be installed automatically with Apple’s developer tools.\nlintr and flycheck. Tools that nudge you to write neater code.\nZotero. A citation manager that incorporates PDF storage, annotation, and other features. Zotero is free to use and can export to BibTeX/BibLaTeX files."
  },
  {
    "objectID": "references.html#paid-applications-and-services",
    "href": "references.html#paid-applications-and-services",
    "title": "References",
    "section": "Paid Applications and Services",
    "text": "Paid Applications and Services\n\nBackblaze. Secure off-site backup.\nMarked 2. Live HTML previewing of Markdown documents. Mac OS X only.\nSublime Text. Python-based text editor.\nMendeley, and Papers are additional citation managers that incorporate PDF storage, annotation, and other features. Mendeley has a premium tier. Papers is a paid application after a trial period. I haven’t used either of these, so I can’t confirm whether or not they export to BibTeX/BibLaTeX files. Papers can supposedly output citation keys in pandoc’s format, among several others."
  },
  {
    "objectID": "references.html#data",
    "href": "references.html#data",
    "title": "References",
    "section": "Data",
    "text": "Data\nMany of these websites offer publicly available datasets that can be used for research or class projects.\n\nHealth and Biological data\n\nCDC National Center for Health Statistics\nNIH Cancer Surveillance\nWorld Health Organization WHO data\nUniProt data\nThe Gene Ontology Project\nGene Expression Omnibus Data\nUS Center for Disease Control and Prevention Data\nCalifornia Health and Human Services Open Data Portal\nCovid Data CovidTracker\nUSC Sustainability Data\nBureau of Transportation Statistics\n\n\n\nAcademic Publications and related\n\nFigshare data repository\nZenodo data repository\nHarvard Dataverse\nElsevier Developers API\n\n\n\nGovernment data\n\nUS Open Data Initiative DATA.GOV\nCensus Data Explorer and National Historical Geographic Information System (NHGIS)\nBureau of Economic Analysis\nBureau of Labor Statistics\nHousing data Zillow\nBureau of Justice Statistics National Center for Education Statistics: The Nation’s Report Card\nLos Angeles city data\nLos Angeles crime data\n\n\n\nOther data\n\nWorld Bank open data\nInter-university Consortium for Political and Social Research (ICPSR)\nFiveThirtyEight open data\nKaggle datasets\nLiterally all of Wikipedia\n\n\n\nSocial Networks\n\nGitHub Developers API\nInstagram Developers API\nLinkedIn Developers API"
  }
]