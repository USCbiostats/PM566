---
title: "Lab 4 - Data Visualization"
link-citations: true
toc: false
---

```{r, echo = FALSE}
# Set to TRUE if you want the blocks to be evaluated 
EVAL <- FALSE
ECHO <- EVAL
```


```{r setup, message=FALSE, echo = ECHO, warning=FALSE, eval = EVAL}
#install.packages(c("leaflet"))
library(leaflet)
library(tidyverse)
```

# Learning Goals

- Read in and prepare the meteorological dataset
- Create several graphs with different `geoms()` in `ggplot2`
- Create a facet graph
- Customize your plots
- Create a detailed map


# Lab Description

We will again work with the meteorological data presented in lecture.

**The objective of the lab is to examine the association between weekly average dew point and wind speed in four regions of the US and by elevation.**

Per [Wikipedia](https://en.wikipedia.org/wiki/Dew_point): "The dew point of a
given body of air is the temperature to which it must be cooled to become
saturated with water vapor. This temperature depends on the pressure and water
content of the air."

Again, feel free to supplement your knowledge of this dataset by checking out
the [data
dictionary](https://github.com/USCbiostats/data-science-data/blob/master/02_met/met-datadictionary.pdf).


# Steps

### 1. Read in the data

First download and then read in with `read.csv()`

```{r, echo = TRUE, message=FALSE, eval = EVAL}
if (!file.exists("met_all.gz"))
  download.file(
    url = "https://raw.githubusercontent.com/USCbiostats/data-science-data/master/02_met/met_all.gz",
    destfile = "met_all.gz",
    method   = "libcurl",
    timeout  = 60
    )
met <- read.csv("met_all.gz")
```

### 2. Prepare the data

- Remove temperatures less than -17C
- Make sure there is no missing data in the key variables coded as 9999, 999, etc.
- Generate a date variable using the functions `as.Date()` (hint: You will need the following to create a date `paste(year, month, day, sep = "-")`).
- Subset the data to keep only the observations from the first week (ie. first 7 days) of the month.
- Compute the mean by station of the variables `temp`, `rh`, `wind.sp`, `vis.dist`, `dew.point`, `lat`,
`lon`, and `elev`.
- Create a region variable for NW, SW, NE, SE based on `lon` = $-98.00$ and `lat` = $39.71$ degrees
- Create a categorical variable for elevation as in the lecture slides

```{r, eval = EVAL, echo = ECHO}
met <- met[met$temp > -17, ]
met$elev[met$elev == 9999.0] <- NA
met$date <- as.Date(paste(met$year, met$month, met$day, sep = "-"))
met <- met[met$day <= 7, ]

met_avg <- summarize(met,
                     temp = mean(temp, na.rm=TRUE), 
                     rh = mean(rh, na.rm=TRUE),
                     wind.sp = mean(wind.sp, na.rm=TRUE), 
                     vis.dist = mean(vis.dist, na.rm=TRUE),
                     dew.point = mean(dew.point, na.rm=TRUE),
                     lat = mean(lat, na.rm=TRUE),
                     lon = mean(lon, na.rm=TRUE),
                     elev = mean(elev, na.rm=TRUE),
                     .by="USAFID")

met_avg$elev_cat <- ifelse(met_avg$elev> 252, "high", "low")

met_avg$region <- ifelse(met_avg$lon > -98 & met_avg$lat >39.71, "north east",
                         ifelse(met_avg$lon > -98 & met_avg$lat < 39.71, "south east",
                                ifelse(met_avg$lon < -98 & met_avg$lat >39.71, "north west", "south west")))

table(met_avg$region)

```

### 3. Use `geom_violin` to examine the wind speed and dew point by region

You saw how to use `geom_boxplot` in class. Try using `geom_violin` instead (take a look at the help).
(hint: you will need to set the `x` aesthetic to 1)

- Use facets
- Make sure to deal with `NA`s
- Describe what you observe in the graph

```{r, eval = EVAL, echo = ECHO}
met_avg |>
  filter(!is.na(wind.sp)) |>
ggplot()+
  geom_violin(mapping = aes(y=wind.sp, x=1)) +
  facet_wrap(~region, nrow=2)

met_avg |>
  filter(!is.na(dew.point)) |>
ggplot()+
  geom_violin(mapping = aes(y=dew.point, x=1, fill=region)) +
  facet_wrap(~region, nrow=2)
```


### 4. Use `geom_point` with `stat_smooth` to examine the association between dew point and wind speed by region

- Color points by region
- Make sure to deal with `NA`s
- Fit a linear regression line by region
- Describe what you observe in the graph

```{r, eval = EVAL, echo = ECHO}
met_avg |>
filter(!is.na(region)) |>
  ggplot(mapping = aes(x=dew.point, y=rh, color=region))+
  geom_point() + 
  stat_smooth(method=lm)
  
```


### 5. Use `geom_bar` to create barplots of the weather stations by elevation category colored by region

- Bars by elevation category using `position="dodge"`
- Change colors from the default. Color by region using `scale_fill_brewer` see [this](http://rstudio-pubs-static.s3.amazonaws.com/5312_98fc1aba2d5740dd849a5ab797cc2c8d.html)
- Create nice labels on the axes and add a title
- Describe what you observe in the graph
- Make sure to deal with `NA` values

```{r warning=FALSE, message=FALSE, eval = EVAL, echo = ECHO}
met_avg |>
filter(!is.na(region)) |>
  ggplot()+
  geom_bar(mapping=aes(x=elev_cat,fill=region), position = "dodge")+
  scale_fill_brewer(palette = "PuOr")+
  labs(title="Number of weather stations by elevation category and region", x="Elevation Category", y= "Count")+
  theme_bw()

```

### 6. Use `stat_summary` to examine mean dew point and wind speed by region with standard deviation error bars

- Make sure to remove `NA`s
- Use `fun.data="mean_sdl"` in `stat_summary`
- Add another layer of `stats_summary` but change the geom to `"errorbar"` (see the help).
- Describe the graph and what you observe

```{r, eval = EVAL, echo = ECHO}
met_avg |>
filter(!is.na(region)) |>
  ggplot(mapping=aes(x=region, y=dew.point)) +
  stat_summary(fun.data="mean_sdl", geom="errorbar") +
  stat_summary(fun.data="mean_sdl")
```

- Dew point is...
- Wind speed is...

### 7. Make a map showing the spatial trend in relative humidity in the US

- Make sure to remove `NA`s
- Use `leaflet()` or `ggplot2`
- Make a color palette with custom colors
- Use `addMarkers` or `geom_point` to include the top 10 places in relative humidity (hint: this will be useful `rank(-rh) <= 10`)
- Add a legend

```{r, eval = EVAL, echo = ECHO}
met_avg2 <- met_avg[!is.na(met_avg$rh), ]

# Top ten
top10 <- met_avg2[rank(-met_avg2$rh) <= 10, ]

rh_pal = colorNumeric(c('blue','purple','red'), domain=met_avg2$rh)
leaflet(met_avg2) |>
  addProviderTiles('OpenStreetMap') |>
  addCircles(lat=~lat, lng=~lon, color=~rh_pal(rh), label=~paste0(round(rh,2), ' rh'), opacity=1,fillOpacity=1, radius=500) |>
  addMarkers(lat=~lat, lng=~lon, label=~paste0(round(rh,2), ' rh'), data = top10) |>
  addLegend('bottomleft',pal=rh_pal, values=met_avg2$rh, title="Relative Humidity", opacity=1)

```

- Describe the trend in RH across the US

### 8. Use a ggplot extension

- Pick an extension (except `cowplot`) from [here](https://exts.ggplot2.tidyverse.org/gallery/) and make a plot of your choice using the met data (or met_avg)
- You might want to try examples that come with the extension first (e.g. `ggtech`, `gganimate`, `ggforce`)

