---
title: "SQL"
subtitle: "PM566 - Week 9"
author: "Emil Hvitfeldt, George G. Vega Yon, Kelly Street"
format:
  revealjs:
    theme: default
    fig-width: 7
    fig-align: center
engine: knitr
---

```{r include=FALSE}
library(knitr)
hook_output <- knit_hooks$get("output")
knit_hooks$set(output = function(x, options) {
  lines <- options$output.lines
  if (is.null(lines)) {
    return(hook_output(x, options))  # pass to default hook
  }
  x <- unlist(strsplit(x, "\n"))
  more <- "..."
  if (length(lines) == 1) {        # first n lines
    if (length(x) > lines) {
      # truncate the output, but add ....
      x <- c(head(x, lines), more)
    }
  } else {
    x <- c(more, x[lines], more)
  }
  # paste these lines together
  x <- paste(c(x, ""), collapse = "\n")
  hook_output(x, options)
})
knit_hooks$set(output = function(x, options) {
  # this hook is used only when the linewidth option is not NULL
  if (!is.null(n <- options$linewidth)) {
    x = knitr:::split_lines(x)
    # any lines wider than n should be wrapped
    if (any(nchar(x) > n)) x = strwrap(x, width = n)
    x = paste(x, collapse = '\n')
  }
  hook_output(x, options)
})

opts_chunk$set(
  echo = TRUE,
  fig.width = 7, 
  fig.align = 'center',
  fig.asp = 0.618, # 1 / phi
  out.width = "700px")
```

```{css, include=FALSE}
.orange {color: #EF8633}
```

```{r, echo=FALSE}
library(RSQLite)
library(DBI)

# Initialize a temporary in memory database
con <- dbConnect(SQLite(), ":memory:")

dbWriteTable(con, "penguins", palmerpenguins::penguins)
```

## Acknowledgment

These slides were originally developed by Emil Hvitfeldt.

---

# Plan for the week

- See what relational databases are
- How to query a relational database with SQL
- Similarities between SQL and dplyr

---

# NOTE 

SQL is a full language with 100's of commands.
We will not be able to cover everything.
We are going to look at a small sample to showcase the powers, capabilities and similarities to `dplyr`.

---

## Optional reading material

![](img/learning-sql.jpg)

---

# Database


## Simple definition

> A set of related information

<br>

Examples include:

- phone book
- Dictionary
- Cookbook

---

# Order / indexing matters

The ordering of the entries will make some tasks easier and some harder.

A phone book makes it easy to find a person if you know the name, but not if you only know the address

Dictionaries are not helpful to find the longest words

Once the book is printed then it starts going out of date

---

## Hierarchical database system


![](img/hierarchical.JPG)

---

## Network database system

![](img/network.JPG)


---

## Relational database system

![](img/relational.JPG)


---

All of these systems contain 4 entities

- `customer`
- `product`
- `account`
- `transaction`

Each table in a relational database contains information that uniquely identifies that row in the table (primary key).

---

# Relation between tables

Some columns contain shared information across tables.

These columns are called *foreign keys* and they serve the purpose of connecting the rows in different tables together.

---

## Terminology{.smaller}

- **Entity** - Something of interest to the users
- **Column** - An individual piece of data stored in a table
- **Row** - A set of columns that together completely describe an entity or some action on an entity. Also called a **record**
- **Table** - A set of rows
- **Result key** - Another name for a non-persistent table, generally the result of a SQL query
- **Primary key** - One or more columns that can be used as a unique identifier for each row in a table
- **Foreign key** - One or more columns that can be used together to identify a single row in another table

---

# What is SQL?

A language created to manipulate data in relational databases.

Over 40 years old.

The American National Standards Institute (ANSI) have developed standards for SQL.

---

## A Nonprocedural Language

In R we are used to being able to define variables, use conditional logic (if, if-else, while), looping/iteration and writing functions.

In general are we in complete control of what the code is doing.

---

## A Nonprocedural Language (cont.)

We give up some of that when using SQL.

When using SQL then we specify the input and output we desire, the this is sent to your database engine known as the **optimizer**

The optimizer figures out the best way to get from input to output

---

# Different databases

There are different SQL databases that operate slightly different. MySQL, PostgreSQL, MariaDB, SQLite.

We will try to give a general overview.

Google is your friend.

All examples shown with SQLite.

---

## SQL query clauses

- **SELECT** Determines which columns to include the query's result set
- **FROM** Identifies the tables from which to retrieve data and how the tables should be joined
- **WHERE** Filters out unwanted data
- **GROUP BY** Used to group rows together by common column values
- **HAVING** Filters out unwanted groups
- **ORDER BY** Sorts the rows of the final result set by one or more columns

---

## Pengiuns data

```{r, echo=TRUE}
head(as.data.frame(palmerpenguins::penguins))
```

---

## Select clause

```{sql, connection=con, output.var="x1"}
SELECT species, island, bill_length_mm
FROM penguins
```

```{r, echo=FALSE}
x1
```

---

## Select clause

```{sql, connection=con, output.var="x2"}
SELECT *
FROM penguins
```

```{r, echo=FALSE}
x2
```

---

## Select clause - aliases

```{sql, connection=con, output.var="x3"}
SELECT upper(island) AS island,
  bill_length_mm * bill_depth_mm AS bill_area_mm2
FROM penguins
```

```{r, echo=FALSE}
x3
```

---

## Select clause - removing duplicates

```{sql, connection=con, output.var="x4"}
SELECT DISTINCT island, species
FROM penguins
```

```{r, echo=FALSE}
x4
```

---

## From clause - subquery

```{sql, connection=con, output.var="x5"}
SELECT a.bill_length_mm, a.bill_depth_mm
FROM
  (SELECT species, bill_length_mm, bill_depth_mm
   FROM penguins
   WHERE species = 'Adelie'
  ) AS a
```

```{r, echo=FALSE}
x5
```

---

## Where clause

```{sql, connection=con, output.var="x6"}
SELECT species, island, bill_length_mm, bill_length_mm, year
FROM penguins
WHERE year = 2007
```

```{r, echo=FALSE}
x6
```

---

## Where clause

```{sql, connection=con, output.var="x7"}
SELECT species, island, bill_length_mm, bill_length_mm, year
FROM penguins
WHERE year > 2007
```

```{r, echo=FALSE}
x7
```

---

## Where clause

```{sql, connection=con, output.var="x8"}
SELECT species, island, bill_length_mm, bill_length_mm, year
FROM penguins
WHERE year IN (2007, 2008)
```

```{r, echo=FALSE}
x8
```

---

## Where clause

```{sql, connection=con, output.var="x9"}
SELECT species, island, bill_length_mm, bill_length_mm, year
FROM penguins
WHERE year = 2007 AND species = 'Gentoo'
```

```{r, echo=FALSE}
x9
```

---

## Where clause

```{sql, connection=con, output.var="x10"}
SELECT species, island, bill_length_mm, bill_length_mm, year
FROM penguins
WHERE year = 2007 OR species = 'Gentoo'
```

```{r, echo=FALSE}
x10
```

---

## Order by clause

```{sql, connection=con, output.var="x11"}
SELECT species, island, bill_length_mm, bill_depth_mm
FROM penguins
ORDER BY bill_length_mm
```

```{r, echo=FALSE}
x11
```

---

## Order by clause

```{sql, connection=con, output.var="x12"}
SELECT species, island, bill_length_mm, bill_depth_mm
FROM penguins
ORDER BY bill_length_mm DESC
```

```{r, echo=FALSE}
x12
```

---

## Order by clause

```{sql, connection=con, output.var="x13"}
SELECT species, island, bill_length_mm, bill_depth_mm
FROM penguins
ORDER BY bill_length_mm ASC
```

```{r, echo=FALSE}
x13
```

---

## Order by clause

```{sql, connection=con, output.var="x14"}
SELECT species, island, bill_length_mm, bill_depth_mm
FROM penguins
ORDER BY bill_length_mm, bill_depth_mm
```

```{r, echo=FALSE}
x14
```

---

## group by clause

```{sql, connection=con, output.var="x15"}
SELECT 
  AVG(bill_length_mm) AS avg_bill_length, 
  AVG(bill_depth_mm) AS avg_bill_depth
FROM penguins
```

```{r, echo=FALSE}
x15
```

---

## group by clause

```{sql, connection=con, output.var="x16"}
SELECT island,
  AVG(bill_length_mm) AS avg_bill_length, 
  AVG(bill_depth_mm) AS avg_bill_depth
FROM penguins
GROUP BY island
```

```{r, echo=FALSE}
x16
```

---

## group by clause

```{sql, connection=con, output.var="x17"}
SELECT island, species,
  AVG(bill_length_mm) AS avg_bill_length, 
  AVG(bill_depth_mm) AS avg_bill_depth
FROM penguins
GROUP BY island, species
```

```{r, echo=FALSE}
x17
```

---

## group by clause - count

```{sql, connection=con, output.var="x18"}
SELECT island, species,
  COUNT(*) AS count
FROM penguins
GROUP BY island, species
```

```{r, echo=FALSE}
x18
```

---

## group by clause - count

```{sql, connection=con, output.var="x19"}
SELECT island, species,
  COUNT(*) AS count
FROM penguins
GROUP BY island, species
HAVING COUNT(*) < 100
```

```{r, echo=FALSE}
x19
```


```{r, echo=FALSE}
# clean up
dbDisconnect(con)
```

---

# SQL Joins{.smaller}

How do we use multiple tables in a single query? Using JOIN clauses:

 - `(INNER) JOIN`: Returns records that have matching values in both tables</li>
 - `LEFT (OUTER) JOIN`: Returns all records from the left table, and the matched records from the right table</li>
 - `RIGHT (OUTER) JOIN`: Returns all records from the right table, and the matched records from the left table</li>
 - `FULL (OUTER) JOIN`: Returns all records when there is a match in either left or right table</li>

To learn more about joins (and practice), checkout the [W3Schools website](https://www.w3schools.com/sql/sql_join.asp).

---

## SQL Joins (cont. 1)

- <img src="https://www.w3schools.com/sql/img_innerjoin.gif">
  ```r
  merge(x, y, all.x = FALSE, all.y = FALSE)
  ```
- <img src="https://www.w3schools.com/sql/img_leftjoin.gif">
  ```r
  merge(x, y, all.x = TRUE, all.y = FALSE)
  ```

---

## SQL Joins (cont. 2)

- <img src="https://www.w3schools.com/sql/img_rightjoin.gif">
  ```r
  merge(x, y, all.x = FALSE, all.y = TRUE)
  ```
- <img src="https://www.w3schools.com/sql/img_fulljoin.gif">
  ```r
  merge(x, y, all.x = TRUE, all.y = TRUE)
  ```

---

## SQL Joins with CHS Data

We first start by loading the datasets from https://github.com/USCBiostats/data-science-data

```{r, echo=TRUE}
# Download
chs_regional   <- read.csv("https://github.com/USCbiostats/data-science-data/raw/master/01_chs/chs_regional.csv")
chs_individual <- read.csv("https://github.com/USCbiostats/data-science-data/raw/master/01_chs/chs_individual.csv")

# Dropping some regions
chs_regional   <- subset(chs_regional, !townname %in% c("Alpine", "Lompoc"))
chs_individual <- subset(chs_individual, townname != "Lancaster")
```

And we drop a few observations from both datasets so that they only have
partially overlapping town information.

---

## Data Intro: Regional{.smaller}

```{r, echo=TRUE}
head(chs_regional)
dim(chs_regional)
```

---

## Data Intro: Regional (cont.){.smaller}

```{r, echo=TRUE}
unique(chs_regional$townname)
```


---

## Data Intro: Individual{.smaller}

```{r, echo=TRUE}
head(chs_individual)
dim(chs_individual)
```


---

## Data Intro: Individual (cont.){.smaller}

```{r, echo=TRUE}
unique(chs_individual$townname)
```


---

## Set up SQL database

```{r}
# Set up the dataset
library(RSQLite)
con <- dbConnect(SQLite(), ":memory:")
dbWriteTable(con, "regional", chs_regional)
dbWriteTable(con, "individual", chs_individual)
```

We now can illustrate the joins.

---

## SQL **INNER join** 

<img src="https://www.w3schools.com/sql/img_innerjoin.gif" width="15%">

- `chs_individual` has `r nrow(chs_individual)` rows
- `chs_regional` has `r nrow(chs_regional)` rows

```{r}
ans <- dbGetQuery(con,
  "SELECT *
  FROM regional AS a INNER JOIN individual AS b 
  ON a.townname = b.townname
  ")
nrow(ans)
```

---

## SQL **LEFT join** 

<img src="https://www.w3schools.com/sql/img_leftjoin.gif" width="15%">

- `chs_individual` has `r nrow(chs_individual)` rows
- `chs_regional` has `r nrow(chs_regional)` rows

```{r}
ans <- dbGetQuery(con,
  "SELECT *
  FROM regional AS a LEFT JOIN individual AS b 
  ON a.townname = b.townname")
nrow(ans)
```

---

## SQL **RIGHT join** 

<img src="https://www.w3schools.com/sql/img_rightjoin.gif" width="15%">

- `chs_individual` has `r nrow(chs_individual)` rows
- `chs_regional` has `r nrow(chs_regional)` rows

```{r}
ans <- dbGetQuery(con,
  "SELECT * /* RIGHT joins are not supported by SQLite*/
  FROM individual AS a LEFT JOIN regional AS b 
  ON a.townname = b.townname")
nrow(ans)
```

---

## SQL **FULL join** 

<img src="https://www.w3schools.com/sql/img_fulljoin.gif" width="15%">

- `chs_individual` has `r nrow(chs_individual)` rows
- `chs_regional` has `r nrow(chs_regional)` rows

```{r}
ans <- dbGetQuery(con,
  "SELECT *
  FROM individual AS a FULL JOIN regional AS b 
  ON a.townname = b.townname")
nrow(ans)
```


---

## Disconnect database

```{r, warning=FALSE}
dbDisconnect(con)
```

---

## What happens when there are no records matching

Step 1: Let's break things

```{r}
chs_individual2 <- subset(
  chs_individual, !(townname %in% chs_regional$townname)
)

unique(chs_individual2$townname)
chs_regional$townname
```

---

Step 2: Rebuild the Database

```{r}
con <- dbConnect(SQLite(), ":memory:")
dbWriteTable(con, "regional", chs_regional)
dbWriteTable(con, "individual", chs_individual2)
```

What happens now?

---

Re-running the full join:

<img src="https://www.w3schools.com/sql/img_fulljoin.gif" width="15%">

- `chs_individual` has `r nrow(chs_individual2)` rows
- `chs_regional` has `r nrow(chs_regional)` rows

```{r, warning=FALSE}
ans <- dbGetQuery(con,
  "SELECT *
  FROM individual AS a FULL JOIN regional AS b 
  ON a.townname = b.townname")
nrow(ans)
dbDisconnect(con)
```

---

What happens when we have multiple matching records in both tables?

```{r, warning=FALSE}
con <- dbConnect(SQLite(), ":memory:")
dbWriteTable(con, "regional_dpl", rbind(chs_regional, chs_regional))

nrow(rbind(chs_regional, chs_regional))
```


---

## Joins with duplicates

```{r}
ans <- dbGetQuery(con,
  "SELECT *
  FROM regional_dpl AS a FULL JOIN regional_dpl AS b 
  ON a.townname = b.townname")
nrow(ans)
```


```{r}
ans <- dbGetQuery(con,
  "SELECT * FROM regional_dpl AS a INNER JOIN regional_dpl AS b 
    ON a.townname = b.townname
  ")
nrow(ans)
```

---

## Distinct entries

```{r}
ans <- dbGetQuery(con,
  "SELECT DISTINCT * FROM regional_dpl AS a INNER JOIN regional_dpl AS b 
    ON a.townname = b.townname
  ")
nrow(ans)
dbDisconnect(con)
```

